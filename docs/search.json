[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PhD soybean 2021-2024",
    "section": "",
    "text": "Preface\nThis is a Quarto book which resume my work during my PhD.\nHere are the articles resulting from this research:\nMore informations about my work :",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#preface",
    "href": "index.html#preface",
    "title": "PhD soybean 2021-2024",
    "section": "",
    "text": "Guide being written\n\n\n\nThis guide is still incomplete. The complete repository (documentation, data, script, etc.) will be available shortly at this link: https://github.com/maslard.corentin/phd_soybean_2021_2024.\nIn the meantime, we advise you to complete your reading by visiting The thesis manuscript.\n\n\n\n\n\nMaslard et al. (2021)\nMaslard et al. (2024)\n\n\n\n\n\n Personal website\n Email\n Github\n Linkedin\n X (Twitter)\n\n\n\n ORCID\n ResearchGate\n Google Scholar\n HAL\n CV",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "PhD soybean 2021-2024",
    "section": "Licence",
    "text": "Licence\nThis document is made available under the terms of the Licence Creative Commons Attribution - Non Commercial Use - Share Alike 4.0 International.\n\n\n\n\n\nMaslard, Corentin, Mustapha Arkoun, Fanny Leroy, Sylvie Girodet, Christophe Salon, and Marion Prudent. 2024. “Decoding the Double Stress Puzzle: Investigating Nutrient Uptake Efficiency and Root Architecture in Soybean Under Heat- and Water- Stresses.” https://www.authorea.com/users/825555/articles/1221188-decoding-the-double-stress-puzzle-investigating-nutrient-uptake-efficiency-and-root-architecture-in-soybean-under-heat-and-water-stresses?commit=68ef1407778b8ab959855979d12292f4733eb306.\n\n\nMaslard, Corentin, Mustapha Arkoun, Christophe Salon, and Marion Prudent. 2021. “Root Architecture Characterization in Relation to Biomass Allocation and Biological Nitrogen Fixation in a Collection of European Soybean Genotypes.” OCL 28: 48. https://doi.org/10.1051/ocl/2021033.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "report/intro/intro.html",
    "href": "report/intro/intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Code\n#pkg \nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(ggtext)\nlibrary(stringr)\nlibrary(readxl)\n\n# cosmetics\nclimate_pallet=read_excel(here::here(\"data/color_palette.xlsm\")) %&gt;%\n      filter(set == \"climat_condition\") %&gt;%\n      dplyr::select(color, treatment) %&gt;%\n      pull(color) %&gt;%\n      setNames(read_excel(here::here(\"data/color_palette.xlsm\")) %&gt;%\n                 filter(set == \"climat_condition\") %&gt;%\n                 pull(treatment)\n               )\n\n\nSoybean (Glycine max) is a leguminous plant domesticated in China around 5,000 years ago. Initially used as green manure, it quickly became a staple food in East Asia, leading to the development of products like miso, tofu, and soy sauce. Through established trade routes between 1500 and 1400 BCE, soybean cultivation spread across Asia. Introduced to Europe in the 18th century, notably in France in 1740, soybean cultivation expanded significantly in the United States in the 20th century, primarily for animal feed due to its high protein and lipid content.\nToday, soybean is the fourth most important global crop after wheat, corn, and rice, with production surpassing 336 million tons in 2016-2017. The United States, Brazil, and Argentina dominate the market, accounting for 81% of global production (see Figure 1.1). The majority of soybean is used for animal feed, reflecting the global increase in meat consumption.\n\n\nCode\n# data importation\ndf&lt;-read.csv(here::here(\"data/soybean_production/soybean_production.csv\")) %&gt;% \n  dplyr::rename(\"Soy_production_tonnes\"=\"Soybeans...00000236....Production...005510....tonnes\") %&gt;% \n  #convert in million tonnes\n  mutate(Soy_production_m_tonnes=Soy_production_tonnes/100000)\n\n\n# see https://r-graph-gallery.com/web-line-chart-with-labels-at-end-of-line.html for help\nlevels(as.factor(df$Entity))\ndf_select &lt;-df %&gt;% \n  filter(Entity %in% c(\"France\",\"European Union (27)\" ,\"China\",\"United States\", \"Brazil\", \"Argentina\"))\nmax_df_select &lt;- max(df_select$Soy_production_m_tonnes)\n\nplot_x&lt;-df_select %&gt;%\n  dplyr::group_by(Entity) %&gt;% \n  mutate(name_lab = if_else(Year == 2022, Entity, NA_character_)) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(x=Year,y=Soy_production_m_tonnes, group=Entity))+\n  geom_vline(\n    xintercept = seq(1960, 2020, by = 5),\n    color = \"grey91\", \n    size = .6\n  ) +\n  scale_x_continuous(\n    expand = c(0, 0),\n    limits = c(1960, 2060), \n    breaks = seq(1960, 2024, by = 10)\n  )+\n  geom_segment(\n    data = tibble(y = seq(0, max_df_select, by = 100), x1 = 1960, x2 = 2022),\n    aes(x = x1, xend = x2, y = y, yend = y),\n    inherit.aes = FALSE,\n    color = \"grey91\",\n    size = .6\n  ) +\n  geom_segment(\n    data = tibble(y = 0, x1 = 1960, x2 = 2022),\n    aes(x = x1, xend = x2, y = y, yend = y),\n    inherit.aes = FALSE,\n    color = \"grey60\",\n    size = .8\n  ) +\n   theme(\n     axis.title = element_blank(),\n     axis.text = element_text(color = \"grey40\"),\n     axis.text.x = element_text(size = 20, margin = margin(t = 5)),\n    axis.text.y = element_text(size = 17, margin = margin(r = 5)),\n     axis.ticks = element_line(color = \"grey91\", size = .5),\n  # The length of the axis ticks is increased.\n  axis.ticks.length.x = unit(1.3, \"lines\"),\n  axis.ticks.length.y = unit(.7, \"lines\"),\n    panel.grid = element_blank(),   \n    legend.position = \"none\",       \n    plot.title = element_blank(),\n    plot.margin = margin(20, 40, 20, 40),\n  plot.background = element_rect(fill = \"grey98\", color = \"grey98\"),\n  panel.background = element_rect(fill = \"grey98\", color = \"grey98\"),\n  )+\n  geom_point(aes(color = Entity))+\n  geom_line(aes(color = Entity))+\n  labs(x = \"\", y = \"\") +            \n  scale_y_continuous(\n    labels = function(y) paste0(y, \" million t\")  \n  ) +\n  scale_color_manual(values = c(\"#002654\",\"#001489\", \"#ee1c25\",\"#0A3161\",\"#009739\",\"#6CACE4\"),\n                     breaks = c(\"France\",\"European Union (27)\" ,\"China\",\"United States\", \"Brazil\", \"Argentina\")\n  )+\n  geom_text_repel(\n    aes(color = Entity, label = name_lab),\n    fontface = \"bold\",\n    size = 8,\n    direction = \"y\",\n    xlim = c(2023, NA),\n    hjust = 0,\n    segment.size = .7,\n    segment.alpha = .5,\n    segment.linetype = \"dotted\",\n    box.padding = .4,\n    segment.curvature = -0.1,\n    segment.ncp = 3,\n    segment.angle = 20\n  )\n\nplot_x\nggsave(here::here(paste0(\"report/intro/plot/All.svg\")),plot_x, height = 8,width = 14)\n\n\n\n\n\n\n\n\nFigure 1.1: Soybean production is measured in tonnes. Data came from the Our Word in Data website.\n\n\n\nIn France, soybean cultivation gained traction after a U.S. export embargo in the 1970s exposed a national protein deficit. Although national production remains modest at around 400,000 tons per year, soybean offers significant agro-ecological benefits. As a legume, it fixes atmospheric nitrogen, reducing reliance on chemical fertilizers. Its roots improve soil structure, increasing porosity and water retention capacity. Additionally, integrating soybean into crop rotations can boost yields for subsequent crops like wheat and corn while reducing pesticide use and lowering the carbon footprint of agricultural practices.\nIn terms of phenology, soybean goes through vegetative and reproductive stages, from emergence to seed maturation. Varieties are classified into maturity groups based on their adaptation to photoperiod and temperature, allowing cultivation across various latitudes. Botanically, soybean is a self-pollinating plant with white or purple flowers, trifoliate leaves, and a deep taproot system. Its high protein and lipid content make it an economically important crop.\nGrain legumes are cultivated for their protein-rich seeds, used for feed or food. Grain legumes do not need N fertilizers, thanks to their ability to fix atmospheric N2 in symbiosis with soil bacteria (rhizobia) in newly-formed root organs called nodules. As such, legumes play a pivotal role in the development of more sustainable agriculture and can contribute to the mitigation of future climate change. However, their sensitivity to environmental stresses, in particular to heat and drought stresses, leads to instability of their yield (in seed amount and protein content), which hampers legume development in cropping systems. Yields for soybeans in various countries are shown in the figure below Figure 1.2.\n\n\nCode\n# data importation\ndf&lt;-read.csv(here::here(\"data/soybean_production/soybean_yields.csv\")) %&gt;% \n  dplyr::rename(\"Soy_yield_tonnes_per_hectare_tonnes\"=\"Soybeans...00000236....Yield...005419....tonnes.per.hectare\")\n\n# see https://r-graph-gallery.com/web-line-chart-with-labels-at-end-of-line.html for help\nlevels(as.factor(df$Entity))\ndf_select &lt;-df %&gt;% \n  filter(Entity %in% c(\"European Union (27)\" ,\"China\",\"United States\", \"South America (FAO)\"))\nmax_df_select &lt;- max(df_select$Soy_yield_tonnes_per_hectare_tonnes)\n\nplot_x&lt;-df_select %&gt;%\n  dplyr::group_by(Entity) %&gt;% \n  mutate(name_lab = if_else(Year == 2022, Entity, NA_character_)) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(x=Year,y=Soy_yield_tonnes_per_hectare_tonnes, group=Entity))+\n  geom_vline(\n    xintercept = seq(1960, 2020, by = 5),\n    color = \"grey91\", \n    size = .6\n  ) +\n  scale_x_continuous(\n    expand = c(0, 0),\n    limits = c(1960, 2060), \n    breaks = seq(1960, 2024, by = 10)\n  )+\n  geom_segment(\n    data = tibble(y = seq(0, max_df_select, by = 1), x1 = 1960, x2 = 2022),\n    aes(x = x1, xend = x2, y = y, yend = y),\n    inherit.aes = FALSE,\n    color = \"grey91\",\n    size = .6\n  ) +\n  geom_segment(\n    data = tibble(y = 0, x1 = 1960, x2 = 2022),\n    aes(x = x1, xend = x2, y = y, yend = y),\n    inherit.aes = FALSE,\n    color = \"grey60\",\n    size = .8\n  ) +\n   theme(\n     axis.title = element_blank(),\n     axis.text = element_text(color = \"grey40\"),\n     axis.text.x = element_text(size = 20, margin = margin(t = 5)),\n    axis.text.y = element_text(size = 17, margin = margin(r = 5)),\n     axis.ticks = element_line(color = \"grey91\", size = .5),\n  # The length of the axis ticks is increased.\n  axis.ticks.length.x = unit(1.3, \"lines\"),\n  axis.ticks.length.y = unit(.7, \"lines\"),\n    panel.grid = element_blank(),   \n    legend.position = \"none\",       \n    plot.title = element_blank(),   \n    plot.margin = margin(20, 40, 20, 40),\n  plot.background = element_rect(fill = \"grey98\", color = \"grey98\"),\n  panel.background = element_rect(fill = \"grey98\", color = \"grey98\"),\n  )+\n  geom_point(aes(color = Entity),alpha=.5)+\n  geom_smooth(aes(color = Entity))+\n  labs(x = \"\", y = \"\") +           \n  scale_y_continuous(\n    labels = function(y) paste0(y, \" million t\")\n  ) +\n  scale_color_manual(values = c(\"#001489\", \"#ee1c25\",\"#0A3161\",\"#009739\"),\n                     breaks = c(\"European Union (27)\" ,\"China\",\"United States\", \"South America (FAO)\")\n  )+\n  geom_text_repel(\n    aes(color = Entity, label = name_lab),\n    fontface = \"bold\",\n    size = 8,\n    direction = \"y\",\n    xlim = c(2023, NA),\n    hjust = 0,\n    segment.size = .7,\n    segment.alpha = .5,\n    segment.linetype = \"dotted\",\n    box.padding = .4,\n    segment.curvature = -0.1,\n    segment.ncp = 3,\n    segment.angle = 20\n  )\n\nplot_x\nggsave(here::here(paste0(\"report/intro/plot/Yield_all.svg\")),plot_x, height = 8,width = 12)\n\n\n\n\n\n\n\n\nFigure 1.2: Soybean yields\n\n\n\nIn the context of changing climate, where more intense and longer periods of heat stresses are experienced, it is urgent to improve the ability of grain legumes to maintain their growth in order to guarantee high levels of productivity. The study of combined stresses, such as water and heat stress, is steadily increasing. However, it remains far less explored than research into simple stresses, both in plants in general and in soybeans in particular (see Figure 1.3)\n\n\nCode\n# Data importation\ncsv_files &lt;- list.files(path = here::here(\"data/intro/\"), pattern = \"*.csv\", full.names = TRUE)\n\n# Function to extract plant type and stress type from the filename\nextract_info &lt;- function(filename) {\n  # Extract the base name without the folder path\n  base_name &lt;- basename(filename)\n  \n  # Extract plant type (assuming it's either \"plant\" or \"soybean\")\n  plant_type &lt;- ifelse(str_detect(base_name, \"soybean\"), \"Soybean\", \"Plant\")\n  \n  # Extract stress type\n  if (str_detect(base_name, \"water_stress\") & str_detect(base_name, \"heat_stress\")) {\n    stress_type &lt;- \"Water and heat stresses\"\n  } else if (str_detect(base_name, \"water_stress\")) {\n    stress_type &lt;- \"Water stress\"\n  } else if (str_detect(base_name, \"heat_stress\")) {\n    stress_type &lt;- \"Heat stress\"\n  } else {\n    stress_type &lt;- NA  # If no matching stress type is found\n  }\n  \n  # Return a list with plant type and stress type\n  list(plant_type = plant_type, stress_type = stress_type)\n}\n\n# Read and combine all the CSV files into a single data frame\ncombined_data &lt;- csv_files %&gt;%\n  lapply(function(file) {\n    data &lt;- read.csv(file,skip = 1)\n    info &lt;- extract_info(file)\n    data$Plant &lt;- info$plant_type\n    data$Stress_Type &lt;- info$stress_type\n    return(data)\n  }) %&gt;%\n  bind_rows()\n\n# Create plot\nplot_x=combined_data %&gt;% \n  filter(Year&lt;2023,\n         Year&gt;1950) %&gt;% \n  mutate(Stress_Type = factor(Stress_Type, levels = c(\"Water stress\", \"Heat stress\", \"Water and heat stresses\"))) %&gt;% \nggplot(aes(x = Year, y = Count, color=Stress_Type, fill= Stress_Type)) +\n  #geom_hline(yintercept=0)+\n  #geom_vline(xintercept=1950)+\n  geom_line(size=1.5, alpha=.9) +\n   geom_text(data = . %&gt;%\n              arrange(desc(Year)) %&gt;%\n              group_by(Plant, Stress_Type) %&gt;%\n              slice(1),\n            aes(label = Count),\n            position = position_nudge(0.1),\n            hjust = -0.2,\n            show.legend = FALSE) +\n  #geom_point() +  \n  labs(title = \"Number of Publications by Year\",\n       x = \"Year\",\n       y = \"Number of Publications\",\n       color = \"Stress research:\") +  # Label the legend\n  #theme_minimal() +  # Apply a minimal theme\n  theme_bw()+\n  theme(\n    legend.position = \"none\",\n    strip.background = element_blank(),\n    panel.background = element_blank()\n    #panel.grid.major = element_line(color = \"lightgray\")\n  )+\n  scale_x_continuous(limits = c(1950, 2040))+\n  facet_grid(Plant~Stress_Type, scales = \"free_y\", switch = \"y\" )+ #strip.position = \"top\"\n  scale_color_manual(values = c(\"#4D76BC\", \"#D6424E\", \"#E89005\"))\n\nggsave(here::here(paste0(\"report/intro/plot/pub_soybean_plant_stress.svg\")),plot_x, height = 5,width = 8)\n\n# Create plot\nplot_x=combined_data %&gt;% \n  filter(Year&lt;2023,\n         Year&gt;1970, \n         Plant==\"Plant\") %&gt;% \n  mutate(Stress_Type = factor(Stress_Type, levels = c(\"Water stress\", \"Heat stress\", \"Water and heat stresses\"))) %&gt;% \nggplot(aes(x = Year, y = Count, color=Stress_Type, fill= Stress_Type)) +\n  geom_line(size=1.5, alpha=.9) +\n   geom_text(data = . %&gt;%\n              arrange(desc(Year)) %&gt;%\n              group_by(Plant, Stress_Type) %&gt;%\n              slice(1),\n            aes(label = Count),\n            position = position_nudge(0.1),\n            hjust = -0.2,\n            show.legend = FALSE) +\n  labs(x = \"Year\",\n       y = \"Number of Publications\",\n       color = \"Stress research:\") +\n  theme_classic() +\n  theme(\n    legend.position = \"right\",\n    strip.background = element_blank(),\n    panel.background = element_blank(),\n    text = element_text(size = 14)\n  )+\n  scale_x_continuous(limits = c(1980, 2026))+\n  scale_color_manual(values = c(\"#4D76BC\", \"#D6424E\", \"#E89005\"))\n\nggsave(here::here(paste0(\"report/intro/plot/pub_plant_stress.svg\")),plot_x, height = 3.5,width = 7)\n\n\n\n\n\n\n\n\nFigure 1.3: Number of publications per year on this research topic\n\n\n\nHigh temperatures impact legumes by multiple, unclear ways : (i) Plant photosynthesis and respiration are impacted by high temperatures above thresholds which vary upon legume species. Depending on the phenological stage, the way high temperatures modulate carbon (C) allocation to the root system is not clear; second, they could affect the competition for C both between roots and nodules. This induces changes in their nutrition, growth and development. (ii) High temperatures also impact the soil microbial community in its composition, diversity and function, and shapes its interactions with plants. In particular, high temperatures affects symbiotic relationships between legumes and rhizobia and consequently plant N nutrition. High temperatures also affect non-symbiotic soil microbial activity, by modulating the amount, availability and composition of C compounds rhizodeposited in the rhizosphere (mainly labile C) by the plant, inducing changes in microbial community structure, with potential consequences on plant nutrition.\nThe PhD project proposes to develop new knowledge on the interplay between legume plant’s nodulated root system and associated plant and soil microorganisms, in order to design new strategies for the improvement of legume nutrient uptake efficiency during heat stress.",
    "crumbs": [
      "**Introduction to the thesis**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "report/intro/1_experimental_design_climat.html",
    "href": "report/intro/1_experimental_design_climat.html",
    "title": "2  Experimental design and climate condition",
    "section": "",
    "text": "2.1 Experimental design\nTwo French genotypes of soybean (Glycine max L.) belonging to the same maturity group I were selected for their similar root or aerial biomasses and their contrasted root system architecture: Stocata (obtained from RAGT Semences) and Wendy (obtained from Caussade Semences) (Maslard et al. 2021). Seeds were calibrated and pre-germinated for 4 days at 20 °C in a Fitoclima S600 germinator (Aralab, Rio de Mouro, Portugal) before transplantation. Seedlings were grown in RhizoTubes® (Figure 7.1) filled with sandy soil, allowing the visualization of the root system (Chapter 7). The soil was collected from a grassland at Flammerans near Dijon (Burgundy). Plants were grown under controlled conditions, in the Plant Phenotyping Platform for Plant and Microorganism Interaction (4PMI) at INRAE in Dijon (France) (47°32’N, 5°02’E) during 23 days in RhizoTube® (Figure 2.1). Two seedlings were transplanted in each of the 144 RhizoTubes®, in two different identical greenhouses (Figure 2.4). Two plants grew in each RhizoTubes® and were destined for four different types of analysis (Figure 2.2). At the same time, each seedling was inoculated with 1mL of Bradyrhizobium diazoefficiens corresponding to 108 rhizobia.\nAir relative humidity was controlled to 45% and the photoperiod was set to 16h thanks to an artificial lighting (PAR of 272µmol.m-2. s-1) supplied with sodium lamps (400W lamp, HPS Plantastar, OSRAM, Munich, Germany). The PAR data as well as the other climatic data (humidity, temperature) are presented below (Figure 2.3).\nEvery Rhizotube® was autonomously weighed both before and after each watering session, if applicable, three times a day. This process was conducted to establish the evolving water evapotranspiration (ml)(Figure 3.2) and precise solution quantities (Chapter 3). The cumulative evapotranspiration during experiment was computed by summing and halving (accounting for the two plants within each Rhizotube®) the individual daily differences in Rhizotube® weight between consecutive watering events, or weight variation (Chapter 3). A N-free nutrient solution as described in (Voisin et al. 2003) was applied 3 times a day to allow 20% SWC (80% of field capacity) of water content in the RhizoTube® (Figure 3.1). Mean day/night temperatures were 32°C/24°C in two greenhouses (Figure 2.3).\nFollowing the first week of growth, 12 plants per genotype were harvested (Figure 2.2). Subsequently, we implemented a factorial design consisting of eight different conditions (Sto_WW_OT, Sto_WS_OT, Sto_WW_HS, Sto_WS_HS, Wen_WW_OT, Wen_WS_OT, Wen_WW_HS, Wen_WS_HS) involving the two genotypes, Stocata (Sto) and Wendy (Wen), and four climatic conditions, composed of two stress factors. One factor was related to watering, with half of plants being subjected to either well-watered (WW) conditions with a SWC of 20 percent (field capacity of 80%) soil water content of 20%, or water stress (WS) conditions achieved by withholding water to reach 10% soil water content (Figure 3.1). The second factor was related to temperature. One greenhouse was maintained at an optimal temperature (OT) of 32°C/24°C (day/night), while the other greenhouse experienced two progressive heat waves of 40°C for 3 days (Figure 2.3 A), representing heat stress conditions (HS). Five days after sowing some plants were harvested for physiological analysis (including ionomic analysis) (H1). Then 20 days after sowing, (after the period of stress) plant were harvest (H2) and each organ was collected separately (leaves, stems and roots).\nFour different types of analysis were performed:\nPlants A and B were harvested from the same rhizotube. Plants C and D were harvested from the same rhizotube. All plants were imaged three times a week to measure aerial and root architecture.",
    "crumbs": [
      "**Introduction to the thesis**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Experimental design and climate condition</span>"
    ]
  },
  {
    "objectID": "report/intro/1_experimental_design_climat.html#experimental-design",
    "href": "report/intro/1_experimental_design_climat.html#experimental-design",
    "title": "2  Experimental design and climate condition",
    "section": "",
    "text": "Figure 2.1: Experimental design of the experiment\n\n\n\n\n\n\n\n\n\nFigure 2.2: Harvest diagram for the experiment. RT for Rhizotube. Harvest 1 took place 5 days after sowing. Harvest 2 was carried out on the day after sowing. For harvest 1, there are two plants of the same genotype per rhizotube (RT0). For each plant, ecophysiological measurements and the content of elements in each compartment were conducted. For harvest 2, in each rhizotube (RT1, RT2), there were two plants of the same genotype that have undergone the same stress conditions. Ecophysiological measurements and the element content were performed on one of the two plants. The other plant was designated for molecular analyses. Transcriptomic measurements were conducted on a pool of two roots from two plants from two different RhizoTubes (RT1 and RT2) of the same genotype having received the same stress conditions. Metabolomic analyses of leaves, stems, and roots were performed on the same plant combination. The soil near this plant was collected for metabolomic analyses, pH analyses, and microbial community analyses (Rhizosphere) (no assembly of these soils). The soil between these two plants was used for metabolomic analyses as well as for microbial community analyses (Bulk soil). During this experiment, other RhizoTubes (RT3) also containing two plants of the same genotype were in the same greenhouse. One was designated for microbial community analyses, the other for metabolomic measurements of exudates. On the plant used for the root exudates, ecophysiological measurements were also conducted. Root system architecture (RSA) and total evapotranspiration were measured on all RhizoTubes during the experiment. WW: Well Watered; WS: Water Stress; OT: Optimal temperature; HS: Heat Stress.\n\n\n\n\n\n\n\n\nEight plants per condition were dedicated to ecophysiological analyses (Chapter 3) including ionomics (Chapter 10) (8 plants per condition (only 6 plants over the 8 plants were used for ionomic analysis).\nEight plants per condition were dedicated to transcriptomic and metabolomic analyses. After being harvested in liquid nitrogen, four replicates of two plants each were pooled together for each of the four treatments, for each genotype and each plant compartment (leaf, stem, and root). These pooled samples were then ground for analysis. Only root samples were analysed for transcriptomic analysis (?sec-rnaseq) and all three compartments were analyzed for metabolomics (?sec-metabo). Plant soil located close to or far from the roots was collected for metabolomics (?sec-metabo) analyses as well as for microbial community (?sec-mcom) and pH analyses.\nFive plants per condition were dedicated to exudate collection and exudation analyses by metabolomics (?sec-metabo) and to biomass measurement of each compartment.\nFive plants per condition were dedicated to the analysis of microbial communities (fungi or bacteria) in different compartments (phylloplane, leaf endosphere, root endosphere, and rhizoplane) (?sec-mcom)",
    "crumbs": [
      "**Introduction to the thesis**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Experimental design and climate condition</span>"
    ]
  },
  {
    "objectID": "report/intro/1_experimental_design_climat.html#climate-in-the-greenhouse",
    "href": "report/intro/1_experimental_design_climat.html#climate-in-the-greenhouse",
    "title": "2  Experimental design and climate condition",
    "section": "2.2 Climate in the greenhouse",
    "text": "2.2 Climate in the greenhouse\n\n\nCode\n#temperature compilation\ndata_global_climat_select=climat_function()\ndata_global_climat_select_moy=mean_interval_function(data_global_climat_select,5,\"min\")\n\n#graphique\nggplotly(ggplot(data_global_climat_select_moy,aes(x=as.POSIXct(Date_Time),y=Hygrometry,col=CardID))+geom_line()+#geom_point(size=0.5)+\n           facet_grid(~Unit))\n\n# Specify cutting interval in minutes (e.g. 60 minutes)\ninterval_minutes &lt;- 60\n\ndata_mean &lt;- data_global_climat_select_moy %&gt;%\n  filter(CardID!=\"ARIA\") %&gt;% \n  mutate(Date_Time =as.POSIXct(Date_Time, format=\"%Y-%m-%d %H:%M\")) %&gt;%\n  filter(Date_Time&gt;as.POSIXct(\"2021-09-22 10:00:00\")& Date_Time&lt;as.POSIXct(\"2021-10-14 00:00:00\")) %&gt;% \n  mutate(interval_id = cut(\n    as.POSIXct(Date_Time),\n    breaks = seq(min(Date_Time), max(Date_Time) + interval_minutes * 60, by = interval_minutes * 60),\n    labels = FALSE,\n    include.lowest = TRUE\n  )) %&gt;% \n  dplyr::group_by(Unit, interval_id) %&gt;%\n  dplyr::summarise(mean_temp = mean(Temperature, na.rm = TRUE),\n            mean_humidity = mean(Hygrometry, na.rm = TRUE),\n            mean_PAR = mean(PAR, na.rm = TRUE)) %&gt;%\n  ungroup() \n\nplot_mean_temperature=data_mean %&gt;% \nggplot(aes(x = interval_id/24, y = mean_temp, color = Unit)) +\n  geom_line() +\n  labs(x = \"Day\", y = \"Average temperature (°C)\", color = \"Unit\") +\n  scale_fill_manual(values=temperature_color)+\n  scale_color_manual(values=temperature_color)+\n  my_theme \nplot_mean_temperature\n\nplot_mean_humidity=data_mean %&gt;% \n  ggplot(aes(x = interval_id/24, y = mean_humidity, color = Unit)) +\n  geom_line() +\n  labs(x = \"Day\", y = \"Average humidity (%)\", color = \"Unit\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 100))+\n  scale_fill_manual(values=temperature_color)+\n  scale_color_manual(values=temperature_color)+\n  my_theme\nplot_mean_humidity\n\nplot_mean_PAR=data_mean %&gt;% \n  ggplot(aes(x = interval_id/24, y = mean_PAR, color = Unit)) +\n  geom_line() +\n  labs(x = \"Day\", \n       y=expression(atop(\"Photosynthetically active\",paste( \"radiation \", \"(µmol/ \",m^-2,\" /\",s^-1,\")\"))),\n       color = \"Unit\") +\n  scale_fill_manual(values=temperature_color)+\n  scale_color_manual(values=temperature_color)+\n  my_theme\nplot_mean_PAR\n\ncombined_plot=ggarrange(plot_mean_temperature,plot_mean_humidity,plot_mean_PAR,ncol=1, nrow=3,common.legend = TRUE, legend=\"right\",labels = c(\"A\",\"B\",\"C\"),align='v')\n\n# Create a title and subtitle\ncombined_plot_title=annotate_figure(\n  annotate_figure(combined_plot,\n                  top=text_grob(\"The measurement represents an average each hour derived from four sensors positioned at \\n various locations within the unit for each unit.\", size = 12,hjust=0,x=0.1,y=0.4),\n  ),\n  top=text_grob(\"Temperature, humidity and PAR during the experiment\",face = \"bold\", size = 14,hjust=0,x=0.1,y=0.4)\n) ; combined_plot_title\n\n# export\nggsave(here::here(\"report/intro/plot/combined_plot.svg\"), combined_plot_title, width = 21, height = 25, units = \"cm\")\n\n\n\n\n\n\n\n\nFigure 2.3: Temperature (A), humidity (B) and PAR (C) during the experiment. The measurement represents an average each hour derived from four sensors positioned at various locations within the unit for each unit.\n\n\n\n\n\nBonnus: Correction for spatial trends over time\n\n\n2.2.1 Correction for spatial trends over time\n\n\n\n\n\n\nIf there had been a significant bias, I would have had to take it into account\n\n\n\nBut according to the model (Chapter 3 and Chapter 6) using biomass there is only a slight effect of position in the greenhouse, and in addition I randomized the experiments.\n\n\n\n2.2.1.0.1 Data importation\n\n\nCode\ndf_physio&lt;-read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(across(c(\"storage_line\",\"position\"), as.integer)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\"))\n\n\n\n\n2.2.1.0.2 Formatting and visualizing the data\nThe first step when modeling platform experiment data with the statgenHTP package is creating an object of class TP (Time Points) For some variable you havent (one harvest). In this object, the time points are split into single data.frames. It is then used throughout the statgenHTP package as input for analyses.\n\n\nCode\n# Formatting the data = create a list with one data frame per time point\nU2_all_time_point &lt;- createTimePoints(dat = df_physio %&gt;%\n                                    filter(unit==\"U2\") %&gt;% \n                                    #filter(paire==F) %&gt;% \n                                    mutate(plant_num=as.character(plant_num)) %&gt;% \n                                    mutate(position_b =ifelse(as.numeric(plant_num) %% 2 == 1, as.numeric(position) * 2 - 1, as.numeric(position) * 2)) %&gt;% \n                                    mutate(pos=paste0(\"c\",storage_line,\"r\",position_b)) %&gt;% \n                                    mutate(timepoints=\"2021-10-11\") %&gt;% \n                                    mutate(harvest_condition=paste0(recolte, \"_\", condition)) %&gt;% \n                                    dplyr::select(timepoints, harvest_condition, position_b, storage_line, sum_biomass,pos,rep),\n                                    experimentName = \"U2_Soybean_2021\",\n                                    genotype = \"harvest_condition\",\n                                    timePoint = \"timepoints\",\n                                    repId = \"rep\", \n                                    plotId = \"pos\",\n                                    rowNum = \"position_b\", colNum = \"storage_line\",\n                                    addCheck = FALSE, #if you have some geneotype repeate (that help the model to control)\n                                    checkGenotypes = c(\"Wen_WW_OT\", \"Wen_WW_HS\", \"Sto_WW_OT\", \"Sto_WW_HS\")\n                                )\n\nU3_all_time_point &lt;- createTimePoints(dat = df_physio %&gt;%\n                                    filter(unit==\"U3\") %&gt;% \n                                    #filter(paire==F) %&gt;% \n                                    mutate(plant_num=as.character(plant_num)) %&gt;% \n                                    mutate(position_b =ifelse(as.numeric(plant_num) %% 2 == 1, as.numeric(position) * 2 - 1, as.numeric(position) * 2)) %&gt;% \n                                    mutate(pos=paste0(\"c\",storage_line,\"r\",position_b)) %&gt;% \n                                    mutate(timepoints=\"2021-10-11\") %&gt;% \n                                    mutate(harvest_condition=paste0(recolte, \"_\", condition)) %&gt;% \n                                    dplyr::select(timepoints, harvest_condition, position_b, storage_line, sum_biomass,pos,rep),\n                                    experimentName = \"U3_Soybean_2021\",\n                                    genotype = \"harvest_condition\",\n                                    timePoint = \"timepoints\",\n                                    repId = \"rep\", \n                                    plotId = \"pos\",\n                                    rowNum = \"position_b\", colNum = \"storage_line\",\n                                    addCheck = FALSE, #if you have some geneotype repeate (that help the model to control)\n                                    checkGenotypes = c(\"Wen_WW_OT\", \"Wen_WW_HS\", \"Sto_WW_OT\", \"Sto_WW_HS\")\n                                )\n\nU2_H2_time_point &lt;- createTimePoints(dat = df_physio %&gt;%\n                                    filter(unit==\"U2\") %&gt;% \n                                    filter(paire==F) %&gt;% \n                                    filter(recolte==2) %&gt;% \n                                    mutate(plant_num=as.character(plant_num)) %&gt;% \n                                    mutate(position_b =ifelse(as.numeric(plant_num) %% 2 == 1, as.numeric(position) * 2 - 1, as.numeric(position) * 2)) %&gt;% \n                                    mutate(pos=paste0(\"c\",storage_line,\"r\",position_b)) %&gt;% \n                                    mutate(timepoints=\"2021-10-11\") %&gt;% \n                                    mutate(harvest_condition=paste0(recolte, \"_\", condition)) %&gt;% \n                                    dplyr::select(timepoints, harvest_condition, position, storage_line, sum_biomass,pos,rep),\n                                    experimentName = \"U2_Soybean_2021\",\n                                    genotype = \"harvest_condition\",\n                                    timePoint = \"timepoints\",\n                                    repId = \"rep\", \n                                    plotId = \"pos\",\n                                    rowNum = \"position\", colNum = \"storage_line\",\n                                    addCheck = FALSE, #if you have some geneotype repeate (that help the model to control)\n                                    checkGenotypes = c(\"Wen_WW_OT\", \"Wen_WW_HS\", \"Sto_WW_OT\", \"Sto_WW_HS\")\n                                )\n\nU3_H2_time_point &lt;- createTimePoints(dat = df_physio %&gt;%\n                                      filter(unit==\"U3\") %&gt;% \n                                      filter(paire==F) %&gt;% \n                                      filter(recolte==2) %&gt;% \n                                      mutate(plant_num=as.character(plant_num)) %&gt;% \n                                      mutate(position_b =ifelse(as.numeric(plant_num) %% 2 == 1, as.numeric(position) * 2 - 1, as.numeric(position) * 2)) %&gt;% \n                                      mutate(pos=paste0(\"c\",storage_line,\"r\",position)) %&gt;% \n                                      mutate(timepoints=\"2021-10-11\") %&gt;% \n                                      mutate(harvest_condition=paste0(recolte, \"_\", condition)) %&gt;% \n                                      dplyr::select(timepoints, harvest_condition, position, storage_line, sum_biomass,pos,rep),\n                                    experimentName = \"U3_Soybean_2021\",\n                                    genotype = \"harvest_condition\",\n                                    timePoint = \"timepoints\",\n                                    repId = \"rep\", \n                                    plotId = \"pos\",\n                                    rowNum = \"position\", colNum = \"storage_line\",\n                                    addCheck = FALSE, #if you have some geneotype repeate (that help the model to control)\n                                    checkGenotypes = c(\"Wen_WW_OT\", \"Wen_WW_HS\", \"Sto_WW_OT\", \"Sto_WW_HS\")\n                                )\n\n\nPlot the layout, NA indicate a probleme with the plant. (It has not been harvested)\n\n\nCode\n## Plot the layout for the 3rd time points.\np_u2=plot(U2_all_time_point,\n     plotType = \"layout\",\n     timePoints = c(1),\n    highlight = c(\"1_Wen_WW_OT\", \"1_Sto_WW_OT\",\"2_Wen_WW_OT\", \"2_Wen_WS_OT\", \"2_Wen_WW_HS\", \"2_Wen_WS_HS\",\"2_Sto_WW_OT\", \"2_Sto_WS_OT\", \"2_Sto_WW_HS\", \"2_Sto_WS_HS\"),\n     showGeno = TRUE)\n\np_u3=plot(U3_all_time_point,\n     plotType = \"layout\",\n     timePoints = c(1),\n    highlight = c(\"1_Wen_WW_OT\", \"1_Sto_WW_OT\",\"2_Wen_WW_OT\", \"2_Wen_WS_OT\", \"2_Wen_WW_HS\", \"2_Wen_WS_HS\",\"2_Sto_WW_OT\", \"2_Sto_WS_OT\", \"2_Sto_WW_HS\", \"2_Sto_WS_HS\"),\n     showGeno = TRUE)\n\nsvg(file=here::here(\"report/intro/plot/layout_unit_U2.svg\"),width = 9, height = 9)\np_u2\ndev.off()\n\nsvg(file=here::here(\"report/intro/plot/layout_unit_U3.svg\"),width = 9, height = 9)\np_u3\ndev.off()\n\n# # Check the heatmap of the raw data at one time point\n# plot(U2_time_point,\n#      plotType = \"layout\",\n#      timePoints = 1,\n#      traits = \"sum_biomass\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) U2\n\n\n\n\n\n\n\n\n\n\n\n(b) U3\n\n\n\n\n\n\n\nFigure 2.4: Layout of Rhizotube and plants in the two greenhouses\n\n\n\n\n\nCode\nTrait &lt;-\"sum_biomass\"\nspatial_correction&lt;-function(Trait,data_x){\n  \n  pheno &lt;- data_x[[1]] %&gt;% drop_na(Trait) #%&gt;% filter(genotype %in% c( \"2_Wen_WS_OT\",\"2_Sto_WS_OT\")) %&gt;% mutate(genotype==substr(genotype, 3, 5)) # select the nb of segments: here all the rows and columns\n  nseg = c(nlevels(pheno$colId), nlevels(pheno$rowId))\n\n  cat(\"Time Point: \", timePoint, \"\\n\", file = output_file)  # add timePoint number\n  print(timePoint)\n  fit.SpATS &lt;- SpATS(response = Trait, # fit the SpATS model\n                   fixed = ~ repId,\n                   random = ~ colId + rowId,\n                   spatial = ~ PSANOVA(colNum, rowNum,\n                                       nseg = nseg,\n                                       nest.div = c(2, 2)),\n                   genotype = \"genotype\",\n                   genotype.as.random = TRUE,\n                   data = pheno,\n                   control = list(maxit = 50,\n                                  tolerance = 1e-03,\n                                  monitoring = 0)) \n  \n  summary_output &lt;- capture.output(summary(fit.SpATS)) # Captures model summary output\n  all_summaries &lt;- c(all_summaries, paste0(\"Time Point: \", timePoint, \"\\n\", summary_output))# Add output to variable\n  \n  writeLines(all_summaries, con = output_file)\n  cat(\"Traitement pour le trait\", Trait, \"terminé.\\n\")\n  plot(fit.SpATS, spaTrend = \"percentage\")## plot of the spats model with spatial trend as percentage\n  \n  modPhenoSpCheck &lt;- fitModels(TP = data_x, \n                                   trait = Trait,\n                                   useRepId = TRUE,\n                                   useCheck = FALSE,\n                                   timePoints = 1)\n      \n  px&lt;-plot(modPhenoSpCheck, \n           timePoints = 1,\n           plotType = \"spatial\",\n           spaTrend = \"percentage\")\n      \n  ## Extract the corrected values for one time point\n  spatCorrSp &lt;- getCorrected(modPhenoSpCheck, timePoints = timePoint)\n   \n  varianceSp &lt;- getVar(modPhenoSpCheck) ## Extract model components: \n  heritSp    &lt;- getHerit(modPhenoSpCheck)\n  effDimSp   &lt;- getEffDims(modPhenoSpCheck)\n  \n  return(list(list(plot = px, datacorrect = spatCorrSp)))\n}\n\nresult_U2=spatial_correction(Trait = \"sum_biomass\",data_x = U2_H2_time_point)\nresult_U3=spatial_correction(Trait = \"sum_biomass\",data_x = U3_H2_time_point)\n\np1&lt;-result_U2[[1]]$plot$`2021-10-11`$p4\np2&lt;-result_U3[[1]]$plot$`2021-10-11`$p4\n\np1=p1+labs(title = paste0(\"Filtted Spatial Trend Unit 2\", \" \", \"sum_biomass\"))\np2=p2+labs(title = paste0(\"Filtted Spatial Trend Unit 3\" , \" \", \"sum_biomass\"))\n\nggsave(here::here(\"report/intro/plot/ggcoef_model.svg\"),p1+p2)\n\nresult_all=rbind(result_U2[[1]]$\"datacorrect\",result_U3[[1]]$\"datacorrect\")\n\np1=result_all %&gt;% ggplot(aes(x=genotype,y=sum_biomass, fill=genotype))+geom_boxplot()+labs(title=\"Without correction for sum biomass\")\np2=result_all %&gt;% ggplot(aes(x=genotype,y=sum_biomass_corr, fill=genotype))+geom_boxplot()+labs(title=\"With correction for sum biomass\")\nggsave(here::here(\"report/intro/plot/comparison.svg\"),p1+p2)\n\n\n\n\n\n\n\n\n\nMaslard, Corentin, Mustapha Arkoun, Christophe Salon, and Marion Prudent. 2021. “Root Architecture Characterization in Relation to Biomass Allocation and Biological Nitrogen Fixation in a Collection of European Soybean Genotypes.” OCL 28: 48. https://doi.org/10.1051/ocl/2021033.\n\n\nVoisin, A. S., Salon, Christophe, Jeudy, Christian, and F. R. Warembourg. 2003. “Symbiotic N2 Fixation Activity in Relation to c Economy of Pisum Sativum l. As a Function of Plant Phenology.” Journal of Experimental Botany 54 (393): 2733–44. https://doi.org/10.1093/jxb/erg290.",
    "crumbs": [
      "**Introduction to the thesis**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Experimental design and climate condition</span>"
    ]
  },
  {
    "objectID": "report/water/2_water_during_the_experiment.html",
    "href": "report/water/2_water_during_the_experiment.html",
    "title": "3  Use of water during the experiment",
    "section": "",
    "text": "3.1 Data importation\nCode\nplant_info=read_excel(here::here(\"data/plant_information.xlsx\"))\nplant_info_impaire= plant_info %&gt;% filter(paire==\"FALSE\")\nCode\n#Weighing\nfiles_name=list.files(path =here::here(\"data/water/weighing\"), pattern = (\".csv$\"))\n\nfirst_data=read.csv(here::here(paste0(\"data/water/weighing/\",files_name[1])), sep=\";\") ; colnames(first_data)=colnames(first_data[2:length(first_data)])\nfirst_data=first_data[1:length(first_data)-1]\n\ndata_global_weighing=matrix(data=NA, ncol=length(first_data),nrow = 0)\ncolnames(data_global_weighing)=colnames(first_data)\nfor(file in 1:length(files_name)){\n  first_data=read.csv(here::here(paste0(\"data/water/weighing/\",files_name[file])), sep=\";\")\n  colnames(first_data)=colnames(first_data[2:length(first_data)])\n  first_data=first_data[1:length(first_data)-1]\n  data_global_weighing=rbind(data_global_weighing,first_data)\n}\ndata_global_weighing$deliveredquantity=NA\n\n#Watering\nfiles_name=list.files(path =here::here(\"data/water/watering\"), pattern = (\".csv$\"))\nfirst_data=read.csv(here::here(paste0(\"data/water/watering/\"),files_name[1]), sep=\";\")\ncolnames(first_data)=colnames(first_data[2:length(first_data)])\nfirst_data=first_data[1:length(first_data)-1]\ndata_global_watering=matrix(data=NA, ncol=length(first_data),nrow = 0)\ncolnames(data_global_watering)=colnames(first_data)\nfor(file in 1:length(files_name)){\n  first_data=read.csv(here::here(paste0(\"data/water/watering/\"),files_name[file]), sep=\";\")\n  colnames(first_data)=colnames(first_data[2:length(first_data)])\n  first_data=first_data[1:length(first_data)-1]\n  data_global_watering=rbind(data_global_watering,first_data)\n  class(data_global_weighing$resultdate)\n}\n\ndata_global_watering$type=\"watering\"\ndata_global_weighing$type=\"weighing\"\ndata_global_weighing$taskid=as.character(data_global_weighing$taskid)\ndata_global_watering$taskid=as.character(data_global_watering$taskid)\ndata_global_watering$valid=as.logical(data_global_watering$valid)\ndata_global_watering$weightbefore=as.integer(data_global_watering$weightbefore)\ndata_global_watering$weightafter=as.integer(data_global_watering$weightafter)\nglobal_weight=bind_rows(data_global_weighing,data_global_watering)\n\n#add weights after watering if deliveredquantity = 0\nweighing_after=global_weight%&gt;%filter(type==\"watering\")%&gt;%filter(deliveredquantity==0)\nweighing_after$type=\"watering2\"\nweighing_after$weightbefore=weighing_after$weightafter\nweighing_after$taskid=paste0(weighing_after$taskid,\"bis\")\n\nglobal_weight$taskid=as.character(global_weight$taskid)\nglobal_weight=bind_rows(global_weight,weighing_after)\n\n#date and date_time format\nglobal_weight$resultdate_time=as.POSIXct(global_weight$resultdate, format=\"%d/%m/%Y %H:%M:%S\")\nglobal_weight$resultdate=as.Date(global_weight$resultdate, format=\"%d/%m/%Y %H:%M:%S\")\nwrite.csv(global_weight,here::here(\"data/water/weighing_watering_output/all_weighing_watering.csv\"))\n\nglobal_weight=read.csv(here::here(\"data/water/weighing_watering_output/all_weighing_watering.csv\")) %&gt;% \n  dplyr::rename(plant_id=plantid) %&gt;% \n  merge(.,read_excel(here::here(\"data/water/diff_substrat_add_water.xlsx\"), sheet= \"news\",skip = 1) %&gt;% \n  drop_na(plant_id) %&gt;% \n    dplyr::select(plant_id,weightbefore_P0,dry_soil) %&gt;% \n                        dplyr::rename(P0=weightbefore_P0),\n                    by=\"plant_id\",all.y = TRUE) %&gt;% \n  mutate(miniserre=NA) %&gt;% \n  mutate(tuteur=NA)\n\ndata_tools=read_excel(here::here(\"data/water/tools_on_RT.xlsx\")) %&gt;% \n  mutate(resultdate_with_miniserre_begin=as.POSIXct(as.character(resultdate_with_miniserre_begin),tz=\"Europe/Paris\")) %&gt;% \n  mutate(resultdate_with_miniserre_end=as.POSIXct(as.character(resultdate_with_miniserre_end),tz=\"Europe/Paris\")) %&gt;% \n  mutate(tuteur=as.POSIXct(as.character(tuteur),tz=\"Europe/Paris\"))\n\nfor (i in 1:length(data_tools$plant_id)){\n  for (j in 1:length(global_weight$studyname)){\n    \n    if(data_tools$plant_id[i]==global_weight$plant_id[j]){\n      \n      if(global_weight$resultdate_time[j]&gt;=data_tools$resultdate_with_miniserre_begin[i]){\n        \n        if(global_weight$resultdate_time[j]&lt;data_tools$resultdate_with_miniserre_end[i]){\n          global_weight$miniserre[j]=data_tools$poids_miniserre[i]  \n          global_weight$tuteur[j]=0\n         \n        }else if (global_weight$resultdate_time[j]&gt;data_tools$tuteur[i]){\n          global_weight$tuteur[j]=data_tools$tuteur_weight[i]  \n          global_weight$miniserre[j]=0\n          \n        }else{\n          global_weight$miniserre[j]=0\n          global_weight$tuteur[j]=0\n        }\n        \n      }else{\n        global_weight$miniserre[j]=0\n        global_weight$tuteur[j]=0\n      }\n      \n    }      \n    \n  }\n}\n\nglobal_weight=global_weight %&gt;%\n  mutate(fresh_soil=weightbefore-P0-miniserre-tuteur) %&gt;% \n  mutate(water_in_rt=fresh_soil-dry_soil) %&gt;% \n  mutate(humidity=(fresh_soil-dry_soil)/dry_soil) # Calcul humidity loose\n\nglobal_weight_select=global_weight%&gt;%\n  filter(fresh_soil&gt;4000)%&gt;%\n  filter(fresh_soil&lt;7500) %&gt;% #for dont have outlier\n  filter(humidity&gt;0.04) %&gt;%  #for donc take begin value\n  merge(.,plant_info_impaire,\n    by=\"plant_id\",\n    all.y = TRUE) \n\nwrite.csv(global_weight_select,here::here(\"data/water/weighing_watering_output/weighing_watering.csv\"))\nSelection of rhizotubes that have two plants. Because if a plant does not germinate or has an abnormal phenotype it could induce errors for the evapotranspiration calculations\nCode\nglobal_weight_select2=global_weight_select %&gt;%\n  filter(!plant_id %in% as.vector(plant_info_impaire %&gt;% \n                                    filter(induct_error_evapotranspi==\"x\") %&gt;%\n                                    dplyr::pull(\"plant_id\"))\n         )\nNote, that this must be based on fresh soil and dry soil.\nCode\nglobal_weight_select2 %&gt;%\n  mutate(time=format(as.POSIXct(global_weight_select2$resultdate_time), format = \"%H:%M:%S\")) %&gt;% \nggplot(aes(as.POSIXct(time, format=\"%H:%M:%S\"), fill=resultdate)) + \n  geom_density(alpha = 0.5) + #also play with adjust such as adjust = 0.5\n  scale_x_datetime(breaks = date_breaks(\"2 hours\"), labels=date_format(\"%H:%M\")) + labs(x=\"Houre in the day\")",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Use of water during the experiment</span>"
    ]
  },
  {
    "objectID": "report/water/2_water_during_the_experiment.html#data-importation",
    "href": "report/water/2_water_during_the_experiment.html#data-importation",
    "title": "3  Use of water during the experiment",
    "section": "",
    "text": "Import information about the rhizotube (type of stress, harvest date, …). But only the odd plant.\n\n\n\nImport and compile raw watering and raw weighing data from the experiment\nWarning, I have added the manual values realized on October 8, 2021.\nCorrection of the weights, According to the weight of the soil, the weight of the empty rhizotubes, the weight of the stakes and the mini-greenhouse\nImport of substrate moisture data prior to the experiment and stake weights\nSubtract or add the weight of each the Rhizotube, mini greenhouses or stake\nAdding the weight of the mini greenhouses taking into account the date of presence of the mini greenhouses (given in the excel) First step, remove the inistial points from the rhizotube and add the fresh soil and dry soil data\nRemoved or added the weight corresponding to the minigreenhouse or the stake\nSelect the desired time interval (start and end of experiment) and delete the outliers\nAdd the information for each rhizotube (WS WW, HS, OT, genotype, date of harvest…)\nSave the intermediate results\n\n\n\nCalculate the water loss",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Use of water during the experiment</span>"
    ]
  },
  {
    "objectID": "report/water/2_water_during_the_experiment.html#water-in-the-rhizotube",
    "href": "report/water/2_water_during_the_experiment.html#water-in-the-rhizotube",
    "title": "3  Use of water during the experiment",
    "section": "3.2 Water in the rhizotube",
    "text": "3.2 Water in the rhizotube\n\nTake the desired time interval and the least defective watering stations\n\n\n\nCode\nglobal_weight_select3&lt;-global_weight_select2%&gt;%\n  filter(as.Date(resultdate)&gt;as.Date(\"2021-09-22\")) %&gt;%\n  filter(weightafter&gt;15000) %&gt;%\n  filter(usedstationid %in% c(\"26\",\"36\")) %&gt;% \n  filter(type %in% c(\"weighing\", \"watering\")) %&gt;% \n  mutate(day=as.POSIXct(resultdate_time)-as.POSIXct(\"2021-09-23 00:00:00\"))\n\nwrite.csv(global_weight_select3, \"data/water/weighing_watering_output/global_weight_select3.csv\")\n\np1&lt;-ggplot(global_weight_select3, aes(x=day, y=water_in_rt, colour=paste0(condition,\"_\",usedstationid), group=c(paste0(condition,\"_\",usedstationid)))) +\n  geom_point(size=0.7,alpha=.4)+\n  geom_smooth()+labs(x=\"Date of watering or weighing\",y=\"Water in Rhizotube (ml)\",color=\"condition \\n+usedstationid\")+\n  guides(colour = guide_legend(nrow = 3, byrow = T))+\n  scale_x_continuous(breaks = round(seq(min(as.integer(global_weight_select3$day)), as.integer(max(global_weight_select3$day)), by = 2),1))+\n  theme_minimal()+\n  theme(legend.position=\"bottom\")\n\nerror_balance_begin_XP= 0.01\np_soil_water_content&lt;-ggplot(\n  global_weight_select3 %&gt;% filter(recolte==2) %&gt;% filter(day&gt;2) %&gt;% mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% mutate(humidity=ifelse(climat_condition==\"WS_HS\",humidity+error_balance_begin_XP,humidity)) %&gt;% mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\")))  %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\")))\n  , aes(x=day-1, y=humidity, col=climat_condition,fill=climat_condition,linetype=genotype)) +\n   geom_rect(xmin = 5, xmax = 20, ymin = -Inf, ymax = 0.11, fill = \"#c9d5ea\", alpha = 0.5,col=\"gray\") +\n   geom_rect(xmin = 5, xmax = 10, ymin = -Inf, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n   geom_rect(xmin = 15, xmax = 20, ymin = -Inf, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  geom_point(size=0.7,alpha=.4)+\n  geom_smooth()+\n  labs(x=\"Number of days after transplantation\",y=\"Soil water content (%)\",color=\"Treatment\",fill=\"Treatment\",linetype=\"Genotype\")+\n  guides(colour = guide_legend(nrow = 3, byrow = T))+\n  # scale_x_continuous(breaks = round(seq(min(as.integer(global_weight_select3$day)), as.integer(max(global_weight_select3$day)), by = 5),1))+\n  #scale_x_datetime(date_breaks= \"2 days\", date_minor_breaks = \"12 hour\")+\n    #scale_y_continuous(breaks=1)\n  scale_color_manual(values=climate_pallet)+\n    scale_fill_manual(values=climate_pallet)+\n  theme(legend.position=\"right\")+\n   my_theme\n\n# ggsave(here::here(\"report/water/plot/Water_in_RT.svg\"), \n#        p1, width = 20,height = 16, units = \"cm\")\n\nggsave(here::here(\"report/water/plot/Water_in_RT.png\"), \n       p1, width = 20, height = 16, units = \"cm\", dpi = 600)\n\n\n# ggsave(here::here(\"report/water/plot/soil_water_content.svg\"), \n#        p_soil_water_content, width = 20,height = 16, units = \"cm\")\n\nggsave(here::here(\"report/water/plot/soil_water_content.png\"), \n       p_soil_water_content, width = 20, height = 16, units = \"cm\", dpi = 600)\n\n\n\n\n\n\n\n\n\nFigure 3.1\n\n\n\n\nFind the date of the next measurement for the same rizotube. Attention the last measurement is deleted.",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Use of water during the experiment</span>"
    ]
  },
  {
    "objectID": "report/water/2_water_during_the_experiment.html#evapotranspiration",
    "href": "report/water/2_water_during_the_experiment.html#evapotranspiration",
    "title": "3  Use of water during the experiment",
    "section": "3.3 Evapotranspiration",
    "text": "3.3 Evapotranspiration\n\n3.3.1 Kinetics\n\n\n\n\n\n\nCaution\n\n\n\nBe careful, this step takes a lot of time This step also adds a night day column and a night morning and afternoon column. This part also measures the time between two weighings\n\n\n\n\nCode\n# /!\\ take time 5 min at least\ncat_col(\"Caution: you have to wait a long time here\", \"red\")\nglobal_weight_select3=read.csv(\"data/water/weighing_watering_output/global_weight_select3.csv\")[-1]\nglobal_weight_select3$next_weight=NA\nlevels_factor_plant_id=levels(as.factor(global_weight_select3$plant_id))\npb = txtProgressBar(min = 0, max = length(levels_factor_plant_id), initial = 0,style=3)#progresse bar \nfor (i in levels_factor_plant_id){\n    setTxtProgressBar(pb,match(i,levels_factor_plant_id)) #progresse bar\n    \n    data_watering_select_x=global_weight_select3 %&gt;% \n      filter(plant_id==i) %&gt;% \n      arrange(resultdate_time)\n    \n    levels_factor_resultdate_time=data_watering_select_x$resultdate_time\n    for (j in 1:length(levels_factor_resultdate_time)){\n      \n      for (k in 1:length(global_weight_select3$studyname)){\n        \n        if(as.character(global_weight_select3$plant_id[k])==i){\n         # print(data_watering_select$plantid[k])  \n          if(global_weight_select3$resultdate_time[k]==levels_factor_resultdate_time[j]){\n            global_weight_select3$next_weight[k]=as.character(levels_factor_resultdate_time[j+1])\n            #print(paste(i,levels_factor_resultdate_time[j],levels_factor_resultdate_time[j+1], sep=\"_\"))\n            \n          }\n        }\n      }\n    }\n}\n\ndf_evapotranspi=global_weight_select3 %&gt;% \n  drop_na(next_weight)\ndf_evapotranspi$water_after=NA\npb = txtProgressBar(min = 0, max = length(df_evapotranspi$studyname), initial = 0,style=3)#progresse bar \nfor (i in 1:length(df_evapotranspi$studyname)){\n  for (j in 1:length(global_weight_select3$studyname)){\n    if(df_evapotranspi$plant_id[i]==global_weight_select3$plant_id[j]){\n    if (df_evapotranspi$next_weight[i]==global_weight_select3$resultdate_time[j]){\n      df_evapotranspi$water_after[i]=global_weight_select3$water_in_rt[j]\n    }\n      }\n  }\n      \n      setTxtProgressBar(pb,i) #progresse bar\n}\n\ndf_evapotranspi$evapotranspiration=df_evapotranspi$water_in_rt-df_evapotranspi$water_after+df_evapotranspi$deliveredquantity\n#diff time enter the two weight\ndf_evapotranspi$diff_resultdate_time=as.POSIXct(df_evapotranspi$next_weight)-as.POSIXct(df_evapotranspi$resultdate_time)\n\n#transforme date time of next_weight in juste time for separate by morning afternoone night\n\ndf_evapotranspi$next_weight_time=format(strftime(df_evapotranspi$next_weight, format = \"%H:%M:%S\"))\ndf_evapotranspi$night_day=NA\n\npb = txtProgressBar(min = 0, max = length(df_evapotranspi$studyname), initial = 0,style=3)#progresse bar \nfor (i in seq_along(df_evapotranspi$studyname)){\n  \n  if (format(strftime(df_evapotranspi$next_weight[i], format = \"%H:%M:%S\"))&lt;format(strftime(\"2021-10-01 09:18:00\", format = \"%H:%M:%S\"))){\n    if (format(strftime(df_evapotranspi$resultdate_time[i], format = \"%H:%M:%S\"))&gt;format(strftime(\"2021-10-01 17:00:00\", format = \"%H:%M:%S\"))){\n            # print(paste(data_watering_select_transpiration_select$time[i],data_watering_select_transpiration_select$next_weight_time[i],sep=\"_\"))\n      df_evapotranspi$night_day[i]=\"night\"\n    }else{\n      df_evapotranspi$night_day[i]=\"day\"\n      }\n  }else{\n    df_evapotranspi$night_day[i]=\"day\"\n  }\n setTxtProgressBar(pb,i) #progresse bar \n}\n\ndf_evapotranspi$morning_afternoon=\"night\"\npb = txtProgressBar(min = 0, max = length(df_evapotranspi$studyname), initial = 0,style=3) #progresse bar \nfor (i in seq_along(df_evapotranspi$studyname)){\n  if(df_evapotranspi$night_day[i]==\"day\"){\n    if(format(strftime(df_evapotranspi$resultdate_time[i], format = \"%H:%M:%S\"))&lt;format(strftime(\"2021-10-01 11:00:00\", format = \"%H:%M:%S\"))){\n      df_evapotranspi$morning_afternoon[i]=\"morning\"\n    }else(df_evapotranspi$morning_afternoon[i]=\"afternoon\")\n  }\n  setTxtProgressBar(pb,i) #progresse bar \n}\n\nwrite.csv(df_evapotranspi,here::here(\"data/water/weighing_watering_output/df_evapotranspi.csv\"))\n\n\n\nPlot exemple for RT1067\n\n\n\nCode\ndf_evapotranspi=read.csv(here::here(\"data/water/weighing_watering_output/df_evapotranspi.csv\"))[-1]\ndf_evapotranspi$resultdate_time=as.POSIXct(df_evapotranspi$resultdate_time)\nplot_x=df_evapotranspi %&gt;% \n  filter(plant_id==\"1069\")%&gt;% \n  ggplot(aes(x=resultdate_time, y=evapotranspiration/2, colour=paste0(condition,\"_\",usedstationid), group=c(paste0(condition,\"_\",usedstationid)))) +\n  geom_smooth(se=F)+\n  geom_point()+\n       scale_x_datetime(breaks=(\"1 day\"), minor_breaks=(\"1 hour\"),labels = date_format(\"%b-%d %H:%M:%S\"))+\n  labs(x=\"Date and time\", y=\"Evapotranspiration for one plante of one \\n rhizotube (ml) between two watering or weighing\",color=\"condition \\n+usedstationid\")+\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  theme(legend.position=\"bottom\")\n\nggsave(here::here(\"report/water/plot/evapotranspiration_1069.svg\"), \n       plot_x, width = 20,height = 16, units = \"cm\")\n\n\n\n(plot/water/evapotranspiration_1069.svg)\n\n\nCode\nsum_by_date=aggregate(df_evapotranspi$evapotranspiration, by=list(df_evapotranspi$plant_id, df_evapotranspi$condition,df_evapotranspi$resultdate,df_evapotranspi$genotype,df_evapotranspi$heat_condition), FUN=sum)\n\n\n\n\nCode\nplot_x=sum_by_date %&gt;%   mutate(Group.1=factor(Group.1,levels=c(\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\")))  %&gt;% ggplot(aes(x=as.factor(Group.3),y=x/2,fill=Group.2))+\n  geom_boxplot(outlier.alpha = 0)+\n  #facet_grid(Group.5~.)+\n  #geom_point(position=position_jitterdodge(),alpha=0.3)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+\n  scale_fill_manual(values=manu_palett)+\n  labs(x=\"Date\", y=\"Evapotranspiration for one plante of one rhizotube (ml) during on day\")+\n  theme(legend.position=\"bottom\")\n\nggsave(here::here(\"report/water/plot/evapotranspiration_each_plant.svg\"), \n       plot_x, width = 20,height = 16, units = \"cm\")\n\n\n\n\nError detection\n\n\n\nCode\nplot_x&lt;- df_evapotranspi %&gt;%   mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\")))  %&gt;%  \n  ggplot(aes(x=as.POSIXct(format(as.POSIXct(resultdate_time),format = \"%H:%M:%S\"),format = \"%H:%M:%S\"),y=evapotranspiration/2,col=condition))+\n    geom_point()+\n    facet_wrap(~resultdate)+\n    scale_color_manual(values=manu_palett)+\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+\n    labs(y=\"Evapotranspiration between two weighings (ml) for one plant\", x=\"Date time\")+\n    theme(legend.position=\"bottom\")\n\nggsave(here::here(\"report/water/plot/find_error_evapo.svg\"), \n       plot_x, width = 20,height = 18, units = \"cm\")\n\n\n\nSometimes have less than three waterings per day and at different times or more than 3. This can lead to calculation errors later on the script.\n\n\nCode\nplot_x&lt;- df_evapotranspi %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\")))  %&gt;% \n  ggplot(aes(x=as.POSIXct(format(as.POSIXct(resultdate_time),format = \"%H:%M:%S\"),format = \"%H:%M:%S\"),y=diff_resultdate_time/60,col=condition))+\n  labs(y=\"Time (hours) between two weighing measurements for each rhizotube\", x=\"Date and time\")+\n  geom_point()+\n  facet_wrap(~resultdate)+\n  scale_color_manual(values=manu_palett)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+\n  theme(legend.position=\"bottom\")\n\nggsave(here::here(\"report/water/plot/find_error_evapo_time_between.svg\"), \n       plot_x, width = 20,height = 18, units = \"cm\")\n\n\n\nWhy do I have the RT 1035 which has such a huge value between two waterings? Because there are missing values for the 1035 between the 27th at 7:45 and the 29th at 12:06. On the 27th the measurements of 14:27, 18:05 and 20:30 are missing. On the 28th the data of 6:06, 12:05 and 18:05 and on the 29th the data of 6:06.\nDivision of the evapotranspiration by the time between two weighing measurements. That is, divide by the weight after watering minus the weight before watering.\n\n\nCode\n#if i divide one by one\ndf_evapotranspi$div=df_evapotranspi$evapotranspiration/(as.numeric(df_evapotranspi$diff_resultdate_time)/60)\n\nplot_x&lt;- df_evapotranspi %&gt;% mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\")))  %&gt;% \n  filter(div&gt;-1) %&gt;% \n  ggplot(aes(x=as.POSIXct(format(as.POSIXct(resultdate_time),format = \"%H:%M:%S\"),format = \"%H:%M:%S\"),y=div/2,col=condition))+\n  geom_point(size=1.2, alpha=.5)+\n  labs(y=expression(paste(\"Evapotranspiration of a plant per rhizotube (ml.\",hour^{-1},\")\")), x=\"Date and time\")+\n  facet_wrap(~resultdate)+\n  scale_color_manual(values=manu_palett)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+\n  theme(legend.position=\"bottom\")\n\nggsave(here::here(\"report/water/plot/evapo_by_plant_per_RT.svg\"), \n       plot_x, width = 22,height = 18, units = \"cm\")\n\n\n\nThen I remove some aberrant data or that could bother me for the calculations. I remove the values of 2021-09-24 because the last weighing was done at 15h. I also remove the time between two weighing more than 16h30 and finally I remove the results of rhizotube 3 (aberrant results).\nIf I separate the evaporation between day and night. If I separate the evapotranspiration between day and night. One can see logically that evapotranspiration is much lower at night than during the day. During the day and in the course of the experiment, there is an increasing increase in evapotranspiration for plants in well-watered conditions. During the day, and during the first heat wave (from day X to day X), evapotranspiration increases for both genotypes, and then returns to a state close to the one observed in plants in optimal temperature conditions. During the second heat wave (from day X to day X), during the day and in well-watered conditions, there could be have a difference between the two genotypes. Wendy could be have a higher evapotranspiration in this condition. Can this be explained by their different aerial and root architecture (for the same biomass)? Towards the end we can see the re-watering of the plants in stressed condition.\n\n\n\n\n\n\nFigure 3.2\n\n\n\nIf we look at the differences between conditions for each period of the day (morning, afternoon, evening) but not in ml.hours but in cumulative. There does not seem to be any major difference in evapotranspiration between these three periods.\n\n\n\n3.3.2 Total evapotranspiration\n\n\nCode\ndf_evapotranspi3=merge(\n  df_evapotranspi2,\n  read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% dplyr::select(plant_id,weight_root, leaf_area,sum_biomass),\n  by=\"plant_id\",\n  all = T)\n\nwrite.csv(df_evapotranspi3, here::here(\"data/water/weighing_watering_output/df_evapo3.csv\"))\n#mean of harvest 1\n#sum evapotransipration by plant_id\nsum_evapo_end=df_evapotranspi3 %&gt;%\n  group_by(plant_id, condition, recolte) %&gt;%\n  dplyr::summarise(.groups = 'drop',sum_total_evapotranspiration=sum(evapotranspiration)) %&gt;%\n  drop_na(sum_total_evapotranspiration)\n\n## write result evapotranspi3\nwrite.csv(sum_evapo_end,here::here(\"data/water/weighing_watering_output/sum_evapotranspi.csv\"))\n\nsum_evapo_end_1=sum_evapo_end %&gt;% filter(recolte==1)\nsum_evapo_end_2=sum_evapo_end %&gt;% filter(recolte==2) %&gt;% mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")))\n# \n# plot_x=stat_analyse(\n#     data=sum_evapo_end_1 %&gt;% \n#       data.frame() %&gt;%  \n#       mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))),\n#     column_value = \"sum_total_evapotranspiration\",\n#     category_variables = \"condition\",\n#     grp_var = \"\",\n#     show_plot = T,\n#     outlier_show = F, \n#     label_outlier = \"plant_id\",\n#     biologist_stats = T,\n#     Ylab_i = \"Total evaporation of plants from harvest 1 before harvest (ml)\"\n#   )\n# \n# plot_x[[\"plot\"]]+\n#   labs(color=NULL,fill=NULL,subtitle = df_alpha_info$for_title[i])+\n#   theme (axis.ticks.x = element_blank(),# Masquer les ticks de l'axe x\n#          axis.text.x=element_blank (),\n#          axis.title.x = element_blank(),\n#          legend.position = \"none\",\n#          plot.subtitle = element_text(face = \"bold\"),\n#          plot.caption = element_blank()\n#          ) \n\n\n\np1=Plettre_modif(\n  Z=sum_evapo_end_1,\n  X=sum_evapo_end_1$condition,\n  Y=sum_evapo_end_1$sum_total_evapotranspiration/2,\n  Xlab = \"Condition\",\n  Ylab = \"Total evaporation of plants from harvest 1 before harvest (ml)\", \n  Y_bis = \"sum_total_evapotranspiration\",\n  Tukey=T,\n  outlier_show = F,\n  label_outlier = \"plant_id\")\np1=p1[[1]]\n\np2=Plettre_modif(\n  Z=sum_evapo_end_2,\n  X=sum_evapo_end_2$condition,\n  Y=sum_evapo_end_2$sum_total_evapotranspiration/2,\n  Xlab = \"Condition\",\n  Ylab = \"Total evaporation of plants before harvest 2 (ml)\",\n  Y_bis = \"sum_total_evapotranspiration\",\n  Tukey=T,\n  outlier_show = F,\n  label_outlier = \"plant_id\")\n\np2=p2[[1]]\n\n#plot_grid(p1, p2, ncol = 2, nrow = 1)\n\nggsave(here::here(\"report/water/plot/total_evapotranspi.svg\"), \n       plot_grid(p1, p2, ncol = 2, nrow = 1), width = 22,height = 18, units = \"cm\")",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Use of water during the experiment</span>"
    ]
  },
  {
    "objectID": "report/water/2_water_during_the_experiment.html#wue-and-srwu",
    "href": "report/water/2_water_during_the_experiment.html#wue-and-srwu",
    "title": "3  Use of water during the experiment",
    "section": "3.4 WUE and sRWU",
    "text": "3.4 WUE and sRWU\nSince we have chosen to make correlations between variables measured by plant and the efficiencies of water, element, radiation … we have chosen to make averages on the first harvest and to make calculations with these averages (H1) vs harvest 2 (HS).\n\n\nCode\ndf_use_for_WUE=merge(\n  read.csv(here::here(\"data/water/weighing_watering_output/df_evapo3.csv\")) %&gt;% drop_na(evapotranspiration)%&gt;% drop_na(sum_biomass),\n  as.data.frame(read.csv(here::here(\"data/water/weighing_watering_output/df_evapo3.csv\")) %&gt;%\n  group_by(plant_id, condition, recolte) %&gt;%\n  dplyr::summarise(.groups = 'drop',sum_total_evapotranspiration=sum(evapotranspiration)) %&gt;%\n  drop_na(sum_total_evapotranspiration)) %&gt;% dplyr::select(plant_id,sum_total_evapotranspiration ) %&gt;% drop_na(sum_total_evapotranspiration),\n  all=T, by=\"plant_id\") %&gt;% \n  group_by(recolte,condition)%&gt;% \n  dplyr::summarise(mean_sum_biomass =mean(sum_biomass),\n                   mean_sum_total_evapotranspiration=mean(sum_total_evapotranspiration),.groups = 'drop') %&gt;% #.groups = 'drop' for delet warning message\n  drop_na(mean_sum_biomass) %&gt;% \n  as.data.frame() %&gt;% \n  mutate(mean_sum_biomass=mean_sum_biomass*1000) %&gt;% \n  mutate(mean_sum_total_evapotranspiration=mean_sum_total_evapotranspiration/2)\n\nkbl(df_use_for_WUE, caption = \"Resume of the data use for Water Use Efficiency (WUE) for eatch condition\",col.names=c(\"Harvest\",\"Condition\", \"Average total weight (mg)\", \"Average total evapotranspiration (ml)\"),digits = 1) %&gt;% \n  kable_paper(full_width = F) %&gt;%\n   #column_spec(3, color = \"white\",background = spec_color(WUE$mean_sum_biomass, end = 0.7))%&gt;%\n   column_spec(4, color = \"white\",background = spec_color(df_use_for_WUE$mean_sum_biomass, end = 0.7))\n\n\n\nResume of the data use for Water Use Efficiency (WUE) for eatch condition\n\n\nHarvest\nCondition\nAverage total weight (mg)\nAverage total evapotranspiration (ml)\n\n\n\n\n1\nSto_WW_OT\n89.3\n70.2\n\n\n1\nWen_WW_OT\n88.0\n70.3\n\n\n2\nSto_WS_HS\n287.8\n498.7\n\n\n2\nSto_WS_OT\n471.0\n446.1\n\n\n2\nSto_WW_HS\n1050.2\n1750.4\n\n\n2\nSto_WW_OT\n1195.4\n1569.4\n\n\n2\nWen_WS_HS\n360.1\n484.3\n\n\n2\nWen_WS_OT\n527.9\n449.2\n\n\n2\nWen_WW_HS\n1281.2\n1863.1\n\n\n2\nWen_WW_OT\n1260.7\n1608.1\n\n\n\n\n\n\n\n\n3.4.1 WUE with mean in H1 and H2\nWater Use Efficiency, Thesis Couchoud (p69): Stomata closure may not be complete, transpiration is then more reduced than the net assimilation of atmospheric CO2 by photosynthesis. An increase in water use efficiency (WUE) is then observed (Maury et al., 2011). This change in WUE in response to water stress has been reported in multiple studies and high WUE is commonly associated with better tolerance to water stress (Chaves et al., 2003, 2009; Siopongco et al., 2006; Xu et al., 2010; Anjum et al., 2011; Erice et al., 2011).\nWater Use Efficiency (WUE) between date t1 and t2 was calculated as the ratio of the plant biomass (BM) accumulated over the amount of water evapotranspirated by the plant during this period (QH2O) and is expressed in g. gH2O-1:\n\n\nCode\n# Process to calcul\nWUE2mean=df_use_for_WUE\nWUE2mean$result_WUE=NA\nfor (i in 1:nrow(WUE2mean)){\n  for (j in 1:nrow(WUE2mean)){\n    if (WUE2mean$recolte[i]==1){\n      WUE2mean$result_WUE[i]=NA\n    }else if (WUE2mean$recolte[i]==2 && WUE2mean$recolte[j]==1){\n      if(str_sub(WUE2mean$condition[i], 1, 3)==str_sub(WUE2mean$condition[j], 1, 3)){\n        WUE2mean$result_WUE[i]=(WUE2mean$mean_sum_biomass[i]/1000-WUE2mean$mean_sum_biomass[j]/1000)/(((WUE2mean$mean_sum_total_evapotranspiration[i]/1000))-((WUE2mean$mean_sum_total_evapotranspiration[j]/1000)))\n      }\n    }\n  }\n}\nwrite.csv(WUE2mean,here::here(\"data/water/weighing_watering_output/WUE_with_mean_h1_and_mean_h2.csv\"))\n\n\n\n\nCode\n# show table\nread.csv(here::here(\"data/water/weighing_watering_output/WUE_with_mean_h1_and_mean_h2.csv\")) %&gt;%\ndplyr::select(recolte,condition,mean_sum_biomass, mean_sum_total_evapotranspiration, result_WUE) %&gt;%\nmutate(mean_sum_biomass=mean_sum_biomass/1000,mean_sum_total_evapotranspiration=(mean_sum_total_evapotranspiration/1000),result_WUE=result_WUE) %&gt;%\nkbl(caption = \"WUE for eatch condition. Only mean using\",col.names=c(\"Harvest\",\"Condition\", \"Dry weight total (g)\", \"Sum of the evapotranspiration (L)\", \"WUE (g. L H20-1)\"), digits = 2) %&gt;% \nkable_paper(full_width = F) %&gt;%\ncolumn_spec(5, color = \"white\",background = spec_color(read.csv(here::here(\"data/water/weighing_watering_output/WUE_with_mean_h1_and_mean_h2.csv\")) %&gt;%                                                         pull(result_WUE), end = 0.7))\n\n\n\nWUE for eatch condition. Only mean using\n\n\nHarvest\nCondition\nDry weight total (g)\nSum of the evapotranspiration (L)\nWUE (g. L H20-1)\n\n\n\n\n1\nSto_WW_OT\n0.09\n0.07\nNA\n\n\n1\nWen_WW_OT\n0.09\n0.07\nNA\n\n\n2\nSto_WS_HS\n0.29\n0.50\n0.46\n\n\n2\nSto_WS_OT\n0.47\n0.45\n1.02\n\n\n2\nSto_WW_HS\n1.05\n1.75\n0.57\n\n\n2\nSto_WW_OT\n1.20\n1.57\n0.74\n\n\n2\nWen_WS_HS\n0.36\n0.48\n0.66\n\n\n2\nWen_WS_OT\n0.53\n0.45\n1.16\n\n\n2\nWen_WW_HS\n1.28\n1.86\n0.67\n\n\n2\nWen_WW_OT\n1.26\n1.61\n0.76\n\n\n\n\n\n\n\n\n\n3.4.2 WUE and sRWU (H1 mean )\n\n\nCode\n# Data importation and preparation for H1 and H2\ndf_H1_mean&lt;-merge(sum_evapo_end %&gt;% filter(recolte==1),read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n              dplyr::select(plant_id, weight_root,sum_biomass, plant_num,genotype,date_recolte,recolte) %&gt;% filter(recolte==1) %&gt;% dplyr::select(-recolte),by=\"plant_id\", all=T) %&gt;%\n              drop_na(weight_root,sum_total_evapotranspiration) %&gt;% \n  mutate(sum_total_evapotranspiration=sum_total_evapotranspiration/1000/2) %&gt;% \n  dplyr::group_by(condition, genotype,recolte,date_recolte) %&gt;%\n  dplyr::summarise(across(sum_total_evapotranspiration:sum_biomass, ~ mean(.x, na.rm = TRUE))) %&gt;% \n  dplyr::rename_all(~ paste0(., \"_H1\")) %&gt;% \n  dplyr::rename(genotype=genotype_H1)\n\n\ndf_H2&lt;-merge(sum_evapo_end %&gt;% filter(recolte==2),read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n              dplyr::select(plant_id, weight_root,sum_biomass, plant_num,genotype,date_recolte,recolte) %&gt;% filter(recolte==2) %&gt;% dplyr::select(-recolte),by=\"plant_id\", all=T) %&gt;%\n              drop_na(weight_root,sum_total_evapotranspiration) %&gt;% \n  mutate(sum_total_evapotranspiration=sum_total_evapotranspiration/1000/2) %&gt;% \n  dplyr::rename_all(~ paste0(., \"_H2\")) %&gt;% \n  dplyr::rename(genotype=genotype_H2)\n\n# Process WUE and sRWU\nWUE_sRWU_1mean=full_join(df_H2, df_H1_mean, by=\"genotype\",relationship = \"many-to-many\") %&gt;% \n  mutate(WUE=(sum_biomass_H2 -sum_biomass_H1)/(sum_total_evapotranspiration_H2 -sum_total_evapotranspiration_H1)) %&gt;% \n  mutate(sRWU=(sum_total_evapotranspiration_H2-sum_total_evapotranspiration_H1)/\n      (( (as.numeric(as.Date(date_recolte_H2)-as.Date(date_recolte_H1))) * ((weight_root_H2+weight_root_H1)/2) ))) %&gt;% \n  dplyr::rename(condition=condition_H2) %&gt;% \n  mutate(water_condition=str_sub(condition, 5, 6)) %&gt;% \n  mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\")))\n  \n# export results\nwrite.csv(WUE_sRWU_1mean,here::here(paste(sep=\"_\",\"data/water/weighing_watering_output/WUE_sRWU_1mean.csv\")))\n\n# Show results\npWUE=stat_analyse(data =WUE_sRWU_1mean,\n                column_value = \"WUE\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num_H2\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"Water Use Efficiency (g/L)\")\n             )\n\npWUE&lt;-pWUE[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )+labs(subtitle = \"WUE with one mean\")\n\n# Show results\npsRWU=stat_analyse(data =WUE_sRWU_1mean,\n                column_value = \"sRWU\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num_H2\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"specific Root Water Uptake (gH2O[gBMroot day-1]-1)\")\n             )\npsRWU&lt;-psRWU[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )+labs(subtitle = \"sRWU with one mean\")\n\ncombined_plot&lt;-(pWUE+psRWU) + plot_layout(guides = 'collect')\n# export figure\npng(here::here(paste0(\"report/water/plot/WUE_sRWU_1mean.png\")), width = 18, height = 10, units = 'cm', res = 900)\ncombined_plot\ndev.off()\n\n\n\n\n\nCode\n# show table\nread.csv(here::here(\"data/water/weighing_watering_output/WUE_sRWU_1mean.csv\")) %&gt;%\ndplyr::select(condition, WUE,sRWU) %&gt;%\n  dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(across(WUE:sRWU, mean, na.rm = TRUE)) %&gt;% \nkbl(caption = \"WUE and sRWU for eatch condition. Mean only for H1\", col.names=c(\"Condition\", \"WUE (g. L H20-1)\",\"sRWU(gH2O[gBMroot day-1]-1)\"), digits = 2) %&gt;% \nkable_paper(full_width = F) %&gt;%\ncolumn_spec(2, color = \"white\",background = spec_color(read.csv(here::here(\"data/water/weighing_watering_output/WUE_sRWU_1mean.csv\")) %&gt;%dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(across(WUE:sRWU, mean, na.rm = TRUE)) %&gt;%  pull(WUE), end = 0.7)) %&gt;% \ncolumn_spec(3, color = \"white\",background = spec_color(read.csv(here::here(\"data/water/weighing_watering_output/WUE_sRWU_1mean.csv\")) %&gt;%dplyr::group_by(condition) %&gt;% \ndplyr::summarise(across(WUE:sRWU, mean, na.rm = TRUE)) %&gt;%  pull(sRWU), end = 0.7))\n\n\n\nWUE and sRWU for eatch condition. Mean only for H1\n\n\nCondition\nWUE (g. L H20-1)\nsRWU(gH2O[gBMroot day-1]-1)\n\n\n\n\nSto_WS_HS\n0.47\n0.66\n\n\nSto_WS_OT\n1.03\n0.35\n\n\nSto_WW_HS\n0.57\n1.03\n\n\nSto_WW_OT\n0.74\n0.74\n\n\nWen_WS_HS\n0.67\n0.54\n\n\nWen_WS_OT\n1.18\n0.32\n\n\nWen_WW_HS\n0.65\n0.98\n\n\nWen_WW_OT\n0.77\n0.77\n\n\n\n\n\n\n\n\n\n3.4.3 WUE and sRWU (Drawing with discount )\nNow according to Marion, I have to do random draw for statistical analysis see script used for nodosity in my first paper. I have a repetition of the draw of 100 for eatch condition according to Denis Vile. The problem is that I have lots of data warning of different df. Already only one measurement for root weight. So I have to halve the evapotranspiration because I don’t know which RT plant it is.\n\n\nCode\n# Data generation\ndf_WUE_sRWU_bootstrap=merge(sum_evapo_end,read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n              dplyr::select(plant_id, weight_root,sum_biomass, plant_num,genotype,date_recolte),by=\"plant_id\", all=T ) %&gt;%\n              drop_na(weight_root,sum_total_evapotranspiration) %&gt;% \n  mutate(sum_total_evapotranspiration=sum_total_evapotranspiration/1000/2)\n\n# Process to bootstrap\n\nlist_condition&lt;-levels(as.factor(df_WUE_sRWU_bootstrap$condition))\n\n### parameter  \nrep=100\nset.seed(1)\n\ndf_bootstrap=data.frame()\n#For eatch condition of the harvest 2\nfor (i in 1:rep){\n  for (cond_x in list_condition){\n    df_x=df_WUE_sRWU_bootstrap %&gt;% filter(recolte==\"2\") %&gt;% filter(condition==cond_x)\n    df_x_taking=df_x %&gt;% filter(plant_num==sample(df_x$plant_num,1,replace=T)) \n    \n    if(str_sub(df_x_taking$condition, 1, 3)==\"Sto\"){\n      df_y=df_wue %&gt;% filter(recolte==\"1\") %&gt;% filter(genotype==\"Stocata\")\n      \n    }else {\n      df_y=df_wue %&gt;% filter(recolte==\"1\") %&gt;% filter(genotype==\"Wendy\")\n      \n    }\n    \n    df_y_taking=df_y %&gt;% filter(plant_num==sample(df_y$plant_num,1,replace=T)) \n    colnames(df_x_taking)=c(\"plant_id_rec_2\",\"condition\",\"recolte_2\",\"sum_evapo_transpi_2\",\"weight_root_2\",\"weight_tot_2\",\"plant_num_2\",\"genotype_2\",\"date_recolte_2\")\n    colnames(df_y_taking)=c(\"plant_id_rec_1\",\"condition1\",\"recolte_1\",\"sum_evapo_transpi_1\",\"weight_root_1\",\"weight_tot_1\",\"plant_num_1\",\"genotype_1\",\"date_recolte_1\")\n    df_bind=cbind(df_y_taking,df_x_taking)\n    df_bind$rep=i\n    df_bind$simulation=paste0(i,\"_\",cond_x)\n    df_bind$WUE=(df_bind$weight_tot_2-df_bind$weight_tot_1)/(df_bind$sum_evapo_transpi_2-df_bind$sum_evapo_transpi_1)\n    df_bind$sRWU=(df_bind$sum_evapo_transpi_2-df_bind$sum_evapo_transpi_1)/\n      (( (as.numeric(as.Date(df_bind$date_recolte_2)-as.Date(df_bind$date_recolte_1))) * ((df_bind$weight_root_2+df_bind$weight_root_1)/2) ))\n    #print(str_sub(df_x_taking$condition, 1, 3))\n    df_bootstrap=rbind(df_bootstrap,df_bind)\n  }\n  fit &lt;- aov(WUE ~ condition, df_compile)# analyse de variance\nprint(summary(fit)[[1]][[\"Pr(&gt;F)\"]][1]) ; \n}\n\n# Obviously the more loops i make the stronger i am !!! \n  \ndf_bootstrap=df_bootstrap %&gt;% \n  mutate(water_condition=str_sub(condition, 5, 6)) %&gt;% \n  mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n  dplyr::rename(genotype=genotype_2)\n\n# export results\nwrite.csv(df_bootstrap,here::here(paste(sep=\"_\",\"data/water/weighing_watering_output/WUE_sRWU_Bootstrap.csv\")))\n\n# Show results\n\n\npWUE=stat_analyse(data =df_bootstrap,\n                column_value = \"WUE\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"simulation\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"Water Use Efficiency (g/L)\")\n             )\n\npWUE&lt;-pWUE[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )+labs(subtitle = \"WUE with Bootstrap = 100\")\n\n# Show results for sRWU\npsRWU=stat_analyse(data =df_bootstrap,\n                column_value = \"sRWU\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"simulation\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"specific Root Water Uptake (gH2O[gBMroot day-1]-1)\")\n             )\npsRWU&lt;-psRWU[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )+labs(subtitle = \"sRWU with Bootstrap =100\")\n\ncombined_plot&lt;-(pWUE+psRWU) + plot_layout(guides = 'collect')\n# export figure\npng(here::here(paste0(\"report/water/plot/WUE_sRWU_Bootstrap.png\")), width = 18, height = 10, units = 'cm', res = 900)\ncombined_plot\ndev.off()\n\n\n\n\n\nCode\n# show table\nread.csv(here::here(\"data/water/weighing_watering_output/WUE_sRWU_Bootstrap.csv\")) %&gt;%\ndplyr::select(condition, WUE,sRWU) %&gt;%\n  dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(across(WUE:sRWU, mean, na.rm = TRUE)) %&gt;% \nkbl(caption = \"WUE and sRWU for eatch condition. Bootstrap = 100\", col.names=c(\"Condition\", \"WUE (g. L H20-1)\",\"sRWU(gH2O[gBMroot day-1]-1)\"), digits = 2) %&gt;% \nkable_paper(full_width = F) %&gt;%\ncolumn_spec(2, color = \"white\",background = spec_color(read.csv(here::here(\"data/water/weighing_watering_output/WUE_sRWU_Bootstrap.csv\")) %&gt;%dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(across(WUE:sRWU, mean, na.rm = TRUE)) %&gt;%  pull(WUE), end = 0.7)) %&gt;% \ncolumn_spec(3, color = \"white\",background = spec_color(read.csv(here::here(\"data/water/weighing_watering_output/WUE_sRWU_Bootstrap.csv\")) %&gt;%dplyr::group_by(condition) %&gt;% \ndplyr::summarise(across(WUE:sRWU, mean, na.rm = TRUE)) %&gt;%  pull(sRWU), end = 0.7))\n\n\n\nWUE and sRWU for eatch condition. Bootstrap = 100\n\n\nCondition\nWUE (g. L H20-1)\nsRWU(gH2O[gBMroot day-1]-1)\n\n\n\n\nSto_WS_HS\n0.49\n0.66\n\n\nSto_WS_OT\n1.04\n0.36\n\n\nSto_WW_HS\n0.58\n1.01\n\n\nSto_WW_OT\n0.75\n0.71\n\n\nWen_WS_HS\n0.67\n0.54\n\n\nWen_WS_OT\n1.13\n0.33\n\n\nWen_WW_HS\n0.65\n1.00\n\n\nWen_WW_OT\n0.76\n0.77",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Use of water during the experiment</span>"
    ]
  },
  {
    "objectID": "report/water/2_water_during_the_experiment.html#evapo-surface",
    "href": "report/water/2_water_during_the_experiment.html#evapo-surface",
    "title": "3  Use of water during the experiment",
    "section": "3.5 Evapo / Surface",
    "text": "3.5 Evapo / Surface\n\n\nCode\nsum_evapo_end_and_physio= full_join(read.csv2(here::here(\"data/water/weighing_watering_output/sum_evapotranspi.csv\"), sep=\",\",dec=\".\")[-1],read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n                                      dplyr::select(plant_id,plant_num, weight_root, leaf_area,sum_biomass),  by=\"plant_id\") %&gt;% \n  mutate(sum_total_evapotranspiration=sum_total_evapotranspiration/2) %&gt;% \n  drop_na(leaf_area,sum_total_evapotranspiration) %&gt;% \n  mutate(evapo_surface=sum_total_evapotranspiration/leaf_area) %&gt;% \n  mutate(water_condition=str_sub(condition, 5, 6)) %&gt;% \n  mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n  mutate(genotype=ifelse(str_sub(condition, 1, 3)==\"Sto\",\"Stocata\",\"Wendy\"))  \n\nsum_evapo_end_and_physio_H1=sum_evapo_end_and_physio %&gt;% \n  filter(recolte==1)\n\nsum_evapo_end_and_physio_H2=sum_evapo_end_and_physio %&gt;% \n  filter(recolte==2)\n\n#creation of table\nsum_evapo_end_and_physio_H2 %&gt;% \ndplyr::select(condition, sum_total_evapotranspiration, leaf_area,evapo_surface) %&gt;%\n  dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(across(sum_total_evapotranspiration : evapo_surface, list(mean,sd), na.rm = TRUE)) %&gt;% \nkbl(caption = \"Evapotranspiration by surface of leaf (Mean)\", col.names=c(\"Condition\", \"Evapotranspiration total during the experiment (mL)\", \"sd\",\"Leaf area (cm²)\", \"sd\", \"Evapo / Leaf surface area (g/cm²)\", \"sd\"), digits = 2) %&gt;% \nkable_paper(full_width = F)\n\n\n\n\nCode\npx_H2=stat_analyse(data =sum_evapo_end_and_physio_H2,\n                column_value = \"evapo_surface\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"Total evapotranspiration \\n per leaf area (gH2O/cm²)\")\n             )\n\npx_H2&lt;-px_H2[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )\n\npx_H1=stat_analyse(data =sum_evapo_end_and_physio_H1 %&gt;% mutate(genotype=as.factor(genotype)) %&gt;% filter(plant_num!=2), # leaf area is wrong (not well developed)\n                column_value = \"evapo_surface\",\n                category_variables = \"genotype\",\n                control_conditions = \"\",\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"Total evapotranspiration \\n per leaf area (gH2O/cm²)\")\n             )\n\npx_H1&lt;-px_H1[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )\n\ncombined_plot&lt;-(px_H1+px_H2) #+ plot_layout(guides = 'collect')\n# export figure\npng(here::here(paste0(\"report/water/plot/evapo_leaf.png\")), width = 18, height = 10, units = 'cm', res = 900)\ncombined_plot\ndev.off()\n\n\n\n\nCode\np_licor=stat_analyse(data =read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n                     dplyr::select(plant_num,condition,genotype,Trmmol) %&gt;% \n                       mutate(water_condition=str_sub(condition, 5, 6)) %&gt;% \n  mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n    drop_na(Trmmol),\n                column_value = \"Trmmol\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"Transpiration rate (mmol H2O.m-2.s-1)\")\n             )\n\np_licor&lt;-p_licor[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )\n\n# export figure\npng(here::here(paste0(\"report/water/plot/Transpiration_rate.png\")), width = 14, height = 8, units = 'cm', res = 900)\np_licor\ndev.off()\n\n# for humidity close to the leaves ###################\np_H2OS=stat_analyse(data =read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n                     dplyr::select(plant_num,condition,genotype,H2OS) %&gt;% \n                       mutate(water_condition=str_sub(condition, 5, 6)) %&gt;% \n  mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n    drop_na(H2OS),\n                column_value = \"H2OS\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"Moisture on leaf surface (%)\")\n             )\n\np_H2OS&lt;-p_H2OS[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )\n\n# for temperature of the leaves ###################\np_Tleaf=stat_analyse(data =read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n                     dplyr::select(plant_num,condition,genotype,Tleaf) %&gt;% \n                       mutate(water_condition=str_sub(condition, 5, 6)) %&gt;% \n  mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n    drop_na(Tleaf),\n                column_value = \"Tleaf\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"Leaf surface temperature (°C)\")\n             )\n\np_Tleaf&lt;-p_Tleaf[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )\n\n\n# for stomatac conductance of the leaves ###################\np_Gs=stat_analyse(data =read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n                     dplyr::select(plant_num,condition,genotype,Cond) %&gt;% \n                       mutate(water_condition=str_sub(condition, 5, 6)) %&gt;% \n  mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n    drop_na(Cond),\n                column_value = \"Cond\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = expression(G[s] ~ \"(\" * mol ~ H[2]*O ~ m^{-2} ~ s^{-1} * \")\"),\n             )\n\np_Gs&lt;-p_Gs[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )\n\n\n\n# export figure\npng(here::here(paste0(\"report/water/plot/Transpiration_rate.png\")), width = 14, height = 8, units = 'cm', res = 900)\np_licor\ndev.off()\n\npng(here::here(paste0(\"report/water/plot/H2OS.png\")), width = 14, height = 8, units = 'cm', res = 900)\np_H2OS\ndev.off()\n\npng(here::here(paste0(\"report/water/plot/Tleaf.png\")), width = 12, height = 8, units = 'cm', res = 900)\np_Tleaf\ndev.off()\n\npng(here::here(paste0(\"report/water/plot/Gs.png\")), width = 12, height = 8, units = 'cm', res = 900)\np_Gs\ndev.off()",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Use of water during the experiment</span>"
    ]
  },
  {
    "objectID": "report/water/2_water_during_the_experiment.html#evaporation-one-days-befor-second-harvest",
    "href": "report/water/2_water_during_the_experiment.html#evaporation-one-days-befor-second-harvest",
    "title": "3  Use of water during the experiment",
    "section": "3.6 Evaporation one days befor second harvest",
    "text": "3.6 Evaporation one days befor second harvest\n\n\nCode\n# calcul\ndf_evapo_biomass&lt;-read.csv(here::here(\"data/water/weighing_watering_output/df_evapo3.csv\"))[-1] %&gt;% \n  arrange(next_weight) %&gt;% \n  filter(resultdate==\"2021-10-11\") %&gt;% \n  filter(taskid %in% c(28697, 28699)) %&gt;% \n  drop_na(leaf_area) %&gt;% \n  mutate(diff_resultdate_time_h=diff_resultdate_time/60) %&gt;% \n  mutate(leaf_area_m=leaf_area/10000) %&gt;% \n  mutate(transpiPlante_g_h=evapotranspiration/(2*diff_resultdate_time/60)) %&gt;% \n  mutate(TR_g_m2_s=transpiPlante_g_h/(leaf_area_m*3600)) %&gt;% \n  mutate(TR_mmol_m2_s=TR_g_m2_s*10^3/18.015) %&gt;% \n  distinct(plant_num, .keep_all = TRUE)\n\n# export\nwrite.csv(df_evapo_biomass, here::here(\"data/water/weighing_watering_output/transpiration_rate_20231011.csv\"))\n\n# creation table\ndf_evapo_biomass_mean = df_evapo_biomass %&gt;% \ndplyr::select(condition, transpiPlante_g_h, leaf_area,diff_resultdate_time,TR_mmol_m2_s) %&gt;%\n  dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(across(transpiPlante_g_h : TR_mmol_m2_s, list(mean,sd), na.rm = TRUE))\n\ndf_evapo_biomass_mean %&gt;% \nkbl(caption = \"Evapotranspiration by surface of leaf between two measure (Mean)\", col.names=c(\"Condition\", \"Plant transpiration (g/h)\", \"sd\",\"Leaf area (cm²)\", \"sd\",\"time between two weighings (min)\",\"sd\", \"Transpiration rate (mmol m-2 s-1\", \"sd\"), digits = 2) %&gt;% \nkable_paper(full_width = F) %&gt;% \n  column_spec(8, color = \"white\",background = spec_color(df_evapo_biomass_mean %&gt;%  pull(TR_mmol_m2_s_1), end = 0.7)) \n\n\n\nEvapotranspiration by surface of leaf between two measure (Mean)\n\n\nCondition\nPlant transpiration (g/h)\nsd\nLeaf area (cm²)\nsd\ntime between two weighings (min)\nsd\nTranspiration rate (mmol m-2 s-1\nsd\n\n\n\n\nSto_WS_HS\n0.21\n0.06\n31.19\n8.06\n456.00\n5.61\n1.17\n0.53\n\n\nSto_WS_OT\n0.41\n0.14\n65.14\n9.75\n443.08\n1.56\n1.00\n0.38\n\n\nSto_WW_HS\n4.55\n0.55\n165.99\n29.45\n454.13\n6.07\n4.31\n0.61\n\n\nSto_WW_OT\n4.21\n0.59\n187.86\n36.74\n442.77\n1.95\n3.51\n0.44\n\n\nWen_WS_HS\n0.28\n0.04\n42.83\n8.12\n455.67\n5.38\n1.06\n0.25\n\n\nWen_WS_OT\n0.41\n0.10\n75.06\n11.35\n442.90\n1.78\n0.86\n0.23\n\n\nWen_WW_HS\n4.94\n0.58\n194.14\n44.93\n453.25\n7.09\n4.12\n0.95\n\n\nWen_WW_OT\n4.33\n0.50\n228.64\n46.92\n443.09\n2.07\n3.03\n0.67\n\n\n\n\n\n\n\n\n\nCode\npx=stat_analyse(data =df_evapo_biomass %&gt;% \n                  #mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  #mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n    drop_na(TR_mmol_m2_s),\n                column_value = \"TR_mmol_m2_s\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = paste0(\"Evapotranspiration during licore measure \\n per leaf area (mmol.m-2.s-1)\")\n             )\n\npx&lt;-px[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )\n\n# export figure\npng(here::here(paste0(\"report/water/plot/Transpiration_rate_20211011.png\")), width = 14, height = 10, units = 'cm', res = 900)\npx\ndev.off()\n\n\n\n\n\nBonnus: Draft of some statistics\n\n\n\nCode\ntest=df_compile_sRWU %&gt;% \n  drop_na(sRWU) %&gt;% \n  #filter(climat_condition==\"WW_OT\") %&gt;% \n  t_test(sRWU ~ condition,p.adjust.method = \"BH\") %&gt;%\n  add_significance()\n\ntest=df_compile %&gt;% \n  drop_na(WUE) %&gt;% \n  #filter(climat_condition==\"WW_OT\") %&gt;% \n  t_test(WUE ~ condition,p.adjust.method = \"BH\") %&gt;%\n  add_significance()\n\n\n\n\nCode\ndf_physio_s=df_compile %&gt;% \n  drop_na(WUE) %&gt;% \n  #filter(genotype==\"Stocata\") %&gt;% \n  #filter(condition%in% c(\"Sto_WW_HS\",\"Wen_WW_HS\")) %&gt;% \n  dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(Mean=mean(WUE))\n\n(df_physio_s$Mean[4]-df_physio_s$Mean[8])/df_physio_s$Mean[8]",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Use of water during the experiment</span>"
    ]
  },
  {
    "objectID": "report/physio/2_RUE.html",
    "href": "report/physio/2_RUE.html",
    "title": "4  Calcul of Radiation Use Efficiency",
    "section": "",
    "text": "4.1 Methode Bootstrap\nExecution of the bootstrap\nCode\n# parameter ----\nrep=100\n\n# calcul ----\n\n# colnames(df_physio)\ndf_compile=data.frame()\nlist_condition=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")\n\nfor(cond in list_condition){\n  for (i in 1:rep){\n    #For H2\n    df_r2=df_physio %&gt;% dplyr::filter(recolte==\"2\") %&gt;%  dplyr::filter(condition==cond)\n    df_r2_taking=df_r2 %&gt;% dplyr::filter(plant_num==sample(df_r2$plant_num,1,replace=T))   %&gt;% dplyr::select(sum_biomass,condition,plant_num,recolte,date_recolte,leaf_area)\n    \n    #For H1\n    if(str_sub(df_r2_taking$condition, 1, 3)==\"Sto\"){\n      df_r1=df_physio %&gt;% dplyr::filter(recolte==\"1\")  %&gt;% dplyr::filter(condition==\"Sto_WW_OT\")\n      df_r1_taking=df_r1 %&gt;%dplyr:: filter(plant_num==sample(df_r1$plant_num,1,replace=T))   %&gt;% dplyr::select(sum_biomass,condition,plant_num,recolte,date_recolte,leaf_area)\n      \n    }else {\n      df_r1=df_physio %&gt;% dplyr::filter(recolte==\"1\")  %&gt;% dplyr::filter(condition==\"Wen_WW_OT\")\n      df_r1_taking=df_r1 %&gt;% dplyr::filter(plant_num==sample(df_r1$plant_num,1,replace=T))   %&gt;% dplyr::select(sum_biomass,condition,plant_num,recolte,date_recolte,leaf_area)\n    }\n    \n    colnames(df_r1_taking)=c(\"sum_biomass_r1\" ,\"condition_r1\" ,\"plant_num_r1\",\"recolte_r1\",\"date_recolte_r1\",\"leaf_area_r1\")\n    colnames(df_r2_taking)=c(\"sum_biomass_r2\" ,\"condition_r2\" ,\"plant_num_r2\",\"recolte_r2\",\"date_recolte_r2\",\"leaf_area_r2\")\n    \n    df_bind=cbind(df_r2_taking,df_r1_taking)\n    df_bind$rep=i\n    \n    #calcul\n    df_bind$RUE=(df_bind$sum_biomass_r2-df_bind$sum_biomass_r1)/\n      (( (as.numeric(as.Date(df_bind$date_recolte_r2)-as.Date(df_bind$date_recolte_r1))) * ((df_bind$leaf_area_r2+df_bind$leaf_area_r1)/2)))\n    df_compile=rbind(df_compile,df_bind)\n  }\n  cat(cond,\"\\n\")\n}\n\ndf_compile$compile_rep=paste(sep=\"_\",df_compile$rep,df_compile$condition_r2)\n\n#write result\nwrite.csv(df_compile,here::here(paste(sep=\"_\",\"data/physio/output/random_drawing_RUE\", \"rep\",rep,\".csv\")))\nVisualisation of the result\nCode\ndf_RUE=read.csv(here::here(\"data/physio/output/random_drawing_RUE_rep_100_.csv\"))[-1] %&gt;%\n  dplyr::rename(condition=condition_r2) %&gt;% \n  separate(condition, remove = F,c(\"genotype\",\"water_condition\",\"heat_condition\")) %&gt;% \n  mutate(climat_condition =paste0(water_condition, \"_\", heat_condition))\n\n# analyse\nplot_x=stat_analyse(\n    data=df_RUE %&gt;% \n      #filter(compartment==\"Bulk\") %&gt;% \n      drop_na(genotype,climat_condition, RUE) %&gt;% \n      dplyr::select(genotype, condition, water_condition, heat_condition,compile_rep,climat_condition,RUE) %&gt;% \n       mutate(condition = case_when(\n    condition == \"Stocata_WW_OT\" ~ \"Sto_WW_OT\",\n    condition == \"Stocata_WS_OT\" ~ \"Sto_WS_OT\",\n    condition == \"Stocata_WW_HS\" ~ \"Sto_WW_HS\",\n    condition == \"Stocata_WS_HS\" ~ \"Sto_WS_HS\",\n    condition == \"Wendy_WW_OT\" ~ \"Wen_WW_OT\",\n    condition == \"Wendy_WS_OT\" ~ \"Wen_WS_OT\",\n    condition == \"Wendy_WW_HS\" ~ \"Wen_WW_HS\",\n    condition == \"Wendy_WS_HS\" ~ \"Wen_WS_HS\",\n    TRUE ~ condition  # Keep other values unchanged\n  )) %&gt;% \n    mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))),\n    column_value = \"RUE\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"compile_rep\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"RUE g.cm-2.day-1\"),\n  control_conditions = c(\"WW_OT\"),\n  hex_pallet = climate_pallet,\n  strip_normale = F\n)\n\n# export\npng(here::here(\"report/physio/plot/RUE_bootstrap.png\"), width = 14, height = 11, units = 'cm', res = 900)\ngridExtra::grid.arrange (plot_x[[\"plot\"]]+labs(fill = \"Treatment\", color=\"Treatment\")) \ndev.off()",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calcul of Radiation Use Efficiency</span>"
    ]
  },
  {
    "objectID": "report/physio/2_RUE.html#methode-mean-for-harvest-1",
    "href": "report/physio/2_RUE.html#methode-mean-for-harvest-1",
    "title": "4  Calcul of Radiation Use Efficiency",
    "section": "4.2 Methode Mean for Harvest 1",
    "text": "4.2 Methode Mean for Harvest 1\n\n\nCode\n# Data importation and preparation for H1 and H2\n## Mean of H1\ndf_H1_mean&lt;-read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n              dplyr::select(plant_id, plant_num,genotype,date_recolte,recolte,sum_biomass, leaf_area, condition) %&gt;% filter(recolte==1) %&gt;% \n              drop_na(sum_biomass,leaf_area) %&gt;% \n  dplyr::group_by(condition, genotype,recolte,date_recolte) %&gt;%\n  dplyr::summarise(across(sum_biomass : leaf_area, ~ mean(.x, na.rm = TRUE))) %&gt;% \n  dplyr::rename_all(~ paste0(., \"_H1\")) %&gt;% \n  dplyr::rename(genotype=genotype_H1)\n\ndf_H2&lt;-read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;%\n              dplyr::select(plant_id, plant_num,genotype,date_recolte,recolte,sum_biomass, leaf_area, condition) %&gt;% filter(recolte==2) %&gt;% \n              drop_na(sum_biomass,leaf_area) %&gt;% \n  dplyr::group_by(plant_id, plant_num,condition, genotype,recolte,date_recolte) %&gt;%\n  dplyr::summarise(across(sum_biomass : leaf_area, ~ mean(.x, na.rm = TRUE))) %&gt;% \n  dplyr::rename_all(~ paste0(., \"_H2\")) %&gt;% \n  dplyr::rename(genotype=genotype_H2)\n\n# Process RUE\nRUE_1mean=full_join(df_H2, df_H1_mean, by=\"genotype\",relationship = \"many-to-many\") %&gt;% \n  #calcul\n  mutate(RUE=(sum_biomass_H2-sum_biomass_H1)/\n      (( (as.numeric(as.Date(date_recolte_H2)-as.Date(date_recolte_H1))) * (leaf_area_H2+leaf_area_H1)/2))) %&gt;% \n  \n  dplyr::rename(condition=condition_H2) %&gt;% \n  mutate(water_condition=str_sub(condition, 5, 6)) %&gt;% \n  mutate(heat_condition=str_sub(condition, 8, 9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\")))\n  \n# export results\nwrite.csv(RUE_1mean,here::here(paste(sep=\"_\",\"data/physio/output/RUE_1mean.csv\")))\n\n# Show results\npRUE=stat_analyse(data =RUE_1mean,\n                column_value = \"RUE\",\n                category_variables = c(\"climat_condition\"),\n                grp_var = \"genotype\",\n                control_conditions = c(\"WW_OT\"),\n                biologist_stats = T,\n                strip_normale = F,\n                outlier_show = F,\n                label_outlier = \"plant_num_H2\",\n                show_plot = T,\n                hex_pallet = climate_pallet,\n                Ylab_i = \"RUE g.cm-2.day-1\"\n             )\n\npRUE&lt;-pRUE[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\")+\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_blank()\n        )+labs(subtitle = \"RUE with H1 mean\")\n\n\n# export\npng(here::here(\"report/physio/plot/RUE_1mean.png\"), width = 14, height = 11, units = 'cm', res = 900)\ngridExtra::grid.arrange (pRUE) \ndev.off()",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calcul of Radiation Use Efficiency</span>"
    ]
  },
  {
    "objectID": "report/physio/0_preprocessing_ecophy.html",
    "href": "report/physio/0_preprocessing_ecophy.html",
    "title": "5  Pre-processing of ecophysiological data",
    "section": "",
    "text": "5.1 Data importation\nCode\ndata_physio=read_excel(here::here(\"data/physio/raw_data_physio/dataset_physio_soybean_xp1.xlsx\"))\nplant_info=read_excel(here::here(\"data/plant_information.xlsx\"))\n\nglobal_physio=merge(data_physio,plant_info,by=\"plant_num\",all=T)\n\n# Add scan surface #####################################\nleaf_scan=read.csv(here::here(\"data/physio/raw_data_physio/result_nb_pixel_leaf_scan.csv\"))\nstem_scan=read.csv(here::here(\"data/physio/raw_data_physio/result_nb_pixel_stem_scan.csv\"))",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pre-processing of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/physio/0_preprocessing_ecophy.html#transform-label-into-number-and-renome-columne",
    "href": "report/physio/0_preprocessing_ecophy.html#transform-label-into-number-and-renome-columne",
    "title": "5  Pre-processing of ecophysiological data",
    "section": "5.2 Transform label into number and renome columne",
    "text": "5.2 Transform label into number and renome columne\n\n\nCode\ngr &lt;- gregexpr(\"[0-9\\\\.]+\" , leaf_scan$Label )\nresultat &lt;- as.integer(t( sapply(regmatches(leaf_scan$Label , gr) , as.numeric)))\nleaf_scan$Label=resultat\ncolnames(leaf_scan)=c(\"plant_num\",\"leaf_scan\",\"X\")\nleaf_scan$leaf_scan=leaf_scan$leaf_scan*0.0063796*0.0063796\n\ngr &lt;- gregexpr(\"[0-9\\\\.]+\" , stem_scan$Label )\nresultat &lt;- as.integer(t( sapply(regmatches(stem_scan$Label , gr) , as.numeric)))\nstem_scan$Label=resultat\ncolnames(stem_scan)=c(\"plant_num\",\"stem_scan\",\"X\")\nstem_scan$stem_scan=stem_scan$stem_scan*0.0063796*0.0063796\n\ndf_scan=merge(stem_scan,leaf_scan,by=\"plant_num\",all=T)\ndf_scan=df_scan%&gt;%\n  dplyr::select(\"plant_num\",\"leaf_scan\",\"stem_scan\")\n\nglobal_physio=merge(global_physio,df_scan,by=\"plant_num\",all=T)",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pre-processing of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/physio/0_preprocessing_ecophy.html#recalculation-of-some-variable",
    "href": "report/physio/0_preprocessing_ecophy.html#recalculation-of-some-variable",
    "title": "5  Pre-processing of ecophysiological data",
    "section": "5.3 Recalculation of some variable",
    "text": "5.3 Recalculation of some variable\n\n\nCode\n# Compilation in stem_area or leaf_area for planimeter and scan \nglobal_physio=global_physio %&gt;%rowwise() %&gt;% mutate(leaf_area = ifelse(is.na(planimeter_leaf), leaf_scan, planimeter_leaf))\nglobal_physio=global_physio %&gt;%rowwise() %&gt;% mutate(stem_area = ifelse(is.na(planimeter_stem), leaf_scan, planimeter_stem))\n\n# Replace0 by NA\nglobal_physio$leaf_area[global_physio$leaf_area == 0] &lt;- NA\nglobal_physio$stem_area[global_physio$stem_area == 0] &lt;- NA\n\n# Calculate SLA (specific leaf area) \n# Tha variables calculated were area / mass of leaf in m²/kg , which is the ratio of leaf area (cm² to m²) by the leaf dry biomass (g to kg)\nglobal_physio$SLA=(global_physio$leaf_area*0.0001)/(global_physio$weight_leaf*0.001)\n\n# Calculate the sum of the biomass\nglobal_physio$sum_biomass=global_physio$weight_leaf+global_physio$weight_stem+global_physio$weight_root\n\n# Calculate the shoot_root_ratio\nglobal_physio$shoot_root_ratio=(global_physio$weight_leaf+global_physio$weight_stem)/global_physio$weight_root\n\n# Convert Leaf Water Potential\nglobal_physio$Hydric_potential=global_physio$Hydric_potential*-0.1",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pre-processing of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/physio/0_preprocessing_ecophy.html#select-the-interesting-data",
    "href": "report/physio/0_preprocessing_ecophy.html#select-the-interesting-data",
    "title": "5  Pre-processing of ecophysiological data",
    "section": "5.4 Select the interesting data",
    "text": "5.4 Select the interesting data\n\n\nCode\nglobal_physio_select=global_physio%&gt;%\n  dplyr::select(Hydric_potential, weight_stem,weight_leaf,weight_root,weight_cotyledon,leaf_scan,leaf_area,stem_scan,stem_area,planimeter_leaf,planimeter_stem,SLA,sum_biomass,plant_num,shoot_root_ratio)",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pre-processing of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/physio/0_preprocessing_ecophy.html#merge-physio-licor-and-plant_info",
    "href": "report/physio/0_preprocessing_ecophy.html#merge-physio-licor-and-plant_info",
    "title": "5  Pre-processing of ecophysiological data",
    "section": "5.5 Merge physio, licor and plant_info",
    "text": "5.5 Merge physio, licor and plant_info\n\n\nCode\nlicor=read.csv(here::here(\"data/physio/raw_data_physio/result_licor.csv\"))[2:23]\nlicor_h &lt;- licor %&gt;% \n  pivot_wider(names_from=\"parametre\",\n              values_from=\"value\")\nlicor_h_select=licor_h %&gt;% \n  dplyr::select(plant_num,colnames(licor_h)[21:64])\n\nplant_info$plant_num=as.integer(plant_info$plant_num)\nglobal_physio=merge(global_physio_select,licor_h_select, by=\"plant_num\", all=T)\nglobal_physio=merge(plant_info,global_physio,by=\"plant_num\", all=T)\n\n\n\n\n\n\n\n\nDelet extrem outlier\n\n\n\nI delet Extrem outlier because problem in root biomass or extreme outlier in multiple analyses\n\n\n\n\nCode\nglobal_physio_clean=global_physio %&gt;% \n  filter(plant_num!=1113) %&gt;% \n  filter(!plant_num %in% c(87))",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pre-processing of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/physio/0_preprocessing_ecophy.html#export",
    "href": "report/physio/0_preprocessing_ecophy.html#export",
    "title": "5  Pre-processing of ecophysiological data",
    "section": "5.6 Export",
    "text": "5.6 Export\n\n\nCode\nwrite.csv2(global_physio_clean,here::here(\"data/physio/global_physio.csv\"),row.names = F)",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pre-processing of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/physio/2_rapid_analysis_ecophy.html",
    "href": "report/physio/2_rapid_analysis_ecophy.html",
    "title": "6  Rapid analysis of ecophysiological data",
    "section": "",
    "text": "6.1 For data related to biomass",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rapid analysis of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/physio/2_rapid_analysis_ecophy.html#for-data-related-to-biomass",
    "href": "report/physio/2_rapid_analysis_ecophy.html#for-data-related-to-biomass",
    "title": "6  Rapid analysis of ecophysiological data",
    "section": "",
    "text": "6.1.1 Data importation\n\n\nCode\ndf_physio&lt;-read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(across(c(\"storage_line\",\"position\"), as.integer)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;% \n  dplyr::select(acronyme_analyse, water_condition, heat_condition, genotype, \"plant_num\" ,\"condition\",\"position\"   ,\"storage_line\"     ,\"unit\"  ,\"analyse_by_plant\", \"recolte\", \"paire\",\"weight_stem\",\"weight_leaf\",\"weight_root\" ,\"leaf_area\", \"stem_area\", \"planimeter_leaf\", \"planimeter_stem\", \"SLA\", \"sum_biomass\") %&gt;% \n#   dplyr::select(acronyme_analyse, water_condition, heat_condition, genotype, \"plant_num\" ,\"condition\",\"position\"   ,\"storage_line\"     ,\"unit\"  ,\"analyse_by_plant\", \"recolte\", \"paire\",\"Hydric_potential\",\"weight_stem\",\"weight_leaf\",\"weight_root\" ,\"leaf_area\", \"stem_area\", \"planimeter_leaf\", \"planimeter_stem\", \"SLA\", \"sum_biomass\", \"Trmmol\",\"Tleaf\", \"Ci\",\"PARabs\",\"CO2S\",  \"PARo\", \n# \"H2OS\",  \"AHs.Cs\",\"fda\",   \"vp_kPa\", \"Twall_K\",\"Tl.Ta\", \"CTair\", \"C2sfc\", \"SVTair\",\"h20diff\",\"Flow\",  \"Cond\",  \"Tair\", \"SVTleaf\",\"Press\", \"CO2R\",  \"RH_S\",  \"Trans\", \"Tair_K\",\"h2o_i\", \"VpdL\",  \"PARi\",  \"CndTotal\",\"Ci_Pa\", \"PhiCO2\",\"TBlk\",  \"Ci.Ca\", \"CTleaf\",\"CndCO2\",\"RHsfc\", \"R.W.m2.\",\"H2OR\", \"Photo\", \"RH_R\",  \"VpdA\") %&gt;% \n  drop_na(condition,recolte) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")))\n\n\n\n\n6.1.2 Fast data visualization\n\n\nCode\nx &lt;- inspect_cat(df_physio)\nx %&gt;%  show_plot()\n\n\n\n\n\n\n\n\n\nCode\n#inspect_cor() returns a tibble containing Pearson’s correlation coefficient, confidence intervals and p-values for pairs of numeric columns. The function combines the functionality of cor() and cor.test() in a more convenient wrapper.\n\n#To plot the comparison of the top 20 correlation coefficients for each condition (not show):\n# px&lt;-inspect_cor(df_physio %&gt;%\n# #                  filter(condition==i) %&gt;%\n#                   filter(recolte==2)# %&gt;% \n#                   #dplyr::select(starts_with(\"weight\"))\n#                 ) %&gt;% \n#   slice(1:40) %&gt;% show_plot()\n# print(px+labs(title = i))\n\n\nSummarises the prevalence of missing values by each column in a data frame.\n\n\nCode\ninspect_na(df_physio) %&gt;% show_plot()\n\n\n\n\n\n\n\n\n\n\n\n6.1.3 Check for missing values\n(NA) in each variable and store ‘plantid’ values\n\n\nCode\nna_list &lt;- lapply(df_physio, function(x) {\n  plantid_with_na &lt;- df_physio$plant_num[is.na(x)]\n  return(plantid_with_na)\n})\n\n\nSelect only harvest 2\n\n\nCode\ndf_physio_h2=df_physio %&gt;% \n  filter(recolte==2) %&gt;%\n  filter(plant_num!=1113) %&gt;% \n  filter(!plant_num %in% c(87)) %&gt;%  #filter outlier\n  mutate(condition = case_when(\n    condition == \"Sto_WW_OT\" ~ \"Stocata_WW_OT\",\n    condition == \"Sto_WS_OT\" ~ \"Stocata_WS_OT\",\n    condition == \"Sto_WW_HS\" ~ \"Stocata_WW_HS\",\n    condition == \"Sto_WS_HS\" ~ \"Stocata_WS_HS\",\n    condition == \"Wen_WW_OT\" ~ \"Wendy_WW_OT\",\n    condition == \"Wen_WS_OT\" ~ \"Wendy_WS_OT\",\n    condition == \"Wen_WW_HS\" ~ \"Wendy_WW_HS\",\n    condition == \"Wen_WS_HS\" ~ \"Wendy_WS_HS\",\n    TRUE ~ condition  # Keep other values unchanged\n  )) %&gt;%\n  mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n  mutate(weight_AP=weight_stem+weight_leaf) %&gt;% \n  mutate(ratio_s_h=weight_AP/weight_root)\n\n\n\n\n6.1.4 Find Outlier\n\n\nCode\nvar_to_test=c(\"Hydric_potential\",\"weight_stem\",\"weight_leaf\",\"weight_root\" ,\"leaf_area\", \"stem_area\", \"planimeter_leaf\", \"planimeter_stem\", \"SLA\", \"sum_biomass\", \"Trmmol\",\"Tleaf\", \"Ci\",\"PARabs\",\"CO2S\",  \"PARo\", \n\"H2OS\",  \"AHs.Cs\",\"fda\",   \"vp_kPa\", \"Twall_K\",\"Tl.Ta\", \"CTair\", \"C2sfc\", \"SVTair\",\"h20diff\",\"Flow\",  \"Cond\",  \"Tair\", \"SVTleaf\",\"Press\", \"CO2R\",  \"RH_S\",  \"Trans\", \"Tair_K\",\"h2o_i\", \"VpdL\",  \"PARi\",  \"CndTotal\",\"Ci_Pa\", \"PhiCO2\",\"TBlk\",  \"Ci.Ca\", \"CTleaf\",\"CndCO2\",\"RHsfc\", \"R.W.m2.\",\"H2OR\", \"Photo\", \"RH_R\",  \"VpdA\")\n\nvar_to_test=c(\"weight_stem\",\"weight_leaf\",\"weight_root\" ,\"leaf_area\", \"stem_area\", \"planimeter_leaf\", \"planimeter_stem\", \"SLA\", \"sum_biomass\")\n\nnum_cores &lt;- detectCores()  # Use all the cores available on your machine\ncl=parallel::makeCluster(as.integer(num_cores-1))\ndoParallel::registerDoParallel(cl)\nresults &lt;- foreach(i = var_to_test, .packages = c(\"dplyr\", \"here\"), .combine = rbind) %dopar% {\n  source(here::here(\"src/function/stat_function/stat_analysis_main.R\")) # for make plot \n  anova_factor=2\n  #cat_col(i, \"green\")\n  plot_x=stat_analyse(\n    data=df_physio_h2 %&gt;% \n      data.frame() %&gt;%\n      drop_na(all_of(i)) %&gt;% \n      drop_na(plant_num, condition) %&gt;% \n      #dplyr::select(genotype, condition, water_condition, heat_condition,plant_num,climat_condition, all_off(i)) %&gt;% \n       mutate(condition = case_when(\n    condition == \"Stocata_WW_OT\" ~ \"Sto_WW_OT\",\n    condition == \"Stocata_WS_OT\" ~ \"Sto_WS_OT\",\n    condition == \"Stocata_WW_HS\" ~ \"Sto_WW_HS\",\n    condition == \"Stocata_WS_HS\" ~ \"Sto_WS_HS\",\n    condition == \"Wendy_WW_OT\" ~ \"Wen_WW_OT\",\n    condition == \"Wendy_WS_OT\" ~ \"Wen_WS_OT\",\n    condition == \"Wendy_WW_HS\" ~ \"Wen_WW_HS\",\n    condition == \"Wendy_WS_HS\" ~ \"Wen_WS_HS\",\n    TRUE ~ condition  # Keep other values unchanged\n  )) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))),\n    column_value = i,\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = F,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    #Ylab_i = paste0(\"Shoot / Root ratio\"),\n  control_conditions = c(\"WW_OT\")\n)\nplot_x[[\"outliers\"]]\n}\nparallel::stopCluster(cl)\n\ncolnames(results)\n\nresults %&gt;% filter(is.extreme==T) %&gt;% mutate(plant_num=as.factor(plant_num)) %&gt;%  count(\"plant_num\") %&gt;% arrange(desc(freq)) \nresults %&gt;% filter(is.outlier==T) %&gt;% mutate(plant_num=as.factor(plant_num)) %&gt;%  count(\"plant_num\") %&gt;% arrange(desc(freq))\n\n\n\n\n\n\n\n\nI deleted the plant numbers 1113 and 87 because they are extreme outliers for several variables.\n\n\n\n\n\n\n\n\n6.1.5 Biomass representation\n\n\nCode\ndf_physio_h2_mean=df_physio_h2%&gt;%\n  drop_na(condition,genotype,climat_condition,weight_leaf,weight_stem, weight_root) %&gt;% \n  dplyr::select(condition,genotype,climat_condition,plant_num,weight_leaf,weight_stem, weight_root) %&gt;% \n  pivot_longer(c(weight_leaf,weight_stem,weight_root),\n               names_to=\"organe\", values_to=\"biomass\") %&gt;% \n  dplyr::group_by(condition, genotype,climat_condition, organe) %&gt;% \n  dplyr::summarise(Mean=mean(biomass),Sd=sd(biomass))%&gt;% \n  mutate(organe = case_when(\n    organe       == \"weight_leaf\" ~ \"Leaf\",\n    organe       == \"weight_stem\" ~ \"Stem\",\n    organe       == \"weight_root\" ~ \"Root\",\n    TRUE ~ organe        # Keep other values unchanged\n  )) %&gt;% \n  pivot_wider(names_from = organe, values_from = c(\"Mean\",\"Sd\")) %&gt;% \n  mutate(adj_Leaf=Mean_Leaf + Mean_Stem + Mean_Root) %&gt;% \n  mutate(adj_Stem= Mean_Stem + Mean_Root) %&gt;% \n  mutate(adj_Root= Mean_Root) %&gt;% \n  pivot_longer(cols = !c(condition,genotype,climat_condition),\n               names_to = c('Type','Organe'),\n               names_sep = '_',\n               values_to = 'value') %&gt;% \n  pivot_wider(names_from = Type,\n              values_from = value) %&gt;% \n  dplyr::rename(\"Dry Biomass\"=Mean) %&gt;% \n  mutate(Organe=factor(Organe,levels=c(\"Leaf\",\"Stem\",\"Root\")))\n\nFig1=ggplot(df_physio_h2_mean, aes(x = Organe,y=`Dry Biomass`*1000,fill=climat_condition))+geom_errorbar(aes(ymin=`Dry Biomass`*1000-Sd*1000, ymax=`Dry Biomass`*1000+Sd*1000), width=.4,position=position_dodge(.9))+geom_bar(stat=\"identity\",position=position_dodge(),color=\"black\")+ theme_minimal()+\n  geom_text(aes(label = round(`Dry Biomass`*1000, digits = 0),y=2), color = \"white\",position = position_dodge(0.9),size=4,angle = 90,hjust = 'left')+\n  scale_x_discrete(limits=c(\"Leaf\", \"Stem\", \"Root\"))+ylab(\"Dry biomass of each organ (mg)\")+\n  xlab(\"Organe\")+facet_grid(.~genotype)+scale_fill_manual(values=manu_palett)\nprint(Fig1)\n\n# Add below the sd the letter\ndf_physio_h2_mean$letter=c(\n                            \"c\",\"e\",\"d\",\n                            \"c\",\"cd\",\"cd\",\n                            \"b\",\"b\",\"b\",\n                            \"ab\",\"a\",\"ab\",\n                            \"c\",\"cd\",\"de\",\n                            \"c\",\"c\",\"c\",\n                            \"a\",\"ab\",\"ab\",\n                            \"ab\",\"a\",\"a\"\n) \n\nmean_letter1=df_physio_h2_mean %&gt;%                        # Specify data frame\n  group_by(condition,climat_condition,genotype) %&gt;%       # Specify group indicator\n  summarise_at(vars(`Dry Biomass`),                       # Specify column\n               list(sum))\n\nmean_letter2=df_physio_h2_mean %&gt;%                        # Specify data frame\n  group_by(condition,climat_condition,genotype) %&gt;%\n  filter(Organe==\"Leaf\")%&gt;%select(Sd)\n\nmean_letter1=cbind(mean_letter1,mean_letter2[,4])\nmean_letter1$adj_tot=mean_letter1$`Dry Biomass`+mean_letter1$Sd  \n#for letter  Plettre_modif(Z=data_biomass_select,Y=data_biomass_select$Node_weight+data_biomass_select$Root_weight+data_biomass_select$PA,X=data_biomass_select$Genotype,Xlab=\"x\",Ylab = \"y\")\nmean_letter1$letter=c(\"d\",\"cd\",\"b\",\"ab\",\"cd\",\"c\",\"ab\",\"a\")\n\ncolor_organe &lt;- c(\"#68a500\",\"#d9d2b1\",\"#ce7f50\") #leaf,#stem #root\n\n#graph biomass\nFig_biomass=ggplot(df_physio_h2_mean, aes(x = climat_condition,y=`Dry Biomass`*1000,fill=Organe))+\n  geom_text(position = position_stack(vjust = 1.00),data = mean_letter1, aes(y = adj_tot*1010+Sd*1000, label = letter, fill = \"Leaf\"),fontface = \"bold\",color=\"#226896\")+\n  geom_bar(stat = \"identity\",color=\"black\")+ theme_bw()+\n  geom_errorbar(aes(ymin=adj*1000, ymax=adj*1000+Sd*1000),width=.4,position=\"identity\")+\n  geom_text(position = position_stack(vjust = 0.5), aes(label = letter), color = \"black\",size=4)+\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 1700)) +  # Ensures y-axis starts at zero\n  ylab(\"Dry biomass of each organ (mg)\")+\n  xlab(\"Condition\")+\n  scale_fill_manual(values=color_organe)+\n  theme(axis.text.x = element_text(angle=90, hjust=1, vjust=1))+\n  labs(fill = \"Organ\")+\n  facet_grid(.~genotype)+\n  theme(#axis.text.x = element_text(angle=45, hjust=1, vjust=1),\n        legend.position = \"right\",\n        panel.grid = element_blank(),\n              panel.background = element_rect(fill = \"white\", colour = \"black\"), \n              panel.border = element_rect(fill = NA, colour = \"black\"), \n              strip.background = element_rect(color = \"black\"),\n              axis.title.x=element_blank(),\n              axis.text.x=element_blank(),\n              axis.ticks.x=element_blank()\n        )\n\nplot_x=stat_analyse(\n    data=df_physio_h2 %&gt;% \n      data.frame() %&gt;%  \n      drop_na(ratio_s_h,plant_num, condition) %&gt;% \n      dplyr::select(genotype, condition, water_condition, heat_condition, ratio_s_h,plant_num,climat_condition) %&gt;% \n       mutate(condition = case_when(\n    condition == \"Stocata_WW_OT\" ~ \"Sto_WW_OT\",\n    condition == \"Stocata_WS_OT\" ~ \"Sto_WS_OT\",\n    condition == \"Stocata_WW_HS\" ~ \"Sto_WW_HS\",\n    condition == \"Stocata_WS_HS\" ~ \"Sto_WS_HS\",\n    condition == \"Wendy_WW_OT\" ~ \"Wen_WW_OT\",\n    condition == \"Wendy_WS_OT\" ~ \"Wen_WS_OT\",\n    condition == \"Wendy_WW_HS\" ~ \"Wen_WW_HS\",\n    condition == \"Wendy_WS_HS\" ~ \"Wen_WS_HS\",\n    TRUE ~ condition  # Keep other values unchanged\n  )) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))),\n    column_value = \"ratio_s_h\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"Shoot / Root ratio\"),\n  control_conditions = c(\"WW_OT\"),\n  hex_pallet = climate_pallet\n)\n\nplot_c=Fig_biomass+plot_x[[\"plot\"]]+plot_layout(ncol = 1,heights = c(2.8, 1))+ plot_annotation(tag_levels = 'A')\nplot_c=ggarrange(Fig_biomass,plot_x[[\"plot\"]], widths = c(1, 1),heights = c(1.7, 1),ncol=1, nrow=2,labels = c(\"A\",\"B\"),align='v')\n\nggsave(here::here(\"report/physio/plot/biomass_ratio_h2.svg\"), plot_c, height = 7.5,width = 6)\n\n\n\n\n\n6.1.6 Multiple regression model\n\n\nCode\ndf_physio_h2&lt;-read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(across(c(\"storage_line\",\"position\"), as.integer)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;% \n  filter(recolte==2) %&gt;% \n  mutate(shoot_root=(weight_stem+weight_leaf)/weight_root)\n\ncontrasts(df_physio_h2$genotype) &lt;- contr.sum # to say look at the big average only for genotype (juste an other representation)\nmod1=lm(formula = shoot_root ~ water_condition*heat_condition*genotype+position+storage_line, data = df_physio_h2 %&gt;% drop_na(shoot_root, position),contrasts = list(genotype = MASS::contr.sdif))\np_x&lt;-ggcoef_model(mod1)\nggsave(here::here(\"report/physio/plot/ggcoef_model_1.svg\"),p_x)\n\n\nA criterion must be defined to determine the quality of a model. One of the most widely used is the Akaike Information Criterion or AIC. It is a compromise between the number of degrees of freedom (e.g. the number of coefficients in the model) we wish to minimize and the explained variance we wish to maximize (the likelihood).\nThe AIC resuls for this first model is 252.38\nThe step() function selects the best model using a top-down step-by-step procedure based on AIC minimization. The function displays the various selection steps on the screen and returns the final model.\nThe AIC resuls for this second model is 246.72\n\n\n\n\nDisplay performance indicators and the regression results\n\n\nCode\n# mod2 |&gt; performance::model_performance()\nperformance::compare_performance(mod1, mod2)\nmod2 |&gt; \n  tbl_regression() |&gt; \n  bold_labels() |&gt; \n  add_glance_source_note()\n\n\nComparison of the two models\n\n\nCode\nggstats::ggcoef_compare(\n  list(mod1,mod2),\n  tidy_fun = broom.helpers::tidy_marginal_predictions,\n  type = \"dodge\",\n  vline = FALSE\n)\n\n# Draft\ndf_physio_h2 %&gt;%\n  dplyr::select(plant_num,water_condition, heat_condition, genotype, sum_biomass) %&gt;% \n  group_by(water_condition, heat_condition, genotype) %&gt;%\n  identify_outliers(sum_biomass)\n\ndf_without_outlier&lt;-df_physio_h2 %&gt;% \n  filter(!plant_num%in% c(143,1063,1091,1129)) %&gt;% \n  drop_na(sum_biomass)\n\nm_out&lt;-lm(data=df_without_outlier,sum_biomass~genotype*heat_condition*water_condition)   \n\nggqqplot(residuals(m_out))\nshapiro_test(residuals(m_out))\n\nggqqplot(df_physio_h2, \"sum_biomass\", ggtheme = theme_bw()) +\n  facet_grid(water_condition + heat_condition ~ genotype, labeller = \"label_both\")\n\ndf_physio_h2 %&gt;% levene_test(sum_biomass ~ water_condition*heat_condition*genotype)\nsummary(mod2)\n\nres.aov &lt;- df_physio_h2 %&gt;% anova_test(sum_biomass ~ water_condition*heat_condition*genotype)\nres.aov\n\nres.aov2 &lt;- df_physio_h2 %&gt;% welch_anova_test(sum_biomass ~ condition)\n# Pairwise comparisons (Games-Howell)\npwc2 &lt;- df_physio_h2 %&gt;% games_howell_test(sum_biomass ~ condition)\n\n# Visualization: Boxplots with p-values\nmod=rlm(data=df_without_outlier,sum_biomass~heat_condition*water_condition)\nsummary(mod)\nanova(mod)\n\nhist(df_without_outlier$sum_biomass, main = \"Histogram of my data\", xlab = \"Valeurs\", ylab = \"Frequency\", col = \"skyblue\", border = \"white\")\n\ntest=df_physio_h2 %&gt;% tukey_hsd(sum_biomass ~ genotype*water_condition*heat_condition)\n\n\n\n\n6.1.7 Contribution of each variable related to biomass\n\n\nCode\ndf_physio_h2_v&lt;-df_physio_h2 %&gt;% \n  dplyr::select(plant_num,genotype,heat_condition,water_condition,sum_biomass,weight_leaf, weight_stem, weight_root,ratio_s_h,\"leaf_area\") %&gt;% \n  pivot_longer(-c(plant_num,genotype,heat_condition,water_condition),names_to = \"variable\")\n\ncompile_result=as.data.frame(matrix(data=NA,nrow = 0, ncol = 8))\nfor (i in 1:length(levels(as.factor(df_physio_h2_v$variable)))){\n  variable_l_i=as.character(levels(as.factor(df_physio_h2_v$variable))[i])\n  cat( \"Variable:\" ,variable_l_i, \"\\n\")\n  \n  df_x= df_physio_h2_v  %&gt;% \n    filter(variable==variable_l_i) %&gt;% \n    drop_na(value)\n  \n  formula_string &lt;- as.formula(paste(\"value\", \"~\", paste(\"genotype\",\"*\",\"water_condition\",\"*\",\"heat_condition\", sep = \"\")))\n  \n  # Perform ANOVA using the aov function\n  result_variable &lt;- aov(data = df_x, formula = formula_string)\n  anova_result=summary(result_variable)[[1]] %&gt;% mutate(R2 = `Sum Sq` / sum(`Sum Sq`))\n  \n  row_name&lt;-rownames(anova_result)\n  row_name &lt;- gsub(\"genotype\",\"Genotype\",row_name)\n  row_name &lt;- gsub(\"water_condition\",\"Water\",row_name)\n  row_name &lt;- gsub(\"heat_condition\",\"Heat\",row_name)\n  rownames(anova_result)&lt;-row_name\n  anova_result$variable=as.character(df_x$variable)[1]\n  compile_result=rbind(compile_result,anova_result)\n}\n\ncompile_result&lt;-compile_result %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column(\"contribution_variable\") %&gt;% \n  mutate(Significance = case_when(\n    `Pr(&gt;F)` &lt;= 0.001 ~ '***',\n    `Pr(&gt;F)` &lt; 0.01  ~ '**',\n    `Pr(&gt;F)` &lt; 0.05  ~ '*',\n    `Pr(&gt;F)` &lt; 0.1   ~ '.',\n    TRUE            ~ ' '\n  ))\n\ncompile_result=compile_result%&gt;% \n  filter(str_detect(contribution_variable, \"Total\", negate = TRUE)) %&gt;% \n  filter(str_detect(contribution_variable, \"Residual\", negate = TRUE)) %&gt;% \n  mutate(contribution_variable = str_replace_all(contribution_variable, \" \", \"\")) %&gt;% \n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"\\\\$\", \"\"))%&gt;%\n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"[0-9]\", \"\")) %&gt;% \n  mutate(contribution_variable = as.character(contribution_variable)) %&gt;% \n  mutate(fontcolor = ifelse(contribution_variable %in% c(\"Water\", \"Genotype:Water:Heat\"), \"#ffffff\", \"#000000\")) %&gt;% \n  mutate(contribution_variable=fct_relevel(contribution_variable,c(\"Genotype\",\"Water\",\"Heat\", \"Genotype:Water\",\"Genotype:Heat\",\"Water:Heat\",\"Genotype:Water:Heat\"))) %&gt;% \n  mutate(text_output=paste0(round(R2*100,0), \"% \", Significance))\n\nplot_contrib&lt;-ggplot(compile_result, aes(x = variable, y = R2, fill = contribution_variable)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = ifelse(R2 &gt; 0.02, text_output, \"\")), color = compile_result$fontcolor, position = position_stack(vjust = 0.5), size = 2.5)+\n  scale_fill_manual(values = c(\"#ffd166\", # geno\n                               \"#118ab2\", # water\n                               \"#ef476f\", # heat\n                               \"#06d6a0\", # watergeno\n                               \"#f78c6b\", # genoheat\n                               \"#FFB6C1\", # waterheat\n                               \"#333333\"),\n                    name = \"title of legend (contribution\") +# all\n  scale_y_continuous(labels = scales::percent_format())+\n  scale_color_identity()+\n  labs(x = \"Compartment\",\n       y = \"The relative contribution for the different variables (%)\",\n       ) +\n  theme_minimal()+\n  theme(panel.grid = element_blank(),\n        legend.title = element_blank(), # for delete title\n        axis.text.x = element_text(angle = 45,hjust = 1, vjust = 1),\n        axis.title.x = element_blank()\n  )\n\nggsave(here::here(\"report/physio/plot/contribution.svg\"),plot_contrib)\n\n\n\n\n\n6.1.8 Student test\n\n\nCode\ntest=read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(across(c(\"storage_line\",\"position\"), as.integer)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;%\n  filter(recolte==2) %&gt;% \n  drop_na(Hydric_potential) %&gt;%\n  #filter(climat_condition==\"WW_OT\") %&gt;% \n  t_test(Hydric_potential ~ condition,p.adjust.method = \"BH\") %&gt;%\n  add_significance()\n\n\n\n\nCode\ndf_physio_s=read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(across(c(\"storage_line\",\"position\"), as.integer)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;%\n  filter(recolte==2) %&gt;% \n  drop_na(Hydric_potential) %&gt;% \n  #filter(genotype==\"Stocata\") %&gt;% \n  #filter(climat_condition%in% c(\"WW_OT\",\"WS_HS\")) %&gt;% \n  dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(Mean=mean(Hydric_potential))\n\n(df_physio_s$Mean[1]-df_physio_s$Mean[2])/df_physio_s$Mean[2]",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rapid analysis of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/physio/2_rapid_analysis_ecophy.html#for-the-data-related-to-licor-or-leaf-water-pottential",
    "href": "report/physio/2_rapid_analysis_ecophy.html#for-the-data-related-to-licor-or-leaf-water-pottential",
    "title": "6  Rapid analysis of ecophysiological data",
    "section": "6.2 For the data related to licor or leaf water pottential",
    "text": "6.2 For the data related to licor or leaf water pottential\n\n6.2.1 Data importation\n\n\nCode\ndf_physio_other&lt;-read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(across(c(\"storage_line\",\"position\"), as.integer)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;% \n  dplyr::select(acronyme_analyse, water_condition, heat_condition, genotype, \"plant_num\" ,\"condition\",\"position\"   ,\"storage_line\"     ,\"unit\"  ,\"analyse_by_plant\", \"recolte\", #\"paire\",\"weight_stem\",\"weight_leaf\",\"weight_root\" ,\"leaf_area\", \"stem_area\", \"planimeter_leaf\", \"planimeter_stem\", \"SLA\", \"sum_biomass\") %&gt;% \n#   dplyr::select(acronyme_analyse, water_condition, heat_condition, genotype, \"plant_num\" ,\"condition\",\"position\"   ,\"storage_line\"     ,\"unit\"  ,\"analyse_by_plant\", \"recolte\",\n\"Hydric_potential\", \"Trmmol\",\"Tleaf\", \"Ci\",\"PARabs\",\"CO2S\",  \"PARo\", \"H2OS\",  \"AHs.Cs\",\"fda\",   \"vp_kPa\", \"Twall_K\",\"Tl.Ta\", \"CTair\", \"C2sfc\", \"SVTair\",\"h20diff\",\"Flow\",  \"Cond\",  \"Tair\", \"SVTleaf\",\"Press\", \"CO2R\",  \"RH_S\",  \"Trans\", \"Tair_K\",\"h2o_i\", \"VpdL\",  \"PARi\",  \"CndTotal\",\"Ci_Pa\", \"PhiCO2\",\"TBlk\",  \"Ci.Ca\", \"CTleaf\",\"CndCO2\",\"RHsfc\", \"R.W.m2.\",\"H2OR\", \"Photo\", \"RH_R\",  \"VpdA\") %&gt;% \n  drop_na(condition,recolte) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")))\n\n\n\n\n6.2.2 Fast data visualization\n\n\nCode\nx &lt;- inspect_cat(df_physio_other)\nx %&gt;%  show_plot()\n\n\n\n\n\n\n\n\n\n\n\nCode\n#inspect_cor() returns a tibble containing Pearson’s correlation coefficient, confidence intervals and p-values for pairs of numeric columns. The function combines the functionality of cor() and cor.test() in a more convenient wrapper.\n\n#To plot the comparison of the top 20 correlation coefficients for each condition (not show):\n# px&lt;-inspect_cor(df_physio %&gt;%\n# #                  filter(condition==i) %&gt;%\n#                   filter(recolte==2)# %&gt;% \n#                   #dplyr::select(starts_with(\"weight\"))\n#                 ) %&gt;% \n#   slice(1:40) %&gt;% show_plot()\n# print(px+labs(title = i))\n\n\nSummarises the prevalence of missing values by each column in a data frame.\n\n\nCode\ninspect_na(df_physio_other) %&gt;% show_plot()\n\n\n\n\n\n\n\n\n\n\n\n6.2.3 Check for missing values\n\n\nCode\nna_list &lt;- lapply(df_physio_other, function(x) {\n  plantid_with_na &lt;- df_physio_other$plant_num[is.na(x)]\n  return(plantid_with_na)\n})\n\n\nSelect only harvest 2\n\n\nCode\ndf_physio_other_h2=df_physio_other %&gt;% \n  filter(recolte==2) %&gt;%\n  filter(plant_num!=1113) %&gt;% \n  filter(!plant_num %in% c(87)) %&gt;%  #filter outlier\n  mutate(condition = case_when(\n    condition == \"Sto_WW_OT\" ~ \"Stocata_WW_OT\",\n    condition == \"Sto_WS_OT\" ~ \"Stocata_WS_OT\",\n    condition == \"Sto_WW_HS\" ~ \"Stocata_WW_HS\",\n    condition == \"Sto_WS_HS\" ~ \"Stocata_WS_HS\",\n    condition == \"Wen_WW_OT\" ~ \"Wendy_WW_OT\",\n    condition == \"Wen_WS_OT\" ~ \"Wendy_WS_OT\",\n    condition == \"Wen_WW_HS\" ~ \"Wendy_WW_HS\",\n    condition == \"Wen_WS_HS\" ~ \"Wendy_WS_HS\",\n    TRUE ~ condition  # Keep other values unchanged\n  )) %&gt;%\n  mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\")))\n\n\n\n\n6.2.4 Contribution of each variable related to other variable\n\n\nCode\ndf_physio_h2_v=df_physio_other_h2 %&gt;%\n  dplyr::select(-c(acronyme_analyse,position, storage_line, unit, analyse_by_plant, recolte,\n                   Flow,fda,Press, CO2R,RH_R)) %&gt;%  # not interesting data measured by lycor\n  pivot_longer(-c(plant_num,genotype,heat_condition,water_condition,condition,climat_condition),names_to = \"variable\",values_to = \"value\")\n\ncompile_result=as.data.frame(matrix(data=NA,nrow = 0, ncol = 8))\nfor (i in 1:length(levels(as.factor(df_physio_h2_v$variable)))){\n  variable_l_i=as.character(levels(as.factor(df_physio_h2_v$variable))[i])\n  cat( \"Variable:\" ,variable_l_i, \"\\n\")\n  \n  df_x= df_physio_h2_v  %&gt;% \n    filter(variable==variable_l_i) %&gt;% \n    drop_na(value)\n  \n  formula_string &lt;- as.formula(paste(\"value\", \"~\", paste(\"genotype\",\"*\",\"water_condition\",\"*\",\"heat_condition\", sep = \"\")))\n  \n  # Carry out ANOVA using the aov function\n  result_variable &lt;- aov(data = df_x, formula = formula_string)\n  anova_result=summary(result_variable)[[1]] %&gt;% mutate(R2 = `Sum Sq` / sum(`Sum Sq`))\n  \n  row_name&lt;-rownames(anova_result)\n  row_name &lt;- gsub(\"genotype\",\"Genotype\",row_name)\n  row_name &lt;- gsub(\"water_condition\",\"Water\",row_name)\n  row_name &lt;- gsub(\"heat_condition\",\"Heat\",row_name)\n  rownames(anova_result)&lt;-row_name\n  anova_result$variable=as.character(df_x$variable)[1]\n  compile_result=rbind(compile_result,anova_result)\n}\n\ncompile_result&lt;-compile_result %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column(\"contribution_variable\") %&gt;% \n  mutate(Significance = case_when(\n    `Pr(&gt;F)` &lt;= 0.001 ~ '***',\n    `Pr(&gt;F)` &lt; 0.01  ~ '**',\n    `Pr(&gt;F)` &lt; 0.05  ~ '*',\n    `Pr(&gt;F)` &lt; 0.1   ~ '.',\n    TRUE            ~ ' '\n  ))\n\ncompile_result=compile_result%&gt;% \n  filter(str_detect(contribution_variable, \"Total\", negate = TRUE)) %&gt;% \n  filter(str_detect(contribution_variable, \"Residual\", negate = TRUE)) %&gt;% \n  mutate(contribution_variable = str_replace_all(contribution_variable, \" \", \"\")) %&gt;% \n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"\\\\$\", \"\"))%&gt;%\n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"[0-9]\", \"\")) %&gt;% \n  mutate(contribution_variable = as.character(contribution_variable)) %&gt;% \n  mutate(fontcolor = ifelse(contribution_variable %in% c(\"Water\", \"Genotype:Water:Heat\"), \"#ffffff\", \"#000000\")) %&gt;% \n  mutate(contribution_variable=fct_relevel(contribution_variable,c(\"Genotype\",\"Water\",\"Heat\", \"Genotype:Water\",\"Genotype:Heat\",\"Water:Heat\",\"Genotype:Water:Heat\"))) %&gt;% \n  mutate(text_output=paste0(round(R2*100,0), \"% \", Significance))\n\nplot_contrib&lt;-ggplot(compile_result, aes(x = variable, y = R2, fill = contribution_variable)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = ifelse(R2 &gt; 0.02, text_output, \"\")), color = compile_result$fontcolor, position = position_stack(vjust = 0.5), size = 2.5)+\n  scale_fill_manual(values = c(\"#ffd166\", # geno\n                               \"#118ab2\", # water\n                               \"#ef476f\", # heat\n                               \"#06d6a0\", # watergeno\n                               \"#f78c6b\", # genoheat\n                               \"#FFB6C1\", # waterheat\n                               \"#333333\"),\n                    name = \"title of legend (contribution\") +# all\n  scale_y_continuous(labels = scales::percent_format())+\n  scale_color_identity()+\n  labs(x = \"Compartment\",\n       y = \"The relative contribution for the different variables (%)\",\n       ) +\n  theme_minimal()+\n  theme(panel.grid = element_blank(),\n        legend.title = element_blank(), # for delete title\n        axis.text.x = element_text(angle = 45,hjust = 1, vjust = 1),\n        axis.title.x = element_blank()\n  )+\n  coord_flip(); plot_contrib\n\nggsave(here::here(\"report/physio/plot/contribution_other.svg\"),plot_contrib, height = 16,width = 10)\n\n\n\n\n\n6.2.5 Photosynthesis and leaf water potential\n\n\nCode\ndf_physio_other_H2&lt;-read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(across(c(\"storage_line\",\"position\"), as.integer)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;% \n  mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;%  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;%\n#   dplyr::select(acronyme_analyse, water_condition, heat_condition, genotype, \"plant_num\" ,\"condition\",\"position\"   ,\"storage_line\"     ,\"unit\"  ,\"analyse_by_plant\", \"recolte\", #\"paire\",\"weight_stem\",\"weight_leaf\",\"weight_root\" ,\"leaf_area\", \"stem_area\", \"planimeter_leaf\", \"planimeter_stem\", \"SLA\", \"sum_biomass\") %&gt;% \n# #   dplyr::select(acronyme_analyse, water_condition, heat_condition, genotype, \"plant_num\" ,\"condition\",\"position\"   ,\"storage_line\"     ,\"unit\"  ,\"analyse_by_plant\", \"recolte\",\n# \"Hydric_potential\", \"Trmmol\",\"Tleaf\", \"Ci\",\"PARabs\",\"CO2S\",  \"PARo\", \"H2OS\",  \"AHs.Cs\",\"fda\",   \"vp_kPa\", \"Twall_K\",\"Tl.Ta\", \"CTair\", \"C2sfc\", \"SVTair\",\"h20diff\",\"Flow\",  \"Cond\",  \"Tair\", \"SVTleaf\",\"Press\", \"CO2R\",  \"RH_S\",  \"Trans\", \"Tair_K\",\"h2o_i\", \"VpdL\",  \"PARi\",  \"CndTotal\",\"Ci_Pa\", \"PhiCO2\",\"TBlk\",  \"Ci.Ca\", \"CTleaf\",\"CndCO2\",\"RHsfc\", \"R.W.m2.\",\"H2OR\", \"Photo\", \"RH_R\",  \"VpdA\") %&gt;% \n  drop_na(condition,recolte) %&gt;% \n  filter(recolte==2) \n\nFig_photo=stat_analyse(\n    data=df_physio_other_H2 %&gt;% \n      drop_na(climat_condition,Photo),\n    column_value = \"Photo\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = \"Photosynthesis µmol CO2 . m-2 . s-1\",\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig_LWP=stat_analyse(\n    data=df_physio_other_H2 %&gt;% \n      drop_na(climat_condition,Hydric_potential),\n    column_value = \"Hydric_potential\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = \"Leaf Water Potential (Mpa)\",\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig_SLA=stat_analyse(\n    data=df_physio_other_H2 %&gt;% \n      drop_na(climat_condition,SLA),\n    column_value = \"SLA\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = \"SLA (m²/kg)\",\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\npx=ggarrange(Fig_photo[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\"),Fig_LWP[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\"), Fig_SLA[[\"plot\"]]+labs(color=\"Treatment\",fill=\"Treatment\") ,ncol=3, nrow=1,common.legend = TRUE, legend=\"bottom\",labels = c(\"A\",\"B\",\"C\"),align='h')\npx\n\n#export to delet\npng(here::here(\"report/physio/plot/photo_lwp_sla.png\"), width = 19, height = 11, units = 'cm', res = 900)\ngrid.arrange (px) # Make plot\ndev.off()\n\n# test=df_physio_other_H2 %&gt;%drop_na(SLA) %&gt;% dplyr::select(plant_num,condition,leaf_scan,planimeter_leaf, leaf_area,weight_leaf,SLA) %&gt;% mutate(scan=ifelse(is.na(planimeter_leaf),\"scan\",\"planimeter\")) %&gt;% mutate(cond_type=paste0(condition,\"_\",scan)) %&gt;% \n# ggplot(aes(x=cond_type,y=leaf_area))+geom_boxplot()",
    "crumbs": [
      "**🌱 Ecophysiology**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rapid analysis of ecophysiological data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/0_preprocessing_root_architecture.html",
    "href": "report/root_architecture/0_preprocessing_root_architecture.html",
    "title": "7  Pre-processing of root architecture data",
    "section": "",
    "text": "7.1 Contexte\nSeedlings were grown in RhizoTubes® filled with sandy soil, allowing the visualization of the root system Jeudy et al. (2016)\nThe purpose of this script is to synthesize all my architecture data, to write all the import steps with the multiple specificities of the import. At the end, I will generate csv files of root architecture. Each file corresponds to a different type of data. For example, data per plant, per depth in the rhizotube etc.",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Pre-processing of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/0_preprocessing_root_architecture.html#contexte",
    "href": "report/root_architecture/0_preprocessing_root_architecture.html#contexte",
    "title": "7  Pre-processing of root architecture data",
    "section": "",
    "text": "Figure 7.1: The RhizoTube. The RhizoTube (a) is composed of concentrical tubes (an outer transparent PMA tube, an inner inox tubes) tighted together to the bottom and upper parts of RhizoTubes thanks to an axe, a bottom bolt and an upper star shaped tighting piece (b). Nutri solution supplied by the top (b) of the RhizoTube flows within the RhizoTube to the substrate, filled in between the inner tube and a membrane, permeable to nutrients, water and microbes but not to plant roots. This membrane has been tinted in blue with physiological inert ink to avoid any interference with plant growth. The seeds are placed at the top of the RhizoTube (c) and the plant root grows in its root propagation area (c) defined as the space between the outer transparent tube and the membrane. RhizoTubes are installed on conveyors thanks to a special adapted basis, which contains a unique RFID per Rhizotubes. From Jeudy et al. (2016).",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Pre-processing of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/0_preprocessing_root_architecture.html#data-importation",
    "href": "report/root_architecture/0_preprocessing_root_architecture.html#data-importation",
    "title": "7  Pre-processing of root architecture data",
    "section": "7.2 Data importation",
    "text": "7.2 Data importation\n\n\n\n\n\n\nThe raw data from machine learning is not included in this book because the file is over 9 GB.\n\n\n\n\n\n\n\n7.2.1 For machine learning segmentation\n\n\nCode\n#add/ extracte info to/ from data warning !!! is too slow\ninput_folder=\"result_v3bis\"\ninput_folder=\"results_v3\"\ninput_folder=\"result_v3_for_skull\"\ninput_folder=\"result_v4\"\ninput_folder=\"result_v5\"\ninput_folder_version=\"result_soybean_v6\"\n\n #!!!!!!!!!!!!!!!!!!!!!!!!!\n#data_importation_root_architecture(input_folder)\ndata_importation_root_architecture_v2(input_folder_version)\n#!!!!!!!!!!!!!!!!!!!!!!!!!\n\nggplot(data=df_global_archi_info, aes(x=shooting_date, y=volume, col= climat_condition))+geom_point()\n\n\nI’ve gone through this stage, and here are the results.\n\n\nCode\ninput_folder_version=\"result_soybean_v6\"\nroot_archi=read.csv(here::here(paste0(\"data/root/\",input_folder_version,\"/root_architecture_co_\",input_folder_version,\".csv\"))) %&gt;%  # import data previously create\n mutate(taskid=substr(taskid,1,nchar(taskid))) %&gt;% \n   mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\"))) %&gt;% \n   mutate(plant_num_taskid=paste(sep=\"_\",plant_num,taskid)) %&gt;% \n   filter(is.na(induct_error_root_architecture))\n\n\nNext step, cleaning of the data root architecture for verficiation number of data\n\n\nCode\nroot_archi_net=root_archi %&gt;% drop_na(root, shooting_date)\n\n\n\n\n7.2.2 Verification if have all the plant or duplicate results\n\n\nCode\nlist_taskid_post_analyse=levels(as.factor(root_archi_net$taskid))\n#source(here::here(\"xp1_analyse/rapport/root_architecture/function/verif_nb_data.R\")) #may be i need to verify this data\n\n\nI have some wird result why ? Because i have some duplicate value\n\n\nCode\nroot_archi_net %&gt;% filter(taskid==28480) %&gt;% filter(plant_num==102) #OK, no problem, the same 102 in duplicate. \n\ndf_verif=root_archi_net %&gt;% filter(taskid==28504)   #for taskid 28504 the 1099 is missing\n\ndf_verif=root_archi_net %&gt;% filter(taskid==28510) %&gt;% filter(plant_num%in% c(105, 105 , 106 ,107 ,108 ,109,110)) #OK, no problem, same dublicats.\n\ndf_verif=root_archi_net %&gt;% filter(taskid==28525) %&gt;% filter(plant_num%in% c(103,104)) #OK, no problem, same dublicats.\n\ndf_verif=root_archi_net %&gt;% filter(taskid==28627) %&gt;% filter(plant_num%in% c(103,104)) #OK, no problem, same dublicats.\n\ndf_verif=root_archi_net %&gt;% filter(taskid==28752) %&gt;% filter(plant_num%in% c(103,104)) #OK, no problem, same dublicats.\n\n\nThen I delete the possible duplicates by using a taskid plant num column. I checked manually that I had the same data\n\n\nCode\nroot_archi_net=root_archi_net %&gt;% \n  mutate(for_del_duplicated_data=paste(sep=\"_\",taskid,plant_num)) %&gt;% \n  distinct(for_del_duplicated_data, .keep_all = TRUE) %&gt;% \n  dplyr::select( -one_of(\"for_del_duplicated_data\"))\n\n\nI run the loop again to see if I don’t have duplicate problems or forgotten images.\n\n\nCode\n#source(here::here(\"xp1_analyse/rapport/root_architecture/function/verif_nb_data.R\"))\n\n\nI apply this modification to the original dataframe because everithong is fine\n\n\nCode\nroot_archi=root_archi_net %&gt;% \n  mutate(for_del_duplicated_data=paste(sep=\"_\",taskid,plant_num)) %&gt;% \n  distinct(for_del_duplicated_data, .keep_all = TRUE) %&gt;% \n  dplyr::select( -one_of(\"for_del_duplicated_data\"))\n\n\nI look briefly if everything worked with a graphic visualization.\n\n\nCode\nroot_test=root_archi %&gt;% filter(shooting_date==\"2021-10-11\") %&gt;% filter(recolte==2) %&gt;%\n#root_test=root_archi %&gt;% filter(shooting_date==\"2021-09-22\") %&gt;% filter(recolte==2) %&gt;%  \n  drop_na(length_skull)\n\nplot_x=stat_analyse(\n    data=root_test %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,surface),\n    column_value = \"surface\", #surface # volume\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"Root surface area (cm²)\"),\n  control_conditions = c(\"WW_OT\"),\n  hex_pallet = climate_pallet\n)\nggsave(here::here(\"report/root_architecture/plot/root_surface.svg\"), plot_x[[\"plot\"]], height = 4,width = 5)\n\n\n\n\n\n7.2.3 For Root Tips\n\n\nCode\npath_input_data=\"data/root/root_tips_and_angles/\"\ntaskids=c(\"28675\",\"28688\")\n\n\nImport and refocus all root with function clean_csv_root_tips\n\n\nCode\n#can be easier if I start with all the root architecture data and then add the information. \n#collect all coo \ncoo_root_tips_merged=as.data.frame(matrix(data=NA, ncol = 6,nrow = 0)) ; colnames(coo_root_tips_merged)=c(\"taskid\",\"Label\"   , \"XM\"     ,\"YM\", \"X_calc\", \"Y_calc\")\nfor (taskid in taskids){\n  name_folder=paste0(\"csv_pointes_\",taskid)\n  path=here::here(paste0(path_input_data,name_folder))\n  file_names=list.files(path,pattern=\"csv\")\n  for (i in 1:length(file_names)){\n    coo_root_tips_merged=rbind(coo_root_tips_merged,clean_csv_root_tips(file_names[i]))\n  }\n}\n\n#extract date and time\ncoo_root_tips_merged$date_shooting=str_split_i(coo_root_tips_merged$Label,\"_\",16)\ncoo_root_tips_merged$time_shooting=gsub(str_split_i(coo_root_tips_merged$Label,\"_\",17), pattern=\".png$\", replacement=\"\")\n\n\nMerge with plant info\n\n\nCode\n#merge with df plant_info for all data \ncoo_root_tips_merged=merge(coo_root_tips_merged, plant_info %&gt;% dplyr::select(plant_num, condition,genotype, water_condition, heat_condition), all=T, by=\"plant_num\")\ncoo_root_tips_merged$climat_condition=paste(sep=\"_\",coo_root_tips_merged$water_condition,coo_root_tips_merged$heat_condition)\n\n#delet plant without root position\ncoo_root_tips_select=coo_root_tips_merged %&gt;% drop_na(Label)\n\n\n\n\n160 plant are missing. So far we have counted 51839 root tips. From task: \n\n\n28675 28688\n\n\nMissing value: \n\n\ninteger(0)\n\n\n\n\n7.2.4 For root angles\ncreate function who check :\n\nCheck that the first line is a pivot. NAN for side and for small_root. ok\nCheck that each column has the same number of data (sometimes there is not the same number, happens in very rare cases because of the imagej macro) by using yes no in column small_root (again with coordinate)\n\nCheck that there are no problems during the import\n\n\nCode\nfor (taskid in taskids){\n  name_folder=paste0(\"csv_angles_\",taskid)\n  path=here::here(paste0(path_input_data,name_folder))\n  file_names=list.files(path,pattern=\"csv\")\n  for (i in 1:length(file_names)){\n    check_csv_root_angle(file_names[i])\n  }\n}\n\n\nCombine data\n\n\nCode\ncoo_root_angle_merged=as.data.frame(matrix(data=NA, ncol = 45,nrow = 0))\ncolnames(coo_root_angle_merged)=c(\"branching\",\"side\",\"small_root\",\"Angle_ABC\",\"Angle_CBD\",\"XA\",\"YA\",\"XB\",\"YB\",\"XC\",\"YC\",\"XD\",\"YD\",\"XC2\",\"YC2\",\"XD2\",\"YD2\",\"AB\",\"BC\",\"BD\",\"CD\",\"BC2\",\"BD2\",\"C2D2\",\"Angle_ABD\", \"Angle_ABC2\" ,\"Angle_C2BD2\", \"Label\",\"Circle\",\"Size_pixel\",\"plant_num\",\"taskid\",\n                                  \"XA_calc\",\"YA_calc\",\n                                  \"XB_calc\",\"YB_calc\",\n                                  \"XC_calc\",\"YC_calc\",\n                                  \"XD_calc\",\"YD_calc\",\n                                  \"XC2_calc\",\"YC2_calc\",\n                                  \"XD2_calc\",\"YD2_calc\",\"namefile\"\n                                  )\nfor (taskid in taskids){\n  name_folder=paste0(\"csv_angles_\",taskid)\n  path=here::here(paste0(path_input_data,name_folder))\n  file_names=list.files(path,pattern=\"csv\")\n  for (i in 1:length(file_names)){\n    # print(file_names[i])\n    coo_root_angle_merged=rbind(coo_root_angle_merged,combine_csv_root_angle(file_names[i]))\n  }\n}\n\n#extract date and time\ncoo_root_angle_merged$date_shooting=str_split_i(coo_root_angle_merged$Label,\"_\",16)\ncoo_root_angle_merged$time_shooting=gsub(str_split_i(coo_root_angle_merged$Label,\"_\",17), pattern=\".png$\", replacement=\"\")\n\n\nMerge with plant info\n\n\nCode\n#merge with df plant_info for all data \ncoo_root_angle_merged=merge(coo_root_angle_merged, plant_info %&gt;% dplyr::select(plant_num, condition,genotype, water_condition, heat_condition,analyse_by_plant), all=T, by=\"plant_num\")\ncoo_root_angle_merged$climat_condition=paste(sep=\"_\",coo_root_angle_merged$water_condition,coo_root_angle_merged$heat_condition)\n\n#delet plant without root position\ncoo_root_angle_select=coo_root_angle_merged %&gt;% drop_na(Label)",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Pre-processing of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/0_preprocessing_root_architecture.html#check-for-possible-measurement-errors",
    "href": "report/root_architecture/0_preprocessing_root_architecture.html#check-for-possible-measurement-errors",
    "title": "7  Pre-processing of root architecture data",
    "section": "7.3 Check for possible measurement errors",
    "text": "7.3 Check for possible measurement errors\n\n7.3.1 For root tips\n\n7.3.1.1 Number of plants per condition\n\n\nCode\ncoo_root_tips_select_n&lt;-aggregate(data.frame(number_of_root_tips=coo_root_tips_select$plant_num), \n                                  by = list(\n                                    genotype=coo_root_tips_select$genotype,\n                                    climat_condition=coo_root_tips_select$climat_condition,\n                                    water_condition=coo_root_tips_select$water_condition,\n                                    heat_condition=coo_root_tips_select$heat_condition,\n                                    condition=coo_root_tips_select$condition,\n                                    plant_num=coo_root_tips_select$plant_num\n                                    ),length)\n\ncoo_root_tips_select_n2&lt;-aggregate(data.frame(number_of_plant=coo_root_tips_select_n$plant_num), \n                                  by = list(\n                                    genotype=coo_root_tips_select_n$genotype,\n                                    climat_condition=coo_root_tips_select_n$climat_condition,\n                                    water_condition=coo_root_tips_select_n$water_condition,\n                                    heat_condition=coo_root_tips_select_n$heat_condition,\n                                    condition=coo_root_tips_select_n$condition\n                                    ),length)\n\n\n# constants ----\nn = 0\nc_col = c(\"#ffffff\",\"#d0ded8\",\"#85aa9b\", \"#588b76\" ,\"#18392b\")\nc_col=paletteer::paletteer_dynamic(\"cartography::green.pal\", 20)%&gt;% as.character()# test\nc_col=c(\"#ffffff\",c_col)\n\nc_col_light_blue = c(\"#edf2fb\", \"#e2eafc\", \"#d7e3fc\", \"#ccdbfd\", \"#c1d3fe\")\nc_container_width = px(1000)\nc_table_width = px(800)\nc_rn = 30\nc_save = TRUE\nc_format = \"html\"\n\n# show data sorted by condition ----\ngt_table &lt;- coo_root_tips_select_n2 %&gt;% \n  mutate_if(is.factor,as.character) %&gt;% \n  dplyr::arrange(climat_condition,condition) %&gt;% \n  dplyr::select(\"condition\",\"genotype\",\"water_condition\", \"heat_condition\",\"number_of_plant\") %&gt;% \n   gt(\n  #groupname_col = \"condition\"\n   )  %&gt;%\n  data_color(\n    columns = c(number_of_plant),\n    colors = scales::col_numeric(\n      palette = c_col,\n      domain = c(max(coo_root_tips_select_n2$number_of_plant),min(coo_root_tips_select_n2$number_of_plant))\n    )\n  ) %&gt;% \n  tab_options(heading.subtitle.font.size = 12,\n              column_labels.border.bottom.width= px(3)\n              )\ngt_table\n\n\n\n\n\n\n\n\ncondition\ngenotype\nwater_condition\nheat_condition\nnumber_of_plant\n\n\n\n\nSto_WS_HS\nStocata\nWS\nHS\n15\n\n\nWen_WS_HS\nWendy\nWS\nHS\n16\n\n\nSto_WS_OT\nStocata\nWS\nOT\n9\n\n\nWen_WS_OT\nWendy\nWS\nOT\n8\n\n\nSto_WW_HS\nStocata\nWW\nHS\n21\n\n\nWen_WW_HS\nWendy\nWW\nHS\n20\n\n\nSto_WW_OT\nStocata\nWW\nOT\n8\n\n\nWen_WW_OT\nWendy\nWW\nOT\n7\n\n\n\n\n\n\n\n\n\n7.3.1.2 By plant for root tips\n\n\nCode\n# constants ----\nn = 0\nc_col = c(\"#ffffff\",\"#d0ded8\",\"#85aa9b\", \"#588b76\" ,\"#18392b\")\nc_col=paletteer::paletteer_dynamic(\"cartography::green.pal\", 20)%&gt;% as.character()# test\nc_col=c(\"#ffffff\",c_col)\n\nc_col_light_blue = c(\"#edf2fb\", \"#e2eafc\", \"#d7e3fc\", \"#ccdbfd\", \"#c1d3fe\")\nc_container_width = px(1000)\nc_table_width = px(800)\nc_rn = 30\nc_save = TRUE\nc_format = \"html\"\n\n# show data sorted by condition ----\ngt_table &lt;- coo_root_tips_select_n %&gt;% \n  mutate_if(is.factor,as.character) %&gt;% \n  dplyr::arrange(climat_condition,condition,plant_num) %&gt;% \n  dplyr::select(\"plant_num\",\"condition\",\"genotype\",\"water_condition\", \"heat_condition\",\"number_of_root_tips\") %&gt;% \n  gt(\n    groupname_col = \"condition\",\n    rowname_col = \"plant_num\"\n  )  %&gt;%\n  data_color(\n    columns = c(number_of_root_tips),\n    colors = scales::col_numeric(\n      palette = c_col,\n      domain = c(max(coo_root_tips_select_n$number_of_root_tips),min(coo_root_tips_select_n$number_of_root_tips))\n    )\n  ) %&gt;% \n  tab_options(heading.subtitle.font.size = 10,\n              column_labels.border.bottom.width= px(3)\n              )\ngt_table\n\n\n\n\n\n\n\n\n\ngenotype\nwater_condition\nheat_condition\nnumber_of_root_tips\n\n\n\n\nSto_WS_HS\n\n\n1026\nStocata\nWS\nHS\n348\n\n\n1038\nStocata\nWS\nHS\n219\n\n\n1042\nStocata\nWS\nHS\n75\n\n\n1046\nStocata\nWS\nHS\n193\n\n\n1050\nStocata\nWS\nHS\n199\n\n\n1058\nStocata\nWS\nHS\n149\n\n\n1062\nStocata\nWS\nHS\n127\n\n\n1074\nStocata\nWS\nHS\n170\n\n\n1076\nStocata\nWS\nHS\n227\n\n\n1082\nStocata\nWS\nHS\n246\n\n\n1092\nStocata\nWS\nHS\n191\n\n\n1106\nStocata\nWS\nHS\n168\n\n\n1108\nStocata\nWS\nHS\n210\n\n\n1120\nStocata\nWS\nHS\n245\n\n\n1130\nStocata\nWS\nHS\n300\n\n\nWen_WS_HS\n\n\n1021\nWendy\nWS\nHS\n288\n\n\n1022\nWendy\nWS\nHS\n246\n\n\n1024\nWendy\nWS\nHS\n319\n\n\n1034\nWendy\nWS\nHS\n279\n\n\n1048\nWendy\nWS\nHS\n350\n\n\n1052\nWendy\nWS\nHS\n239\n\n\n1060\nWendy\nWS\nHS\n327\n\n\n1072\nWendy\nWS\nHS\n240\n\n\n1078\nWendy\nWS\nHS\n280\n\n\n1088\nWendy\nWS\nHS\n256\n\n\n1096\nWendy\nWS\nHS\n260\n\n\n1100\nWendy\nWS\nHS\n300\n\n\n1104\nWendy\nWS\nHS\n278\n\n\n1114\nWendy\nWS\nHS\n301\n\n\n1116\nWendy\nWS\nHS\n276\n\n\n1124\nWendy\nWS\nHS\n307\n\n\nSto_WS_OT\n\n\n26\nStocata\nWS\nOT\n409\n\n\n38\nStocata\nWS\nOT\n389\n\n\n42\nStocata\nWS\nOT\n570\n\n\n46\nStocata\nWS\nOT\n341\n\n\n50\nStocata\nWS\nOT\n620\n\n\n58\nStocata\nWS\nOT\n452\n\n\n62\nStocata\nWS\nOT\n452\n\n\n74\nStocata\nWS\nOT\n620\n\n\n76\nStocata\nWS\nOT\n361\n\n\nWen_WS_OT\n\n\n22\nWendy\nWS\nOT\n476\n\n\n24\nWendy\nWS\nOT\n585\n\n\n34\nWendy\nWS\nOT\n558\n\n\n48\nWendy\nWS\nOT\n399\n\n\n52\nWendy\nWS\nOT\n551\n\n\n60\nWendy\nWS\nOT\n670\n\n\n72\nWendy\nWS\nOT\n566\n\n\n78\nWendy\nWS\nOT\n505\n\n\nSto_WW_HS\n\n\n1005\nStocata\nWW\nHS\n1945\n\n\n1006\nStocata\nWW\nHS\n499\n\n\n1009\nStocata\nWW\nHS\n563\n\n\n1010\nStocata\nWW\nHS\n264\n\n\n1017\nStocata\nWW\nHS\n526\n\n\n1018\nStocata\nWW\nHS\n581\n\n\n1028\nStocata\nWW\nHS\n677\n\n\n1032\nStocata\nWW\nHS\n459\n\n\n1040\nStocata\nWW\nHS\n286\n\n\n1054\nStocata\nWW\nHS\n524\n\n\n1066\nStocata\nWW\nHS\n671\n\n\n1070\nStocata\nWW\nHS\n351\n\n\n1080\nStocata\nWW\nHS\n559\n\n\n1086\nStocata\nWW\nHS\n428\n\n\n1094\nStocata\nWW\nHS\n453\n\n\n1102\nStocata\nWW\nHS\n710\n\n\n1110\nStocata\nWW\nHS\n621\n\n\n1122\nStocata\nWW\nHS\n607\n\n\n1128\nStocata\nWW\nHS\n331\n\n\n1134\nStocata\nWW\nHS\n663\n\n\n1140\nStocata\nWW\nHS\n507\n\n\nWen_WW_HS\n\n\n1003\nWendy\nWW\nHS\n603\n\n\n1004\nWendy\nWW\nHS\n760\n\n\n1015\nWendy\nWW\nHS\n342\n\n\n1016\nWendy\nWW\nHS\n449\n\n\n1019\nWendy\nWW\nHS\n728\n\n\n1020\nWendy\nWW\nHS\n495\n\n\n1030\nWendy\nWW\nHS\n529\n\n\n1036\nWendy\nWW\nHS\n646\n\n\n1044\nWendy\nWW\nHS\n634\n\n\n1056\nWendy\nWW\nHS\n742\n\n\n1064\nWendy\nWW\nHS\n662\n\n\n1084\nWendy\nWW\nHS\n623\n\n\n1090\nWendy\nWW\nHS\n536\n\n\n1098\nWendy\nWW\nHS\n547\n\n\n1112\nWendy\nWW\nHS\n594\n\n\n1118\nWendy\nWW\nHS\n377\n\n\n1126\nWendy\nWW\nHS\n614\n\n\n1132\nWendy\nWW\nHS\n590\n\n\n1138\nWendy\nWW\nHS\n611\n\n\n1144\nWendy\nWW\nHS\n780\n\n\nSto_WW_OT\n\n\n10\nStocata\nWW\nOT\n745\n\n\n18\nStocata\nWW\nOT\n572\n\n\n28\nStocata\nWW\nOT\n932\n\n\n32\nStocata\nWW\nOT\n793\n\n\n40\nStocata\nWW\nOT\n763\n\n\n54\nStocata\nWW\nOT\n706\n\n\n6\nStocata\nWW\nOT\n874\n\n\n70\nStocata\nWW\nOT\n928\n\n\nWen_WW_OT\n\n\n16\nWendy\nWW\nOT\n706\n\n\n20\nWendy\nWW\nOT\n668\n\n\n30\nWendy\nWW\nOT\n777\n\n\n36\nWendy\nWW\nOT\n719\n\n\n4\nWendy\nWW\nOT\n799\n\n\n56\nWendy\nWW\nOT\n715\n\n\n68\nWendy\nWW\nOT\n918\n\n\n\n\n\n\n\n\n\n7.3.1.3 Visualisation error\n\n\nCode\np1=ggplot(data=coo_root_tips_select,aes(x=X_calc,y=Y_calc,col=climat_condition))+geom_point(alpha=.3, size=.2)+scale_y_continuous(trans = \"reverse\")\n#png(\"global_results_20211011_roots_tips.png\", width = 50, height = 24, units = 'cm', res = 600)\nggMarginal(p1, type = \"density\", groupFill = TRUE)\n\n\n\n\n\n\n\n\n\nCode\n#ggplotly(p1,tooltip=c(\"X_calc\",\"Y_calc\",\"climat_condition\",\"text\"))\n\n\n\n\n\n7.3.2 For root angle\n\n7.3.2.1 Number of plants per condition\n\n\nCode\ncoo_root_angle_select_n&lt;-aggregate(data.frame(number_of_root_angle=coo_root_angle_select$plant_num), \n                                  by = list(\n                                    genotype=coo_root_angle_select$genotype,\n                                    climat_condition=coo_root_angle_select$climat_condition,\n                                    water_condition=coo_root_angle_select$water_condition,\n                                    heat_condition=coo_root_angle_select$heat_condition,\n                                    condition=coo_root_angle_select$condition,\n                                    plant_num=coo_root_angle_select$plant_num,\n                                    analyse_by_plant=coo_root_angle_select$analyse_by_plant\n                                    ),length)\n\ncoo_root_angle_select_n2&lt;-aggregate(data.frame(number_of_plant=coo_root_angle_select_n$plant_num), \n                                  by = list(\n                                    genotype=coo_root_angle_select_n$genotype,\n                                    climat_condition=coo_root_angle_select_n$climat_condition,\n                                    water_condition=coo_root_angle_select_n$water_condition,\n                                    heat_condition=coo_root_angle_select_n$heat_condition,\n                                    condition=coo_root_angle_select_n$condition,\n                                    analyse_by_plant=coo_root_angle_select_n$analyse_by_plant\n                                    ),length)\n\ngt_table_angle &lt;- coo_root_angle_select_n2 %&gt;% \n  mutate_if(is.factor,as.character) %&gt;% \n  dplyr::arrange(climat_condition,condition) %&gt;% \n  dplyr::select(\"condition\",\"genotype\",\"water_condition\", \"heat_condition\",\"number_of_plant\",\"analyse_by_plant\") %&gt;% \n   gt(\n  #groupname_col = \"condition\"\n   )  %&gt;%\n  data_color(\n    columns = c(number_of_plant),\n    colors = scales::col_numeric(\n      palette = c_col,\n      domain = c(max(coo_root_angle_select_n2$number_of_plant),min(coo_root_angle_select_n2$number_of_plant))\n    )\n  ) %&gt;% \n  tab_options(heading.subtitle.font.size = 12,\n              column_labels.border.bottom.width= px(3)\n              )\ngt_table_angle\n\n\n\n\n\n\n\n\ncondition\ngenotype\nwater_condition\nheat_condition\nnumber_of_plant\nanalyse_by_plant\n\n\n\n\nSto_WS_HS\nStocata\nWS\nHS\n7\nBM\n\n\nSto_WS_HS\nStocata\nWS\nHS\n2\nJav\n\n\nWen_WS_HS\nWendy\nWS\nHS\n8\nBM\n\n\nWen_WS_HS\nWendy\nWS\nHS\n1\nJav\n\n\nSto_WS_OT\nStocata\nWS\nOT\n8\nBM\n\n\nWen_WS_OT\nWendy\nWS\nOT\n8\nBM\n\n\nSto_WW_HS\nStocata\nWW\nHS\n7\nBM\n\n\nSto_WW_HS\nStocata\nWW\nHS\n1\nEco\n\n\nSto_WW_HS\nStocata\nWW\nHS\n2\nExud\n\n\nSto_WW_HS\nStocata\nWW\nHS\n1\nJav\n\n\nWen_WW_HS\nWendy\nWW\nHS\n8\nBM\n\n\nWen_WW_HS\nWendy\nWW\nHS\n1\nEco\n\n\nWen_WW_HS\nWendy\nWW\nHS\n1\nExud\n\n\nWen_WW_HS\nWendy\nWW\nHS\n1\nJav\n\n\nSto_WW_OT\nStocata\nWW\nOT\n7\nBM\n\n\nSto_WW_OT\nStocata\nWW\nOT\n2\nJav\n\n\nWen_WW_OT\nWendy\nWW\nOT\n7\nBM\n\n\nWen_WW_OT\nWendy\nWW\nOT\n3\nJav\n\n\n\n\n\n\n\n\n\n7.3.2.2 By plant num\n\n\nCode\ngt_table_angle &lt;- coo_root_angle_select_n %&gt;% \n  mutate_if(is.factor,as.character) %&gt;% \n  dplyr::arrange(climat_condition,condition,plant_num) %&gt;% \n  dplyr::select(\"plant_num\",\"condition\",\"genotype\",\"water_condition\", \"heat_condition\",\"number_of_root_angle\",\"analyse_by_plant\") %&gt;% \n  gt(\n    groupname_col = \"condition\",\n    rowname_col = \"plant_num\"\n  )  %&gt;%\n  data_color(\n    columns = c(number_of_root_angle),\n    colors = scales::col_numeric(\n      palette = c_col,\n      domain = c(max(coo_root_angle_select_n$number_of_root_angle),min(coo_root_angle_select_n$number_of_root_angle))\n    )\n  ) %&gt;% \n  tab_options(heading.subtitle.font.size = 10,\n              column_labels.border.bottom.width= px(3)\n              )\ngt_table_angle\n\n\n\n\n\n\n\n\n\ngenotype\nwater_condition\nheat_condition\nnumber_of_root_angle\nanalyse_by_plant\n\n\n\n\nSto_WS_HS\n\n\n1026\nStocata\nWS\nHS\n284\nBM\n\n\n1046\nStocata\nWS\nHS\n178\nJav\n\n\n1050\nStocata\nWS\nHS\n173\nBM\n\n\n1062\nStocata\nWS\nHS\n170\nBM\n\n\n1076\nStocata\nWS\nHS\n250\nBM\n\n\n1092\nStocata\nWS\nHS\n204\nBM\n\n\n1106\nStocata\nWS\nHS\n183\nBM\n\n\n1120\nStocata\nWS\nHS\n275\nBM\n\n\n1130\nStocata\nWS\nHS\n286\nJav\n\n\nWen_WS_HS\n\n\n1022\nWendy\nWS\nHS\n262\nJav\n\n\n1024\nWendy\nWS\nHS\n307\nBM\n\n\n1034\nWendy\nWS\nHS\n276\nBM\n\n\n1048\nWendy\nWS\nHS\n438\nBM\n\n\n1072\nWendy\nWS\nHS\n224\nBM\n\n\n1078\nWendy\nWS\nHS\n265\nBM\n\n\n1088\nWendy\nWS\nHS\n261\nBM\n\n\n1100\nWendy\nWS\nHS\n296\nBM\n\n\n1104\nWendy\nWS\nHS\n315\nBM\n\n\nSto_WS_OT\n\n\n26\nStocata\nWS\nOT\n412\nBM\n\n\n38\nStocata\nWS\nOT\n473\nBM\n\n\n42\nStocata\nWS\nOT\n529\nBM\n\n\n62\nStocata\nWS\nOT\n466\nBM\n\n\n76\nStocata\nWS\nOT\n323\nBM\n\n\n92\nStocata\nWS\nOT\n441\nBM\n\n\n106\nStocata\nWS\nOT\n515\nBM\n\n\n120\nStocata\nWS\nOT\n495\nBM\n\n\nWen_WS_OT\n\n\n24\nWendy\nWS\nOT\n577\nBM\n\n\n34\nWendy\nWS\nOT\n650\nBM\n\n\n48\nWendy\nWS\nOT\n470\nBM\n\n\n72\nWendy\nWS\nOT\n431\nBM\n\n\n88\nWendy\nWS\nOT\n458\nBM\n\n\n100\nWendy\nWS\nOT\n694\nBM\n\n\n104\nWendy\nWS\nOT\n439\nBM\n\n\n116\nWendy\nWS\nOT\n788\nBM\n\n\nSto_WW_HS\n\n\n1006\nStocata\nWW\nHS\n617\nExud\n\n\n1010\nStocata\nWW\nHS\n358\nExud\n\n\n1018\nStocata\nWW\nHS\n693\nBM\n\n\n1028\nStocata\nWW\nHS\n646\nBM\n\n\n1032\nStocata\nWW\nHS\n590\nJav\n\n\n1039\nStocata\nWW\nHS\n614\nEco\n\n\n1040\nStocata\nWW\nHS\n458\nBM\n\n\n1066\nStocata\nWW\nHS\n670\nBM\n\n\n1080\nStocata\nWW\nHS\n567\nBM\n\n\n1094\nStocata\nWW\nHS\n492\nBM\n\n\n1110\nStocata\nWW\nHS\n691\nBM\n\n\nWen_WW_HS\n\n\n1004\nWendy\nWW\nHS\n872\nJav\n\n\n1016\nWendy\nWW\nHS\n512\nExud\n\n\n1020\nWendy\nWW\nHS\n597\nBM\n\n\n1030\nWendy\nWW\nHS\n640\nBM\n\n\n1036\nWendy\nWW\nHS\n783\nEco\n\n\n1044\nWendy\nWW\nHS\n721\nBM\n\n\n1056\nWendy\nWW\nHS\n562\nBM\n\n\n1084\nWendy\nWW\nHS\n698\nBM\n\n\n1098\nWendy\nWW\nHS\n604\nBM\n\n\n1112\nWendy\nWW\nHS\n685\nBM\n\n\n1132\nWendy\nWW\nHS\n591\nBM\n\n\nSto_WW_OT\n\n\n10\nStocata\nWW\nOT\n756\nJav\n\n\n18\nStocata\nWW\nOT\n743\nBM\n\n\n28\nStocata\nWW\nOT\n1072\nBM\n\n\n32\nStocata\nWW\nOT\n881\nJav\n\n\n40\nStocata\nWW\nOT\n801\nBM\n\n\n54\nStocata\nWW\nOT\n644\nBM\n\n\n94\nStocata\nWW\nOT\n732\nBM\n\n\n110\nStocata\nWW\nOT\n670\nBM\n\n\n128\nStocata\nWW\nOT\n659\nBM\n\n\nWen_WW_OT\n\n\n4\nWendy\nWW\nOT\n703\nJav\n\n\n16\nWendy\nWW\nOT\n808\nBM\n\n\n20\nWendy\nWW\nOT\n850\nBM\n\n\n30\nWendy\nWW\nOT\n927\nBM\n\n\n36\nWendy\nWW\nOT\n851\nJav\n\n\n56\nWendy\nWW\nOT\n851\nBM\n\n\n84\nWendy\nWW\nOT\n842\nBM\n\n\n112\nWendy\nWW\nOT\n820\nBM\n\n\n126\nWendy\nWW\nOT\n1239\nJav\n\n\n132\nWendy\nWW\nOT\n720\nBM\n\n\n\n\n\n\n\n\n\n7.3.2.3 Visualisation error\n\n\nCode\np2=ggplot(data=coo_root_angle_select,aes(x=XB_calc,y=YB_calc,col=condition))+geom_point(alpha=.3, size=.2)+scale_y_continuous(trans = \"reverse\")\n#png(\"global_results_20211011_roots_tips.png\", width = 50, height = 24, units = 'cm', res = 600)\nggMarginal(p2, type = \"density\", groupFill = TRUE)\n\n\n\n\n\n\n\n\n\nCode\np3=ggplot(data=coo_root_angle_select,aes(x=XB_calc,y=YB_calc,col=as.factor(branching)))+geom_point(alpha=.3, size=1)+scale_y_continuous(trans = \"reverse\")+facet_grid(genotype~climat_condition,scales = \"fixed\")\n#png(\"global_results_20211011_roots_tips.png\", width = 50, height = 24, units = 'cm', res = 600)\np3",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Pre-processing of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/0_preprocessing_root_architecture.html#conversion-of-depth-in-cm-and-export",
    "href": "report/root_architecture/0_preprocessing_root_architecture.html#conversion-of-depth-in-cm-and-export",
    "title": "7  Pre-processing of root architecture data",
    "section": "7.4 Conversion of depth in cm and export",
    "text": "7.4 Conversion of depth in cm and export\n\n\nCode\nconvert_in_cm&lt;-function(input,size_pixel_depth=0.0044 ){ #*0.0040*0.0044    .... 0.0044 pour y\n  input*size_pixel_depth\n}\n  \ncoo_root_angle_select=coo_root_angle_select %&gt;%\n  mutate_at(.vars = vars(YA_calc , YB_calc , YC_calc , YD_calc , YC2_calc,YD2_calc),\n            .funs = funs(cm = convert_in_cm(.)))\n\ncoo_root_tips_select=coo_root_tips_select %&gt;%\n  mutate_at(.vars = vars(Y_calc),\n            .funs = funs(cm = convert_in_cm(.)))\n\nwrite.csv(coo_root_angle_select,here::here(\"data/root/output/coo_root_angle_select.csv\"))\nwrite.csv(coo_root_tips_select,here::here(\"data/root/output/coo_root_tips_select.csv\"))\n\n\n\n7.4.1 Combine for export all data frame by plant_num and date\n\n\nCode\nsum_tips_10000&lt;-coo_root_tips_select %&gt;%\n  filter(YM&lt;10000) %&gt;% \n  filter(plant_num!=1005) %&gt;%  #I have filtered so that I do not take the values below 10000 pixel (depending on the coordinates of YB). That is to say 41,66 cm of depth.  \n  group_by(condition,heat_condition,water_condition,genotype,plant_num,taskid) %&gt;% \n  dplyr::summarise(sum_nb_tips_10000 = n()) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\"))) %&gt;% \n  mutate(plant_num_taskid=paste(sep=\"_\",plant_num, taskid)) %&gt;% \n  as.data.frame()\n\n#distance mean\ndistance_mean_branching&lt;-coo_root_angle_select %&gt;%\n  mutate(across( c(branching, plant_num), as.factor) )  %&gt;% \n  filter(YB&lt;10000) %&gt;% \n  group_by(condition,heat_condition,water_condition,genotype,plant_num,branching,taskid) %&gt;% \n  dplyr::summarise(across(Angle_ABC:Angle_C2BD2, mean,na.rm=T,.names = \"{.col}_mean\")) %&gt;% \n  filter(branching !=4) %&gt;%\n  ungroup() %&gt;% \n  mutate(plant_num_taskid=paste(sep=\"_\",plant_num, taskid)) %&gt;% \n  #dplyr::select(plant_num,condition, water_condition, heat_condition,branching,BC2) %&gt;% \n  pivot_wider(names_from=\"branching\",\n              values_from=c(Angle_ABC_mean:Angle_C2BD2_mean)) %&gt;% \n  dplyr::mutate(across(c(AB_mean_1:C2D2_mean_3), function(x) x* 0.0042)) %&gt;% \n  as.data.frame() \n\n#sum (only for length)\ndistance_sum_branching&lt;-coo_root_angle_select %&gt;%\n  mutate(across( c(branching, plant_num), as.factor) )  %&gt;% \n  filter(YB&lt;10000) %&gt;% \n  group_by(condition,heat_condition,water_condition,genotype,plant_num,branching,taskid) %&gt;% \n  dplyr::summarise(across(Angle_ABC:Angle_C2BD2, sum,na.rm=T,.names = \"{.col}_sum\")) %&gt;% \n  filter(branching !=4) %&gt;%\n  ungroup() %&gt;% \n  mutate(plant_num_taskid=paste(sep=\"_\",plant_num, taskid)) %&gt;% \n  #dplyr::select(plant_num,condition, water_condition, heat_condition,branching,BC2) %&gt;% \n  pivot_wider(names_from=\"branching\",\n              values_from=c(Angle_ABC_sum:Angle_C2BD2_sum)) %&gt;% \n  dplyr::mutate(across(c(AB_sum_1:C2D2_sum_3), function(x) x* 0.0042)) %&gt;% \n  as.data.frame() \n  \n\n# nb ramification by branching\nnb_branching_by_type_branching&lt;-coo_root_angle_select %&gt;%\n  mutate(across( c(branching, plant_num), as.factor) )  %&gt;% \n  filter(YB&lt;10000) %&gt;% \n  group_by(condition,heat_condition,water_condition,genotype,plant_num,branching,taskid) %&gt;% \n  dplyr::summarise(nb_ramif=n(),na.rm=T) %&gt;%\n  filter(branching !=4) %&gt;%\n  mutate(plant_num_taskid=paste(sep=\"_\",plant_num, taskid)) %&gt;% \n  # dplyr::select(plant_num,condition, water_condition, heat_condition,branching,BC2) %&gt;% \n  pivot_wider(names_from=\"branching\",\n              values_from=nb_ramif,\n              names_glue = \"{.value}_{branching}\" #rename automatically column\n              ) %&gt;% \n  mutate_at(c(9:11), ~replace(., is.na(.), 0)) %&gt;% #transform na to 0\n  dplyr::select(!na.rm) %&gt;% \n  mutate(sum_ramif_10000=nb_ramif_1+nb_ramif_2+nb_ramif_3) %&gt;% \n    as.data.frame()\n\nnb_tips_by_type_branching&lt;-coo_root_angle_select %&gt;%\n  mutate(across( c(branching, plant_num), as.factor) )  %&gt;% \n  #filter(YC2&lt;11000) %&gt;% \n  group_by(condition,heat_condition,water_condition,genotype,plant_num,branching,taskid) %&gt;% \n  dplyr::summarise(nb_tips_macro=n(),na.rm=T) %&gt;%\n  filter(branching !=4) %&gt;%\n  mutate(plant_num_taskid=paste(sep=\"_\",plant_num, taskid)) %&gt;% \n  #dplyr::select(plant_num,condition, water_condition, heat_condition,branching,BC2) %&gt;% \n  pivot_wider(names_from=\"branching\",\n              values_from=nb_tips_macro,\n              names_glue = \"{.value}_{branching}\" #rename automatically column\n              ) %&gt;% \n  mutate_at(c(9:11), ~replace(., is.na(.), 0)) %&gt;% #transform na to 0\n  dplyr::select(!na.rm) %&gt;% \n  mutate(sum_tips_macro=nb_tips_macro_1+nb_tips_macro_2+nb_tips_macro_3) %&gt;% \n    as.data.frame()\n\n# merge data by plant_num and taskid\ndf_global_macro&lt;-merge(sum_tips_10000 %&gt;%\n                      dplyr::select(plant_num_taskid,sum_nb_tips_10000),\n                    distance_mean_branching[,5:79] ,by=\"plant_num_taskid\",all=T)\n\ndistance_sum_branching=distance_sum_branching %&gt;% dplyr::select(plant_num_taskid,\"AB_sum_1\",\"AB_sum_2\"   ,\"AB_sum_3\", \"BC_sum_1\"    ,\"BC_sum_2\"  ,\"BC_sum_3\",   \"BD_sum_1\"      ,    \"BD_sum_2\"      ,    \"BD_sum_3\",\"CD_sum_1\",\"CD_sum_2\" ,\n\"CD_sum_3\",\"BC2_sum_1\"  ,\"BC2_sum_2\"   ,\"BC2_sum_3\",\"BD2_sum_1\"   ,\"BD2_sum_2\",   \"BD2_sum_3\",\"C2D2_sum_1\"    ,  \"C2D2_sum_2\"    ,    \"C2D2_sum_3\")\n\ndf_global_macro&lt;-merge(df_global_macro, distance_sum_branching,by=\"plant_num_taskid\",all=T)\n\ndf_global_macro&lt;-merge(df_global_macro,nb_branching_by_type_branching[,7:length(nb_branching_by_type_branching)],by=\"plant_num_taskid\",all=T)\n\ndf_global_macro&lt;-merge(df_global_macro,nb_tips_by_type_branching[,7:length(nb_branching_by_type_branching)],by=\"plant_num_taskid\",all=T)\n\ndf_global_ra&lt;-merge(root_archi,\n                    df_global_macro %&gt;% \n                      select(!c(taskid,plant_num)),by=\"plant_num_taskid\",all=T)\n\n\n\n\n7.4.2 Add shoot architecture\nMy problem is that I had for primary key plant_num taskid. But for the stems I only have shooting date and plant num. I will have to recreate a second primary key but with shooting date. Do I have duplicate shooting date and plant_num (a plant photographed twice)\n\n\nCode\n#verif for stem and for root\ntest=read.csv(here::here(\"data/physio/output/result_convex_hull_hauteur_tige_analyse_v1_to_modif.csv\")) %&gt;%\n  mutate(plant_num_shooting_date=paste(sep=\"_\",plant_num,shooting_date)) %&gt;%\n  group_by(plant_num_shooting_date) %&gt;%\n  filter(n()&gt;1)\n\ntest=df_global_ra%&gt;% \n  mutate(plant_num_shooting_date=paste(sep=\"_\",plant_num,shooting_date)) %&gt;% \n  group_by(plant_num_shooting_date) %&gt;% \n  filter(n()&gt;1) \n\n\nRemove all the information that are in root architecture (coming from plant_information) merge the two datasets and re-add the data\n\n\nCode\ndf_global_archi=merge(\n  df_global_ra %&gt;% mutate(plant_num_shooting_date=paste(sep=\"_\",plant_num,shooting_date)) %&gt;% \n    dplyr::select(\"plant_num_shooting_date\",\"plant_num\",\"plant_num_taskid\",\"taskid\",\"Label\",\"root\",\"background\",\"nod\",\n     \"num_label\",\"perimeter\",\"area\",\"profondeur\",\"largeur\",\"length_skull\",\"density\",\"surface\", \"volume\",\"shooting_date\",\n     \"plant_letter\",\n     \"sum_nb_tips_10000\",\n     c(\"Angle_ABC_mean_1\":\"sum_tips_macro\")\n    ), \n  \n  read.csv(here::here(\"data/physio/output/result_convex_hull_hauteur_tige_analyse_v1_to_modif.csv\")) %&gt;% \n  mutate(plant_num_shooting_date=paste(sep=\"_\",plant_num,shooting_date)) %&gt;% \n  mutate(diff_correct_plant_height=diff_correct) %&gt;% \n  select(!c(shooting_date,X,diff_correct)),\n  \n  by=c(\"plant_num_shooting_date\",\"plant_num\"),all=T\n  ) \n\n# add info and date\ndf_global_archi_info=merge(df_global_archi,plant_info,by = \"plant_num\",all=T) %&gt;% \n  mutate(climat_condition=paste(sep=\"_\",water_condition,heat_condition))  %&gt;% \n  filter(is.na(induct_error_root_architecture)) %&gt;% \n  mutate(days_after_transplantation=as.Date(shooting_date)-as.Date(\"2021-09-22\"))\n\n\n\n\n7.4.3 Write results\n\n\nCode\nsave(df_global_archi_info,file=here::here(\"data/root/output/global_architecture_plant_shooting_date_taskid.RData\"))\n\n\n\n\n7.4.4 Number of measurements per condition\n\n\nCode\ndf_global_archi_info_resum&lt;-  read.csv(here::here(here::here(\"data/root/output/global_architecture_plant_shooting_date_taskid.csv\"))) %&gt;% \n  filter(recolte %in% c(1,2)) %&gt;% \n  drop_na(condition) %&gt;% \n  dplyr::group_by(condition, recolte,plant_num) %&gt;% \n  dplyr::summarise(count=n()) %&gt;% \n  dplyr::group_by(condition, recolte) %&gt;% \n  dplyr::summarise(Mean=mean(count), Sum=sum(count)) %&gt;% \n  mutate(Mean=round(Mean)) %&gt;% \n  pivot_wider(names_from = recolte, values_from =c(Mean, Sum)) \n\n# mean(df_global_archi_info_resum$Sum_2)\n\n\ndf_global_archi_info_resum %&gt;% \n  dplyr::select(condition, Mean_1, Sum_1, Mean_2, Sum_2) %&gt;% \n  mutate(across(everything(), ~as.character(.))) %&gt;% \n  mutate(across(everything(), ~tidyr::replace_na(., \"-\"))) %&gt;% \n  \nkbl(caption = \"Mean number of images per rhizotube and total number of images per condition\", col.names=c(\"Condition\", \"Mean number of image (different dates) by rhizotube for H1\", \"Total number of images for H1\",\"Mean number of image (different dates) by rhizotube for H2\", \"Total number of images for H2\"), digits = 0) %&gt;% \nkable_paper(full_width = F)\n\n\n\nMean number of images per rhizotube and total number of images per condition\n\n\nCondition\nMean number of image (different dates) by rhizotube for H1\nTotal number of images for H1\nMean number of image (different dates) by rhizotube for H2\nTotal number of images for H2\n\n\n\n\nSto_WS_HS\n-\n-\n12\n300\n\n\nSto_WS_OT\n-\n-\n12\n338\n\n\nSto_WW_HS\n-\n-\n11\n350\n\n\nSto_WW_OT\n4\n50\n12\n372\n\n\nWen_WS_HS\n-\n-\n11\n318\n\n\nWen_WS_OT\n-\n-\n12\n338\n\n\nWen_WW_HS\n-\n-\n12\n382\n\n\nWen_WW_OT\n4\n50\n12\n386\n\n\n\n\n\n\n\n\n\n\n\nJeudy, Christian, Marielle Adrian, Christophe Baussard, Céline Bernard, Eric Bernaud, Virginie Bourion, Hughes Busset, et al. 2016. “RhizoTubes as a New Tool for High Throughput Imaging of Plant Root Development and Architecture: Test, Comparison with Pot Grown Plants and Validation.” Plant Methods, 4.993, 12 (1): 31. https://doi.org/10.1186/s13007-016-0131-9.",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Pre-processing of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/2_rapid_analysis_root_architecture.html",
    "href": "report/root_architecture/2_rapid_analysis_root_architecture.html",
    "title": "8  Rapid analysis of root architecture data",
    "section": "",
    "text": "8.1 Data importation\nCode\ncoo_root_tips_select=read.csv(here::here(\"data/root/output/coo_root_tips_select.csv\"))%&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")))\n\ncoo_root_angle_select=read.csv(here::here(\"data/root/output/coo_root_angle_select.csv\"))%&gt;%  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) \n\ndf_global_archi=import_kinetic(df_ra_i = T,df_height_plant_i = T,df_root_tips_nb_10000_i = T,df_root_tips_angle_i = T,df_root_tips_length_mean_i = T, df_root_tips_length_sum_i = T, df_root_nb_ramif_i = T,df_root_tips_nb_macro_i = T,key = \"plant_num_shooting_date\") %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;%   mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% filter(days_after_transplantation!=3) #all data compile by taskid, shooting date and plant num\n\n# cosmetics\nclimate_pallet=read_excel(here::here(\"data/color_palette.xlsm\")) %&gt;%\n      filter(set == \"climat_condition\") %&gt;%\n      dplyr::select(color, treatment) %&gt;%\n      pull(color) %&gt;%\n      setNames(read_excel(here::here(\"data/color_palette.xlsm\")) %&gt;%\n                 filter(set == \"climat_condition\") %&gt;%\n                 pull(treatment)\n               )",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Rapid analysis of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/2_rapid_analysis_root_architecture.html#analyse-of-kinetics-data-made-with-deep-learning",
    "href": "report/root_architecture/2_rapid_analysis_root_architecture.html#analyse-of-kinetics-data-made-with-deep-learning",
    "title": "8  Rapid analysis of root architecture data",
    "section": "8.2 Analyse of kinetics data made with deep learning",
    "text": "8.2 Analyse of kinetics data made with deep learning\n\n\nCode\n# Definition of variables\nvariable_archi=c(\"root\",\"area\",\"largeur\",\"density\",\"profondeur\",\"length_skull\",\"diff_correct_plant_height\",\"surface\", \"volume\")\nlegende_variable_archi=c(\"Root projected area (cm²)\",\"Area of the convexhull (cm²)\",\"Width of the root system (cm)\",\"Density of the root system\",\"Depth of the root system (cm)\",\"Length total of the root system (cm)\",\"Height of the plant (cm)\", \"Root surface area (cm²)\", \"Volume of the root (cm^3)\")\n\n\n# Data generation\ndf_global_archi_n2=df_global_archi %&gt;%\n  filter(climat_condition!=\"NA_NA\") %&gt;% \n  group_by(climat_condition,days_after_transplantation) %&gt;%                       \n summarise_at(.vars = variable_archi,\n               .funs = c(mean=\"mean\", sd=\"sd\"),na.rm=T)\n\ndf_global_archi_n=df_global_archi %&gt;%                                        \n  filter(climat_condition!=\"NA_NA\") %&gt;%\n  group_by(climat_condition,days_after_transplantation,plant_num) %&gt;%                       \n summarise_at(.vars = variable_archi,\n               .funs = c(mean=\"mean\", sd=\"sd\"),na.rm=T)\n\n\n# Graphics creation and assembly\nplots &lt;- lapply(1:length(variable_archi), function(i) {\n  i_mean=paste0(variable_archi[i],\"_mean\")\n  min_y &lt;- min(df_global_archi_n2[,i_mean])\npx=df_global_archi_n2 %&gt;% ggplot(aes_string(x=\"days_after_transplantation\",y=i_mean,col=\"climat_condition\",fill=\"climat_condition\"))+\n  geom_smooth(data=df_global_archi_n,aes_string(x=\"days_after_transplantation\",y=i_mean,color=\"climat_condition\"),color = \"transparent\",alpha=0.25)+\n  geom_line(size=1,se=T)+\n  geom_point()+\n  scale_x_continuous(breaks=seq(0, 25, 2))+\n  ylab(paste0(legende_variable_archi[i]))+\n  xlab(\"Number of days after transplantation\")+\n  scale_color_manual(values=climate_pallet)+\n  theme_bw()+\n   theme(panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank())+\n  scale_fill_manual(values=climate_pallet)+labs(color=\"Treatment\",fill=\"Treatment\")\n#plotly::ggplotly(px)\nprint(px)\n})\n\n# Assembling graphics\nfinal_plot &lt;- wrap_plots(plots, ncol = 2)+ \n  plot_layout(guides = \"collect\")+\n  guide_area()+\n  plot_annotation(tag_levels = 'A',\n                  title=\"Combined graph of kinetic variables measured during the experiment\",\n                  subtitle=\"Comparison between treatments without taking genotype into account\")\nfinal_plot\nggsave(here::here(\"report/root_architecture/plot/kinetic_climat_condition.svg\"), final_plot, height = 12,width = 7)\n\n# By condition (for the two genotype) \ndf_global_archi_n2=df_global_archi %&gt;%\n  group_by(condition,climat_condition,genotype,days_after_transplantation) %&gt;%                       \n summarise_at(.vars = variable_archi,\n               .funs = c(mean=\"mean\", sd=\"sd\"),na.rm=T)\n\ndf_global_archi_n=df_global_archi %&gt;%                                        \n  group_by(condition,climat_condition,genotype,days_after_transplantation,plant_num) %&gt;%                       \n summarise_at(.vars = variable_archi,\n               .funs = c(mean=\"mean\", sd=\"sd\"),na.rm=T)\n\n#dev.off()\nplots &lt;- lapply(1:length(variable_archi), function(i) {\n  i_mean=paste0(variable_archi[i],\"_mean\")\npx=df_global_archi_n2 %&gt;% drop_na(climat_condition) %&gt;% ggplot(aes_string(x=\"days_after_transplantation\",y=i_mean,col=\"climat_condition\",fill=\"climat_condition\",linetype=\"genotype\"))+\n  geom_smooth(data=df_global_archi_n,aes_string(x=\"days_after_transplantation\",y=i_mean,color=\"climat_condition\"),color = \"transparent\",alpha=0.25)+\n  geom_line(size=1,se=T)+geom_point()+\n  scale_x_continuous(breaks=seq(0, 25, 2))+\n  ylab(paste0(legende_variable_archi[i]))+xlab(\"Number of days after transplantation\")+\n  scale_color_manual(values=climate_pallet)+\n  theme_bw()+\n   theme(panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank())+\n  scale_fill_manual(values=climate_pallet)+\n  labs(color=\"Treatment\",fill=\"Treatment\",linetype=\"Genotype\")\n#plotly::ggplotly(px)\nprint(px)\n})\n\n# Assembling graphics\nfinal_plot &lt;- wrap_plots(plots, ncol = 2)+ \n  plot_layout(guides = \"collect\")+\n  guide_area()+\n  plot_annotation(tag_levels = 'A',\n                  title=\"Combined graph of kinetic variables measured during the experiment\",\n                  subtitle=\"Comparison between treatments and genotype\")\nfinal_plot\nggsave(here::here(\"report/root_architecture/plot/kinetic_condition.svg\"), final_plot, height = 14,width = 7)\n\n#stats for the root surface projected\nnb_day=20\ndf_global_archi_select=df_global_archi %&gt;% filter(days_after_transplantation==nb_day) \n# \n# Fig_root_arch=Plettre_grp(\n#   Z=df_global_archi_select,\n#   X=df_global_archi_select$condition,\n#   Y=df_global_archi_select$root,\n#   Xlab = \"Condition\",\n#   Ylab = paste0(\"Root projected area (cm²)\"),\n#   Y_bis = \"root\",\n#   Tukey=T,\n#   outlier_show =F ,\n#   label_outlier = \"plant_num\",\n#   export_png = T,export_path = here::here(paste0(\"report/root_architecture/plot/root_projected_area_with_label_plant_num_\",nb_day,\"DAT\",\".png\")),export_width = 17, export_height = 15,\n#   legend_del = F,\n#   title_plot = paste0(nb_day,\" days after transplantation\"),\n#   print_stats = F\n# )\n\nplot_x=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,length_skull),\n    column_value = \"surface\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"Root surface area (cm²)\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = T,\n  hex_pallet = climate_pallet\n)\n\nggsave(here::here(\"report/root_architecture/plot/root_surface_area_20DAT.svg\"), plot_x[[\"plot\"]], height = 4,width = 5)\n\n# #calcul for now the decrease at 9 days after transplantation\n#  df_global_archi_select %&gt;% dplyr::group_by(heat_condition,genotype) %&gt;% \n#   dplyr::summarise(mean_area=mean(root)) %&gt;% as.data.frame()\n#  \n#  df_global_archi_select %&gt;% dplyr::group_by(heat_condition,genotype) %&gt;% \n#    #filter(genotype==\"Stocata\") %&gt;% \n#    filter(climat_condition %in% c(\"WW_OT\",\"WW_HS\")) %&gt;% \n#   dplyr::summarise(mean_area=mean(root)) %&gt;% as.data.frame() %&gt;% mutate(variation_rate=(mean_area[heat_condition==\"HS\"]-mean_area[heat_condition==\"OT\"])*100/(mean_area[heat_condition==\"OT\"])) %&gt;% filter(heat_condition==\"HS\")\n#  \n#  \n#  list_days_after_transplantation=levels(as.factor(df_global_archi %&gt;% pull(days_after_transplantation)))\n#  \n#  #student pour savoir quand le stress hydrique est significativement diférent par rapport au controle\n#  df_global_archi %&gt;% filter(days_after_transplantation==17)  %&gt;%\n#    group_by(genotype) %&gt;% \n#     summarise_each(funs(t.test(.[climat_condition == \"WW_OT\"], .[climat_condition == \"WS_OT\"])$p.value), vars = root)\n#  \n#  \n#  df_global_archi %&gt;% filter(days_after_transplantation==19)  %&gt;%\n#    #group_by(genotype) %&gt;% \n#     summarise_each(funs(t.test(.[condition == \"Sto_WS_OT\"], .[condition == \"Wen_WS_OT\"])$p.value), vars = root)\n#  \n#  \n#   df_global_archi %&gt;% \n#     filter(days_after_transplantation&gt;4)  %&gt;%\n#    group_by(genotype,days_after_transplantation) %&gt;% \n#     summarise_each(funs(t.test(.[climat_condition == \"WW_OT\"], .[climat_condition == \"WS_OT\"])$p.value), vars =diff_correct_plant_height)\n#  \n#    df_global_archi %&gt;% \n#     filter(days_after_transplantation&gt;4)  %&gt;%\n#    #group_by(genotype,days_after_transplantation) %&gt;% \n#      group_by(days_after_transplantation) %&gt;% \n#     summarise_each(funs(t.test(.[condition == \"Sto_WW_HS\"], .[condition == \"Wen_WW_HS\"])$p.value), vars =diff_correct_plant_height)\n#   \n#     df_global_archi %&gt;%\n#       filter(days_after_transplantation==20) %&gt;%  dplyr::group_by(condition) %&gt;% \n#    #filter(genotype==\"Stocata\") %&gt;% \n#       drop_na(diff_correct_plant_height) %&gt;% \n#    #filter(climat_condition %in% c(\"WW_OT\",\"WW_HS\")) %&gt;% \n#   dplyr::summarise(mean_height_plant=mean(diff_correct_plant_height)) %&gt;% as.data.frame() %&gt;% mutate(diff=mean_height_plant[condition==\"Sto_WW_OT\"]-mean_height_plant[condition==\"Wen_WW_OT\"])\n#    \n#    \n#  M1=lm(data = df_global_archi,root~genotype+days_after_transplantation+climat_condition)\n# summary(M1)\n\n\n \nfigure of the publication in this code below \n\n\nCode\n#only root projected area and height of the plant\ndf_global_archi_select=df_global_archi %&gt;% filter(days_after_transplantation==20) #%&gt;% drop_na()\ni_mean=paste0(variable_archi[1],\"_mean\")\np_root_projected=df_global_archi_n2 %&gt;% drop_na(climat_condition) %&gt;% ggplot(aes_string(x=\"days_after_transplantation\",y=i_mean,col=\"climat_condition\",fill=\"climat_condition\",linetype=\"genotype\"))+\n  geom_rect(xmin = 5, xmax = 20, ymin = -Inf, ymax = 0, fill = \"#c9d5ea\", alpha = 0.5,col=\"gray\") +\n  geom_rect(xmin = 5, xmax = 10, ymin = 0, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  geom_rect(xmin = 15, xmax = 20, ymin = 0, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  # geom_rect(aes(xmin=15,xmax = 18, ymin = -Inf,ymax = Inf), fill = 'gray80', alpha = 0.05,color=NA)+\n  # geom_rect(aes(xmin=5,xmax = 8, ymin = -Inf,ymax = Inf), fill = 'gray80', alpha = 0.05,color=NA)+\n  # geom_rect(aes(xmin=5,xmax = Inf, ymin = -Inf,ymax = 5), fill = '#5E5A93', alpha = 0.01,color=NA)+\n  # \n  # \n  geom_smooth(data=df_global_archi_n,aes_string(x=\"days_after_transplantation\",y=i_mean,color=\"climat_condition\"),color = \"transparent\",alpha=0.25)+\n  geom_line(size=1,se=T)+\n  geom_point()+\n  scale_x_continuous(breaks=seq(0, 25, 2))+\n  ylab(paste0(legende_variable_archi[8]))+xlab(\"Number of days after transplantation\")+\n  theme_bw()+ \n  theme(\n    # Hide panel borders and remove grid lines\n    panel.border = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    # Change axis line\n    axis.line = element_line(colour = \"black\")\n  )+\n  scale_color_manual(values=climate_pallet)+ \n  scale_fill_manual(values=climate_pallet)+\n  theme(legend.position = \"right\") +\n  labs(color=\"Treatment\",fill=\"Treatment\",linetype=\"Genotype\");p_root_projected\n\ni_mean=paste0(variable_archi[8],\"_mean\")\np_root_surface=df_global_archi_n2 %&gt;% drop_na(climat_condition) %&gt;% ggplot(aes_string(x=\"days_after_transplantation\",y=i_mean,col=\"climat_condition\",fill=\"climat_condition\",linetype=\"genotype\"))+\n  geom_rect(xmin = 5, xmax = 20, ymin = -Inf, ymax = 0, fill = \"#c9d5ea\", alpha = 0.5,col=\"gray\") +\n  geom_rect(xmin = 5, xmax = 10, ymin = 0, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  geom_rect(xmin = 15, xmax = 20, ymin = 0, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  # geom_rect(aes(xmin=15,xmax = 18, ymin = -Inf,ymax = Inf), fill = 'gray80', alpha = 0.05,color=NA)+\n  # geom_rect(aes(xmin=5,xmax = 8, ymin = -Inf,ymax = Inf), fill = 'gray80', alpha = 0.05,color=NA)+\n  # geom_rect(aes(xmin=5,xmax = Inf, ymin = -Inf,ymax = 5), fill = '#5E5A93', alpha = 0.01,color=NA)+\n  # \n  # \n  geom_smooth(data=df_global_archi_n,aes_string(x=\"days_after_transplantation\",y=i_mean,color=\"climat_condition\"),color = \"transparent\",alpha=0.25)+\n  geom_line(size=1,se=T)+\n  geom_point()+\n  scale_x_continuous(breaks=seq(0, 25, 2))+\n  ylab(paste0(legende_variable_archi[8]))+xlab(\"Number of days after transplantation\")+\n  theme_bw()+ \n  theme(\n    # Hide panel borders and remove grid lines\n    panel.border = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    # Change axis line\n    axis.line = element_line(colour = \"black\")\n  )+\n  scale_color_manual(values=climate_pallet)+ \n  scale_fill_manual(values=climate_pallet)+\n  theme(legend.position = \"right\") +\n  labs(color=\"Treatment\",fill=\"Treatment\",linetype=\"Genotype\");p_root_projected\n# #export only root\n# svg(here::here(\"xp1_analyse/plot/root_architecture/root_projected_area_poster.svg\"), width = 15/2.5, height = 10/2.5)#, units = 'cm', res = 900)\n# grid.arrange (p_root_projected) # Make plot\n# dev.off()\nFig1A_stat_surface=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,surface),\n    column_value = \"surface\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(paste0(\"Root surface area (cm²)\")),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig1A_stat_surface=Fig1A_stat_surface[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),legend.position = \"none\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))#,plot.caption = element_text(vjust = 10))\n#Fig1A_stat\n\ni_mean=paste0(variable_archi[7],\"_mean\")\np_height_plant=df_global_archi_n2 %&gt;% drop_na(climat_condition) %&gt;% ggplot(aes_string(x=\"days_after_transplantation\",y=i_mean,col=\"climat_condition\",fill=\"climat_condition\",linetype=\"genotype\"))+\n  geom_rect(xmin = 5, xmax = 20, ymin = -Inf, ymax = 10, fill = \"#c9d5ea\", alpha = 0.5,col=\"gray\") +\n  geom_rect(xmin = 5, xmax = 10, ymin = 10, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  geom_rect(xmin = 15, xmax = 20, ymin = 10, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  geom_smooth(data=df_global_archi_n,aes_string(x=\"days_after_transplantation\",y=i_mean,color=\"climat_condition\"),color = \"transparent\",alpha=0.25)+\n  geom_line(size=1,se=T)+geom_point()+\n  scale_x_continuous(breaks=seq(0, 25, 2))+\n  ylab(paste0(legende_variable_archi[7]))+xlab(\"Number of days after transplantation\")+\n  theme_bw()+\n  my_theme+\n  scale_color_manual(values=climate_pallet)+ scale_fill_manual(values=climate_pallet)+\n  theme(legend.position = \"bottom\")\n\ndf_global_archi_select=df_global_archi %&gt;% filter(days_after_transplantation==20) %&gt;% drop_na(diff_correct_plant_height)\nFig1B_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,diff_correct_plant_height),\n    column_value = \"diff_correct_plant_height\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(paste0(legende_variable_archi[7])),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig1B_stat=Fig1B_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),legend.position = \"none\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))#,plot.caption = element_text(vjust = 10))\n\nFig1=ggarrange(p_root_projected,Fig1A_stat,p_height_plant,Fig1B_stat,widths = c(1, 0.6),ncol=2, nrow=2,common.legend = TRUE, legend=\"bottom\",labels = c(\"A\",\"B\",\"C\",\"D\"),align='h')\nFig1\n\n#export to delet\n#ggsave(here::here(\"xp1_analyse/plot/root_architecture/resum_Fig1.svg\"), Fig1, width = 25, height = 25, units = \"cm\")\npng(here::here(\"report/root_architecture/plot/resum_Fig1.png\"), width = 25, height = 25, units = 'cm', res = 900)\ngrid.arrange (Fig1) # Make plot\ndev.off()\n\npng(here::here(\"report/root_architecture/plot/resum_Fig1_root.png\"), width = 18, height = 12, units = 'cm', res = 900)\nggarrange(p_root_projected, Fig1A_stat, widths = c(1, 0.6),ncol=2, nrow=1,common.legend = TRUE, legend=\"bottom\",labels = c(\"A\",\"B\"),align='h') # Make plot\ndev.off()\n\nsvg(here::here(\"report/root_architecture/plot/resum_Fig1_root.svg\"), width = 7, height = 4)\nggarrange(p_root_projected, Fig1A_stat, widths = c(1, 0.6),ncol=2, nrow=1,common.legend = TRUE, legend=\"bottom\",labels = c(\"A\",\"B\"),align='h') # Make plot\ndev.off()\n\nsvg(here::here(\"report/root_architecture/plot/resum_Fig1_root2.svg\"), width = 7, height = 4)\nggarrange(p_root_surface, Fig1A_stat_surface, widths = c(1, 0.6),ncol=2, nrow=1,common.legend = TRUE, legend=\"bottom\",labels = c(\"A\",\"B\"),align='h') # Make plot\ndev.off()",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Rapid analysis of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/2_rapid_analysis_root_architecture.html#the-speed-of-root-growth",
    "href": "report/root_architecture/2_rapid_analysis_root_architecture.html#the-speed-of-root-growth",
    "title": "8  Rapid analysis of root architecture data",
    "section": "8.3 The speed of root growth",
    "text": "8.3 The speed of root growth\nThe speed is calculated using the difference in root development length between two dates.\n\n\nCode\ndf_kinetic&lt;-import_kinetic(df_height_plant_i = T, df_ra_i = T,key = \"plant_num_shooting_date\",date_shooting = \"all\") %&gt;% \n  filter(recolte==2) %&gt;% \n  dplyr::select(\"plant_num\",\"condition\",\"heat_condition\", \"water_condition\",\"genotype\", \"length_skull\", \"diff_correct_plant_height\", \"climat_condition\", \"days_after_transplantation\") %&gt;% \n  drop_na(length_skull)   \n\nvec_plant_num&lt;-levels(as.factor(as.character(df_kinetic$plant_num)))\ndf_kinetic$velocity_length_root&lt;- NA\ndf_kinetic$velocity_height_plant&lt;- NA\n\ndf_kinetic2=data.frame()\nfor(plant_num_x in vec_plant_num){\n  df_kinetic_x&lt;-df_kinetic %&gt;% filter(plant_num==plant_num_x) %&gt;% arrange(days_after_transplantation)\n  if(nrow(df_kinetic_x)&lt;2){next}\n  for (i in 1:nrow(df_kinetic_x)){\n    if(i==1){\n      df_kinetic_x$velocity_length_root[i]&lt;-0\n      df_kinetic_x$velocity_height_plant[i]&lt;-0\n    }else{\n      df_kinetic_x$velocity_length_root[i]&lt;-(df_kinetic_x$length_skull[i]-df_kinetic_x$length_skull[i-1])/as.numeric(df_kinetic_x$days_after_transplantation[i]-df_kinetic_x$days_after_transplantation[i-1])\n      df_kinetic_x$velocity_height_plant[i]&lt;-(df_kinetic_x$diff_correct_plant_height[i]-df_kinetic_x$diff_correct_plant_height[i-1])/as.numeric(df_kinetic_x$days_after_transplantation[i]-df_kinetic_x$days_after_transplantation[i-1])\n    }\n  }\n    df_kinetic2&lt;-rbind(df_kinetic2,df_kinetic_x)\n}\n\np_velocity_height_plant&lt;-\n  ggplot(df_kinetic2 %&gt;% filter(velocity_height_plant&gt;-5) %&gt;%  filter( velocity_height_plant&lt;25),aes_string(x=\"days_after_transplantation\",y=\"velocity_height_plant\",col=\"climat_condition\", fill=\"climat_condition\",linetype=\"genotype\"))+\n   geom_rect(xmin = 5, xmax = 20, ymin = -Inf, ymax = -2, fill = \"#c9d5ea\", alpha = 0.5,col=\"gray\") +\n  geom_rect(xmin = 5, xmax = 10, ymin = -2, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  geom_rect(xmin = 15, xmax = 20, ymin = -2, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\")+\n  geom_point(alpha=0.25)+\n  facet_grid(.~climat_condition)+\n  geom_smooth(data=df_kinetic2 %&gt;% filter(velocity_height_plant&gt;-5) %&gt;% filter( velocity_height_plant&lt;25),\n              aes_string(x=\"days_after_transplantation\",y=\"velocity_height_plant\",color=\"climat_condition\"),alpha=0.25)+\nlabs(fill=\"Treatment\",color=\"Treatment\",linetype=\"Genotype\",y=\"Velocity of the height of the plant (cm/days)\", x=\"Number of days after transplantation\")+\n    theme_bw()+\n  #my_theme+\n  scale_color_manual(values=climate_pallet)+\n    scale_fill_manual(values=climate_pallet)+\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text = element_blank(),\n        legend.position = \"bottom\")\n\np_velocity_length_root&lt;-\n  ggplot(df_kinetic2 %&gt;% filter(velocity_length_root&gt;-50),aes_string(x=\"days_after_transplantation\",y=\"velocity_length_root\",col=\"climat_condition\", fill=\"climat_condition\",linetype=\"genotype\"))+\n   geom_rect(xmin = 5, xmax = 20, ymin = -Inf, ymax = -40, fill = \"#c9d5ea\", alpha = 0.5,col=\"gray\") +\n  geom_rect(xmin = 5, xmax = 10, ymin = -40, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\") +\n  geom_rect(xmin = 15, xmax = 20, ymin = -40, ymax = Inf, fill = \"lightgray\", alpha = 0.02,col=\"gray\")+\n  geom_point(alpha=0.25)+\n  facet_grid(.~climat_condition)+\n  geom_smooth(data=df_kinetic2 %&gt;% filter(velocity_length_root&gt;-50),\n              aes_string(x=\"days_after_transplantation\",y=\"velocity_length_root\",color=\"climat_condition\"),alpha=0.25)+\nlabs(fill=\"Treatment\",color=\"Treatment\",linetype=\"Genotype\",y=\"Velocity root length (cm/days)\", x=\"Number of days after transplantation\")+\n    theme_bw()+\n  #my_theme+\n  scale_color_manual(values=climate_pallet)+\n    scale_fill_manual(values=climate_pallet)+\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text = element_blank(),\n        legend.position = \"bottom\")\n  \n# Compile the two plots\nsvg(here::here(\"report/root_architecture/plot/velocity_height_plant_root_length.svg\"), width = 10, height = 8)\nggarrange(p_velocity_height_plant, p_velocity_length_root,ncol=1, nrow=2,common.legend = TRUE, legend=\"bottom\",labels = c(\"A\",\"B\"),align='v')\ndev.off()\n\npng(here::here(\"report/root_architecture/plot/velocity_height_plant_root_length.png\"), width = 10, height = 8, units = \"in\", res = 300)\nggarrange(p_velocity_height_plant, p_velocity_length_root, ncol = 1, nrow = 2, common.legend = TRUE, legend = \"bottom\", labels = c(\"A\", \"B\"), align = 'v')\ndev.off()",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Rapid analysis of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/2_rapid_analysis_root_architecture.html#angles-and-root-tips",
    "href": "report/root_architecture/2_rapid_analysis_root_architecture.html#angles-and-root-tips",
    "title": "8  Rapid analysis of root architecture data",
    "section": "8.4 Angles and root tips",
    "text": "8.4 Angles and root tips\n\nI have filtered so that I do not take the values below 10000 pixel (depending on the coordinates of YB). That is to say 41,66 cm of depth.\n\n8.4.1 Number of root tips by branching\n\n\nCode\n#only root projected area and height of the plant\ndf_global_archi_select=df_global_archi %&gt;% filter(days_after_transplantation==19) %&gt;% filter(plant_num!=116)#%&gt;% drop_na()\n\nFig1A_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,nb_tips_macro_1),\n    column_value = \"nb_tips_macro_1\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"Number of root tips  \\n for branching 1\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig1A_stat=Fig1A_stat[[\"plot\"]] +  \n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),legend.position = \"none\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+\n  labs(color=\"Treatment\",fill=\"Treatment\")\n\nFig2A_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,nb_tips_macro_2),\n    column_value = \"nb_tips_macro_2\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"Number of root tips  \\n for branching 2\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig2A_stat=Fig2A_stat[[\"plot\"]] +  \n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),legend.position = \"none\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+\n  labs(color=\"Treatment\",fill=\"Treatment\")\n\n  \nFig3A_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,nb_tips_macro_3),\n    column_value = \"nb_tips_macro_3\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"Number of root tips \\n for branching 3\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig3A_stat=Fig3A_stat[[\"plot\"]] +  \n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),legend.position = \"none\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+\n  labs(color=\"Treatment\",fill=\"Treatment\")\n\n\nFig4A_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,sum_tips_macro),\n    column_value = \"sum_tips_macro\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"Number of root tips \\n for all the plant\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig4A_stat=Fig4A_stat[[\"plot\"]] +  \n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),legend.position = \"none\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+\n  labs(color=\"Treatment\",fill=\"Treatment\")\n\nFigNbTips=ggarrange(Fig1A_stat,Fig2A_stat,Fig3A_stat,Fig4A_stat ,ncol=2, nrow=2,common.legend = TRUE, legend=\"bottom\",labels = c(\"A\",\"B\",\"C\",\"D\"),align='v')\nFigNbTips\n\n\n\n\nCode\n#################### If I compile the number of root tips into a single graph #################\n# Interesting to look at the proportions for the number of root tips?\ndf_global_archi_select=df_global_archi %&gt;% filter(days_after_transplantation==19) #%&gt;% drop_na()\n\ndf_global_archi_select$condition&lt;- dplyr::recode(df_global_archi_select$condition, \n                                       Sto_WW_OT=\"Stocata_WW_OT\",\n                                       Sto_WS_OT=\"Stocata_WS_OT\",\n                                       Sto_WW_HS=\"Stocata_WW_HS\",\n                                       Sto_WS_HS=\"Stocata_WS_HS\",\n                                       Wen_WW_OT=\"Wendy_WW_OT\",\n                                       Wen_WS_OT=\"Wendy_WS_OT\",\n                                       Wen_WW_HS=\"Wendy_WW_HS\",\n                                       Wen_WS_HS=\"Wendy_WS_HS\"\n)\n\n#data_biomass=data_biomass %&gt;% mutate(moda=factor(moda,levels=c(\"WW.OT\",\"WS.OT\",\"WW.HS\",\"WS.HS\"))) \n# df_global_archi_select$climat_condition&lt;- dplyr::recode(df_global_archi_select$climat_condition, \n#                                                  WW_OT=\"WW.OT\",\n#                                                  WS_OT=\"WS.OT\",\n#                                                  WW_HS=\"WW.HS\",\n#                                                  WS_HS=\"WS.HS\"\n# )\n\n#moyenne\ndf_global_archi_select2=df_global_archi_select%&gt;%\n  # filter(!plante_code_simple %in% c(liste_error))%&gt;%\n  select(condition,climat_condition,genotype,nb_tips_macro_1,nb_tips_macro_2, nb_tips_macro_3,sum_tips_macro)%&gt;%na.omit()\n\nmean_df_global_archi_select2=df_global_archi_select2 %&gt;%                    # Specify data frame\n  group_by(condition,climat_condition,genotype) %&gt;%                         # Specify group indicator\n  summarise_at(vars(nb_tips_macro_1,nb_tips_macro_2, nb_tips_macro_3),      # Specify column\n               list(mean))                                                  # Specify function\n\nmean_df_global_archi_select2_bis=as.data.frame(mean_df_global_archi_select2)\n# add an adjuste column for eror bar\nfor (i in 1:length(mean_df_global_archi_select2$condition)){\n  mean_df_global_archi_select2_bis$adj_macro3[i]=mean_df_global_archi_select2_bis$nb_tips_macro_1[i]+mean_df_global_archi_select2_bis$nb_tips_macro_2[i]+mean_df_global_archi_select2_bis$nb_tips_macro_3[i]\n  mean_df_global_archi_select2_bis$adj_macro2[i]=mean_df_global_archi_select2_bis$nb_tips_macro_1[i]+mean_df_global_archi_select2_bis$nb_tips_macro_2[i]\n  mean_df_global_archi_select2_bis$adj_macro1[i]=mean_df_global_archi_select2_bis$nb_tips_macro_1[i]\n}\n\nnb_tips_macro_vertical_mean &lt;- mean_df_global_archi_select2 %&gt;% \n  pivot_longer(c(nb_tips_macro_1,nb_tips_macro_2, nb_tips_macro_3),\n               names_to=\"Branching\", values_to=\"nb_tips_mean\")\n\nnb_tips_macro_vertical_mean_bis &lt;- mean_df_global_archi_select2_bis %&gt;% \n  pivot_longer(c(adj_macro3,adj_macro2,adj_macro1),\n               names_to=\"Branching\", values_to=\"adj_mean\")\n\ndata_vertical_mean=cbind(nb_tips_macro_vertical_mean,nb_tips_macro_vertical_mean_bis[,8])\n\n# addition of standard deviation\nsd_archi_macro=df_global_archi_select2 %&gt;%                                  # Specify data frame\n  group_by(condition,climat_condition,genotype) %&gt;%                         # Specify group indicator\n  summarise_at(vars(nb_tips_macro_1,nb_tips_macro_2, nb_tips_macro_3),      # Specify column\n               list(sd))                                                    # Specify function\n\ndata_vertical_sd &lt;- sd_archi_macro %&gt;% \n  pivot_longer(c(nb_tips_macro_1,nb_tips_macro_2, nb_tips_macro_3), names_to=\"Branching\", values_to=\"tips_sd\")\n\ndata_resum=cbind(data_vertical_mean,data_vertical_sd$tips_sd)\ncolnames(data_resum)=c(\"condition\",\"climat_condition\",\"genotype\",\"Branching\",\"nb_tips_mean\",\"adj_mean\",\"tips_sd\")\n\n# change variables\ndata_resum$Branching=dplyr::recode(data_resum$Branching, nb_tips_macro_1 = \"Branching 1\",nb_tips_macro_2= \"Branching 2\", nb_tips_macro_3 = \"Branching 3\")\n\n# graph\n\n#Fig1----\ndata_resum$Branching &lt;- fct_relevel(data_resum$Branching, c(\"Branching 3\", \"Branching 2\", \"Branching 1\" ))\n# Add a column that adjusts my error bars\n\n# add below the sd the letter\ndata_resum$letter=c(\"cde\",\"a\",\"b\",\n                            \"ef\",\"c\",\"bc\",\n                            \"def\",\"bc\",\"bc\",\n                            \"f\",\"d\",\"c\",\n                            \"ab\",\"ab\",\"a\",\n                            \"a\",\"c\",\"bc\",\n                            \"abc\",\"ab\",\"bc\",\n                            \"bcd\",\"d\",\"c\"\n) \n\n# creation of a table for total plant stats\n\nmean_letter1=data_resum %&gt;%                                 # Specify data frame\n  group_by(condition,climat_condition,genotype) %&gt;%         # Specify group indicator\n  summarise_at(vars(nb_tips_mean),                          # Specify column\n               list(sum))\n\nmean_letter2=data_resum %&gt;%                                 # Specify data frame\n  group_by(condition,climat_condition,genotype) %&gt;%\n  filter(Branching==\"Branching 3\")%&gt;%select(tips_sd)\n\n\nmean_letter1=cbind(mean_letter1,mean_letter2[,4])\nmean_letter1$adj_tot=mean_letter1$nb_tips_mean+mean_letter1$tips_sd  \n# for letter  Plettre_modif(Z=data_biomass_select,Y=data_biomass_select$Node_weight+data_biomass_select$Root_weight+data_biomass_select$PA,X=data_biomass_select$Genotype,Xlab=\"x\",Ylab = \"y\")\nmean_letter1$letter=c(\"ab\",\"de\",\"cd\",\"f\",\"a\",\"cd\",\"bc\",\"ef\")\n\ncolor_branching &lt;- c(\"#ffdbac\",\"#e0ac69\",\"#c68642\") \n\n# graph biomass\nFig_nb_tips=ggplot(data_resum, aes(x = climat_condition,y=nb_tips_mean,fill=Branching))+\n  geom_text(position = position_stack(vjust = 1.2),data = mean_letter1, aes(y = adj_tot, label = letter, fill = \"Branching 1\"),fontface = \"bold\",color=\"#000000\")+\n  geom_bar(stat = \"identity\",color=\"black\")+ theme_bw()+\n  geom_errorbar(aes(ymin=adj_mean, ymax=adj_mean+tips_sd),width=.4,position=\"identity\")+\n  \n  geom_text(position = position_stack(vjust = 0.5), aes(label = letter), color = \"black\",size=4)+\n  \n  ylab(\"Number of tips for each branching\")+\n  xlab(\"Condition\")+scale_fill_manual(values=color_branching)+theme(axis.text.x = element_text(angle=90, hjust=1, vjust=1))+labs(fill = \"Branching\")+\n  facet_grid(.~genotype)+\n  theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+\n  theme(legend.position = \"bottom\",\n        panel.grid = element_blank(),\n              panel.background = element_rect(fill = \"white\", colour = \"black\"), \n              panel.border = element_rect(fill = NA, colour = \"black\"))#+theme(axis.title.x=element_blank(),#axis.ticks.x=element_blank(),axis.text.x=element_blank())\n\nggsave(here::here(paste0(\"report/root_architecture/plot/nb_tips_plant_num_branching_all_resumm\",\"19DAT\",\".svg\")),Fig_nb_tips, width = 4.5, height = 6)\n\n\n\n\n\nCode\nFig1B_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,Angle_ABC2_mean_1),\n    column_value = \"Angle_ABC2_mean_1\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    # Ylab_i = expression(paste(\"Angle \", widehat(ABC2),\" (degrees) for order 1\")),\n    Ylab_i = paste(\"Root insertion angle of order 1 (°)\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig1B_stat=Fig1B_stat[[\"plot\"]] +  \n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),legend.position = \"none\")+\n  labs(color=\"Treatment\",fill=\"Treatment\")\n\nFig2B_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,Angle_ABC2_mean_2),\n    column_value = \"Angle_ABC2_mean_2\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    # Ylab_i = expression(paste(\"Angle \", widehat(ABC),\" (degrees) for order 2 \")),\n    Ylab_i = paste(\"Root insertion angle of order 2 (°)\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig2B_stat=Fig2B_stat[[\"plot\"]] +  \n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),legend.position = \"none\")+\n  labs(color=\"Treatment\",fill=\"Treatment\") # scale_y_continuous(limits = c(50, 100)) \n\n# length ################### ----\n# for length BC2\n\nFig3B_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,BC2_mean_1),\n    column_value = \"BC2_mean_1\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = expression(paste(\"Mean of the length of 1st order LR (cm)\")),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig3B_stat=Fig3B_stat[[\"plot\"]] +  \n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),legend.position = \"none\")+\n  labs(color=\"Treatment\",fill=\"Treatment\")\n\nFig4B_stat=stat_analyse(\n    data=df_global_archi_select %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,BC2_sum_2),\n    column_value = \"BC2_sum_2\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i = expression(paste(\"Sum of the length of 2nd order LR (cm)\")),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\nFig4B_stat=Fig4B_stat[[\"plot\"]] +  \n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),legend.position = \"none\")+\n  labs(color=\"Treatment\",fill=\"Treatment\")\n\n# plot_grid(p_root_projected,Fig1A_stat,p_height_plant,Fig1B_stat, labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2, nrow=2)\n\nFigB=ggarrange(Fig1B_stat,Fig2B_stat,Fig3B_stat,Fig4B_stat,ncol=4, nrow=1,common.legend = TRUE, legend=\"right\",labels = c(\"C\",\"D\",\"E\",\"F\"))\nFigBbis=ggarrange(Fig1B_stat,Fig2B_stat,ncol=2, nrow=1,common.legend = TRUE, legend=\"right\",labels = c(\"C\",\"D\"))\n\nggsave(here::here(\"report/root_architecture/plot/compile_angle_C_F.svg\"), FigB,width = 14,height = 3.7)\nggsave(here::here(\"report/root_architecture/plot/compile_angle_C_D.svg\"), FigBbis,width = 10,height = 3.7)\n\n#svg()\n# png(here::here(paste0(\"xp1_analyse/plot/root_architecture/angle_or_root_tips/angle_abc_abd_length_branching_1_2_\",\"19DAT\",\".png\")), width = 30, height = 30, units = 'cm', res = 900)\n# grid.arrange (FigAngle1) # Make plot\n# dev.off()\n# \n# FigAngle2=ggarrange(img_A,FigAngle1,ncol=2, nrow=1,labels = c(\"D\",\"\"))\n#compile to del test\n#FigCompile=ggarrange(FigNbTips,FigB,ncol=1, nrow=2,common.legend = TRUE, legend=\"bottom\")\n#FigCompile\n\n#export to delet\n# png(here::here(paste0(\"xp1_analyse/plot/root_architecture/angle_or_root_tips/angle_nb_tips_compile_all_\",\"19DAT\",\".png\")), width = 40, height = 35, units = 'cm', res = 900)\n# grid.arrange (FigCompile) # Make plot\n# dev.off()\n\n\n\n\nCode\n################## Compilation of interesting graphs #########################\n#FigAngle1=ggarrange(Fig1B_stat,Fig2B_stat,Fig3B_stat,Fig4B_stat,Fig5B_stat,Fig6B_stat, ncol=3, nrow=2,common.legend = TRUE, legend=\"bottom\",labels = c(\"C\",\"D\",\"E\",\"F\",\"G\",\"H\"))\n#FigAngle1\n\n#export to delet\nimg1 &lt;- readPNG(here::here(\"report/root_architecture/img/shema_angle2.png\"))\nimg_A &lt;- ggplot() + background_image(img1) \n\n# png(here::here(paste0(\"xp1_analyse/plot/root_architecture/angle_or_root_tips/angle_abc_abc'_length_branching_1-2_\",\"19DAT\",\".png\")), width = 30, height = 30, units = 'cm', res = 900)\n# grid.arrange (FigAngle1) # Make plot\n# dev.off()\n\ntips_img=ggarrange(Fig_nb_tips,img_A,ncol=2,widths = c(0.6, 1), nrow=1,labels = c(\"A\",\"B\"))\n#compile to del test\nFigCompile=ggarrange(tips_img,FigB,ncol=1, nrow=2,heights=c(1,0.75), legend=\"bottom\")\n#FigCompile\n\n#export to delet\npng(here::here(paste0(\"report/root_architecture/plot/angle_nb_tips_compile_all_\",\"19DAT\",\".png\")), width = 26, height = 22, units = 'cm', res = 900)\ngrid.arrange (FigCompile) # Make plot\ndev.off()\n\n\n\n\n\nCode\n################### stats calcule ############\n# mean visualisation\n# df_global_archi_select %&gt;% dplyr::group_by(genotype,climat_condition) %&gt;% drop_na(nb_tips_macro_2) %&gt;% \n#   dplyr::summarise(nb_tips_1=mean(nb_tips_macro_1),nb_tips_2=mean(nb_tips_macro_2),nb_tips_3=mean(nb_tips_macro_3)) %&gt;% as.data.frame()\n# \n# student test\n# variable=\"nb_tips_macro_3\"\n# \n# df_global_archi %&gt;% filter(days_after_transplantation==19)  %&gt;%\n#   #group_by(genotype) %&gt;% \n#   summarise_each(funs(t.test(.[condition == \"Sto_WW_OT\"], .[condition == \"Sto_WW_HS\"])$p.value), vars = variable)\n# \n# # means comparison\n# df_global_archi_select %&gt;% dplyr::group_by(genotype,condition) %&gt;% \n#   drop_na(nb_tips_macro_2) %&gt;% \n#   #filter(genotype==\"Stocata\") %&gt;% \n#   #filter(climat_condition %in% c(\"WW_OT\",\"WW_HS\")) %&gt;% \n#   dplyr::summarise(nb_tips_2=mean(nb_tips_macro_2)) %&gt;% as.data.frame() %&gt;% mutate(variation_geno=(nb_tips_2[condition==\"Stocata_WW_OT\"]/nb_tips_2[condition==\"Stocata_WW_HS\"])) \n# \n# # rate of change\n# df_global_archi_select %&gt;% dplyr::group_by(climat_condition) %&gt;% \n#   drop_na(nb_tips_macro_2) %&gt;% \n#   #filter(genotype==\"Stocata\") %&gt;% \n#   #filter(climat_condition %in% c(\"WW_OT\",\"WW_HS\")) %&gt;% \n#   dplyr::summarise(nb_tips_2=mean(nb_tips_macro_2)) %&gt;% as.data.frame() %&gt;% mutate(tx_variation_geno=((nb_tips_2[climat_condition==\"WS.OT\"]-nb_tips_2[climat_condition==\"WW.OT\"])/nb_tips_2[climat_condition==\"WW.OT\"])) \n# \n# ############## angle stats #############\n# df_global_archi_select = df_global_archi %&gt;% filter(days_after_transplantation==19)\n\n# #student test\n# vars_to_test &lt;- df_global_archi_select %&gt;% dplyr::select(starts_with(\"Angle\")) %&gt;% \n#   #dplyr::select(ends_with(\"2\"))%&gt;%\n#   colnames()\n# \n# test=df_global_archi_select%&gt;% \n#   summarise_each(funs(t.test(.[condition == \"Sto_WW_OT\"], .[condition == \"Sto_WW_HS\"])$p.value), vars = vars_to_test) \n# \n# colnames(test)=vars_to_test\n# \n# m_angle1=lm(data=df_global_archi_select,Angle_ABC_1~genotype*water_condition*heat_condition)\n# m_angle2=lm(data=df_global_archi_select,Angle_ABC_2~genotype*water_condition*heat_condition)\n# summary (m_angle1)\n# summary (m_angle2)\n# \n# df_global_archi_select %&gt;% dplyr::group_by(climat_condition) %&gt;% \n#   drop_na(Angle_ABC2_2) %&gt;% \n#   #filter(genotype==\"Stocata\") %&gt;% \n#   #filter(climat_condition %in% c(\"WW_OT\",\"WW_HS\")) %&gt;% \n#   dplyr::summarise(Angle_ABC2_1_mean=mean(Angle_ABC2_2)) %&gt;% as.data.frame() %&gt;% mutate(tx_variation_clim=((Angle_ABC2_1_mean[climat_condition==\"WS_HS\"]-Angle_ABC2_1_mean[climat_condition==\"WW_OT\"])/Angle_ABC2_1_mean[climat_condition==\"WW_OT\"])) \n# \n# ############## length stats #############\n# df_global_archi_select = df_global_archi %&gt;% filter(days_after_transplantation==19)\n# \n# #student test\n# vars_to_test &lt;- df_global_archi_select %&gt;% dplyr::select(starts_with(\"B\")) %&gt;% \n#   #dplyr::select(ends_with(\"2\"))%&gt;%\n#   colnames()\n# \n# test=df_global_archi_select%&gt;% \n#   summarise_each(funs(t.test(.[condition == \"Wen_WW_OT\"], .[condition == \"Wen_WS_HS\"])$p.value), vars = vars_to_test) \n# \n# colnames(test)=vars_to_test\n# test\n# \n# # taux de variation\n# df_global_archi_select %&gt;% dplyr::group_by(condition) %&gt;% \n#   drop_na(BC2_1) %&gt;% \n#   #filter(genotype==\"Stocata\") %&gt;% \n#   #filter(climat_condition %in% c(\"WW_OT\",\"WW_HS\")) %&gt;% \n#   dplyr::summarise(BC2_1_mean=mean(BC2_1)) %&gt;% as.data.frame() %&gt;% mutate(tx_variation_geno=((BC2_1_mean[condition==\"Wen_WW_HS\"]-BC2_1_mean[condition==\"Wen_WW_OT\"])/BC2_1_mean[condition==\"Wen_WW_OT\"]))",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Rapid analysis of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/2_rapid_analysis_root_architecture.html#contribution-of-each-variable",
    "href": "report/root_architecture/2_rapid_analysis_root_architecture.html#contribution-of-each-variable",
    "title": "8  Rapid analysis of root architecture data",
    "section": "8.5 Contribution of each variable",
    "text": "8.5 Contribution of each variable\n\n\nCode\ndf_global_archi_select_v=df_global_archi %&gt;%\n  filter(days_after_transplantation==19) %&gt;% \n  filter(recolte==2) %&gt;% \n  dplyr::select(-c(shooting_date, plant_num ,position ,storage_line, unit, date_recolte,pool_BM, pool_iono,  induct_error_evapotranspi,induct_error_root_architecture, note ,plant_letter,recolte)) %&gt;% \n  pivot_longer(-c(plant_num_shooting_date ,genotype,heat_condition,water_condition,condition,days_after_transplantation,climat_condition),names_to = \"variable\")\n\ndf_input=df_global_archi_select_v\n\ncompile_result=as.data.frame(matrix(data=NA,nrow = 0, ncol = 8))\nfor (i in 1:length(levels(as.factor(df_input$variable)))){\n  variable_l_i=as.character(levels(as.factor(df_input$variable))[i])\n  cat( \"Variable:\" ,variable_l_i, \"\\n\")\n  \n  df_x= df_input  %&gt;% \n    filter(variable==variable_l_i) %&gt;% \n    drop_na(value)\n  \n  formula_string &lt;- as.formula(paste(\"value\", \"~\", paste(\"genotype\",\"*\",\"water_condition\",\"*\",\"heat_condition\", sep = \"\")))\n  \n  # Perform ANOVA using the aov function\n  result_variable &lt;- aov(data = df_x, formula = formula_string)\n  anova_result=summary(result_variable)[[1]] %&gt;% mutate(R2 = `Sum Sq` / sum(`Sum Sq`))\n  \n  row_name&lt;-rownames(anova_result)\n  row_name &lt;- gsub(\"genotype\",\"Genotype\",row_name)\n  row_name &lt;- gsub(\"water_condition\",\"Water\",row_name)\n  row_name &lt;- gsub(\"heat_condition\",\"Heat\",row_name)\n  rownames(anova_result)&lt;-row_name\n  anova_result$variable=as.character(df_x$variable)[1]\n  compile_result=rbind(compile_result,anova_result)\n}\n\ncompile_result&lt;-compile_result %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column(\"contribution_variable\") %&gt;% \n  mutate(Significance = case_when(\n    `Pr(&gt;F)` &lt;= 0.001 ~ '***',\n    `Pr(&gt;F)` &lt; 0.01  ~ '**',\n    `Pr(&gt;F)` &lt; 0.05  ~ '*',\n    `Pr(&gt;F)` &lt; 0.1   ~ '.',\n    TRUE            ~ ' '\n  ))\n\ncompile_result=compile_result%&gt;% \n  filter(str_detect(contribution_variable, \"Total\", negate = TRUE)) %&gt;% \n  filter(str_detect(contribution_variable, \"Residual\", negate = TRUE)) %&gt;% \n  mutate(contribution_variable = str_replace_all(contribution_variable, \" \", \"\")) %&gt;% \n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"\\\\$\", \"\"))%&gt;%\n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"[0-9]\", \"\")) %&gt;% \n  mutate(contribution_variable = as.character(contribution_variable)) %&gt;% \n  mutate(fontcolor = ifelse(contribution_variable %in% c(\"Water\", \"Genotype:Water:Heat\"), \"#ffffff\", \"#000000\")) %&gt;% \n  mutate(contribution_variable=fct_relevel(contribution_variable,c(\"Genotype\",\"Water\",\"Heat\", \"Genotype:Water\",\"Genotype:Heat\",\"Water:Heat\",\"Genotype:Water:Heat\"))) %&gt;% \n  mutate(text_output=paste0(round(R2*100,0), \"% \", Significance))\n\ncompile_result =compile_result %&gt;% drop_na()\n\nplot_contrib&lt;-ggplot(compile_result, aes(x = variable, y = R2, fill = contribution_variable)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = ifelse(R2 &gt; 0.02, text_output, \"\")), color = compile_result$fontcolor, position = position_stack(vjust = 0.5), size = 2.5)+\n  scale_fill_manual(values = c(\"#ffd166\", # geno\n                               \"#118ab2\", # water\n                               \"#ef476f\", # heat\n                               \"#06d6a0\", # watergeno\n                               \"#f78c6b\", # genoheat\n                               \"#FFB6C1\", # waterheat\n                               \"#333333\"),\n                    name = \"title of legend (contribution\") +#all\n  scale_y_continuous(labels = scales::percent_format())+\n  scale_color_identity()+\n  labs(x = \"Compartment\",\n       y = \"The relative contribution for the different variables (%)\",\n       ) +\n  theme_minimal()+\n  theme(panel.grid = element_blank(),\n        legend.title = element_blank(),\n        #axis.text.x = element_text(angle = 45,hjust = 1, vjust = 1),\n        axis.title.x = element_blank(),\n        legend.position = \"bottom\"\n        ) +\n  coord_flip()\n        \nggsave(here::here(\"report/root_architecture/plot/contribution.svg\"), plot_contrib, height = 13,width = 12)",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Rapid analysis of root architecture data</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/2_root_architecturedepending_depth.html",
    "href": "report/root_architecture/2_root_architecturedepending_depth.html",
    "title": "9  Analyse Root Architecture dependent of the depth",
    "section": "",
    "text": "9.1 Data importation\nCode\ncoo_root_tips_select=read.csv(here::here(\"data/root/output/coo_root_tips_select.csv\"))%&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")))\n\ncoo_root_angle_select=read.csv(here::here(\"data/root/output/coo_root_angle_select.csv\"))%&gt;%  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\")))",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Analyse Root Architecture dependent of the depth</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/2_root_architecturedepending_depth.html#data-importation",
    "href": "report/root_architecture/2_root_architecturedepending_depth.html#data-importation",
    "title": "9  Analyse Root Architecture dependent of the depth",
    "section": "",
    "text": "9.1.1 Angle\nIs there a difference in angle depending on the depth in the rhizotube?\n\n\nCode\na=1 ; b=10\ncoo_root_angle_select$cut_break=cut(coo_root_angle_select$YB_calc_cm,breaks = c(seq(0,45+a,a)),\n                       labels=c(seq(0,45,a)),include.lowest = TRUE)\np2=coo_root_angle_select %&gt;% \n  filter(!is.na(YB_calc_cm)) %&gt;% \n  filter(!is.na(cut_break)) %&gt;% \n  filter(YB_calc_cm&lt;45) %&gt;% \n  filter(branching==1) %&gt;% ####### warning\n  ggplot(aes(x=as.numeric(as.character(cut_break)),y=Angle_ABC,colour=as.factor(condition))) +\n  stat_summary(aes(group=as.factor(condition)),fun=mean,geom=\"line\",size=1,alpha=0.85)+\n  scale_x_continuous(limits =c(0,45))+xlab(\"Profondeur (cm\")+ylab(\"Angle ABC (°)\")+\n  geom_vline(xintercept = seq(0,45,b) , linetype=\"dashed\", \n             color = \"black\", size=1)+ \n  ggtitle(paste(\"Mean eatch\", a, \"cm for line, for dashed line every\",b, \"cm\",sep=\" \"))+\n  scale_color_manual(values=climate_pallet)\np2\n\n#with smooth function ?\np3=coo_root_angle_select %&gt;% \n  filter(!is.na(YB_calc_cm)) %&gt;% \n  filter(!is.na(cut_break)) %&gt;% \n  filter(YB_calc_cm&lt;45) %&gt;% \n  filter(branching==1) %&gt;% ####### warning\n  #ggplot(aes(x=as.numeric(as.numeric(cut_break)*a),y=Angle_ABC,colour=as.factor(climat_condition),fill=as.factor(climat_condition)))+\n  ggplot(aes(x=as.numeric(as.numeric(cut_break)*a),y=Angle_ABC,colour=as.factor(climat_condition),fill=as.factor(climat_condition),linetype=genotype))+ #trop lourd\n  geom_smooth(alpha=.15)+\n  #geom_point()+\n  geom_vline(xintercept = seq(0,45,b) , linetype=\"dashed\", \n             color = \"black\", size=1)+ \n  #ggtitle(paste(\"Mean eatch\", a, \"cm for line, for dashed line every\",b, \"cm for branching 1\",sep=\" \"))+\n  scale_color_manual(values=climate_pallet)+\n  scale_fill_manual(values=climate_pallet)+\n  coord_flip() + \n  scale_x_reverse()+\n  labs(color=\"Treatment\",fill=\"Treatment\",linetype=\"Genotype\")+\n  theme_bw()+\n  theme(panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  legend.position = \"none\")+\n  xlab(\"Depth in cm\")+ylab(\"Angle ABC (°) each 1cm\")\n\nexport_fig(p=p3,export_path = here::here(\"report/root_architecture/plot/angle_ABC_branching_1_by_profondeur_each_1cm.png\"),export_height = 20,export_width = 24)\n\n\n\nVerification of the hypothesis for a certain depth\n\n\nCode\na=1 ; b=10\ncoo_root_angle_select$cut_break=cut(coo_root_angle_select$YB_calc_cm,breaks = c(seq(0,60,10)),\n                       labels=c(seq(0,50,10)),include.lowest = TRUE)\nprofondeurs=seq(0,40,10)\n\nplots &lt;- lapply(1:length(profondeurs), function(i) {\n  angle_for_plettre&lt;-coo_root_angle_select %&gt;%\n    filter(branching==1) %&gt;%\n    #filter(plant_num!=1005) %&gt;%\n    filter(cut_break ==profondeurs[i]) %&gt;%  \n    dplyr::group_by(condition,heat_condition,water_condition,genotype,plant_num) %&gt;%\n    dplyr::summarise(across(Angle_ABC:Angle_C2BD2, \\(x) mean(x,na.rm=T)))%&gt;%\n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n  \nFigX_stat=stat_analyse(\n    data=angle_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,Angle_ABC),\n    column_value = \"Angle_ABC\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i =  paste0(\"Mean of angle ABC \\n\",profondeurs[i],\" to \",profondeurs[i]+10,\"cm (°) for branching 1\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\npx=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),legend.position = \"right\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))#,plot.caption = element_text(vjust = 10))\nprint(px)+labs(color=\"Treatment\",fill=\"Treatment\")\n})\n\n# Assembling graphics\nfinal_plot &lt;- wrap_plots(plots, ncol = 2)+ \n  plot_layout(guides = \"collect\")+\n  guide_area()+\n  plot_annotation(tag_levels = 'A',\n                  title=\"Combined graph of Angle depending of the depth in soil for angle ABC\",\n                  subtitle=\"19DAP\")\n\npng(here::here(\"report/root_architecture/plot/angle_ABC_depending_depth_19DAP_condition.png\"), width = 16, height = 22, units = 'cm', res = 900)\nfinal_plot\ndev.off()\n\n\n\n\n\n9.1.2 Number of tips\nThe number of root tips depending on the depth? \n\n\nCode\na=1 ; b=10\ncoo_root_tips_select$cut_break=cut(coo_root_tips_select$cm,breaks = c(seq(0,45+a,a)),\n                       labels=c(seq(0,45,a)),include.lowest = TRUE)\np4=coo_root_tips_select %&gt;% \n  filter(!is.na(cm)) %&gt;% \n  filter(!is.na(cut_break)) %&gt;% \n  filter(cm&lt;45) %&gt;% \n  ggplot(aes(x=as.numeric(as.character(cut_break)),y=X,colour=as.factor(condition))) +\n  stat_summary(aes(group=as.factor(condition)),fun=length,geom=\"line\",size=1,alpha=0.85)+\n  scale_x_continuous(limits =c(0,45))+xlab(\"Profondeur (cm\")+ylab(\"Number of root tips\")+\n  geom_vline(xintercept = seq(0,45,b) , linetype=\"dashed\", \n             color = \"black\", size=1)+ \n  ggtitle(paste(\"Mean eatch\", a, \"cm for line, for dashed line every (need verification because huge nuber of root tips\",b, \"cm\",sep=\" \"))+\n  scale_color_manual(values=climate_pallet)\np4\n#export_png(p=p4,export_path = here::here(paste0(\"xp1_analyse/plot/root_architecture/by_profondeur/nb_tips_by_profondeur_cm.png\")),export_height = 20,export_width = 24)\n\n#with smooth\np5=  coo_root_tips_select %&gt;% \n  filter(!is.na(cm)) %&gt;% \n  filter(!is.na(cut_break)) %&gt;% \n  filter(cm&lt;45) %&gt;% \n  dplyr::group_by(climat_condition,heat_condition,water_condition,genotype,plant_num,cut_break) %&gt;% \n  dplyr::summarise(nb_tips = n()) %&gt;%\n  ggplot(aes(x=as.numeric(as.numeric(cut_break)*a),y=nb_tips,colour=climat_condition,fill=climat_condition,linetype=genotype))+\n  geom_smooth(alpha=.15)+\n  #geom_point()+\n  geom_vline(xintercept = seq(0,45,b) , linetype=\"dashed\", \n             color = \"black\", size=1)+ \n  # ggtitle(paste(\"Mean eatch\", a, \"cm for line, for dashed line every\",b, \"cm using smooth\",sep=\" \"))+\n  scale_color_manual(values=climate_pallet)+\n  ylab (\"Number of tips each 1 cm in depth\")+\n  xlab(\"Depth in cm\")+\n  scale_fill_manual(values=climate_pallet)+\n  coord_flip() + \n  scale_x_reverse() +\n  labs(color=\"Treatment\",fill=\"Treatment\",linetype=\"Genotype\")+\n  theme_bw()+\n  theme(panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  legend.position = \"none\")\n  \n#p3=p3+xlab(\"Depth in cm\")+ylab(\"Mean angle ABC (°) each 1cm\")\n#  scale_y_continuous(trans = \"reverse\")\np5\n\nexport_fig(type = \"png\",p=p5,export_path = here::here(paste0(\"report/root_architecture/plot/nb_tips_by_profondeur_cm_smooth_mean1cm.png\")),export_height = 20,export_width = 24)\n\n\n\nVerification of the hypothesis for a certain depth\n\n\nCode\na=1 ; b=10\ncoo_root_tips_select$cut_break=cut(coo_root_tips_select$cm,breaks = c(seq(0,60,10)),\n                       labels=c(seq(0,50,10)),include.lowest = TRUE)\nprofondeurs=seq(0,40,10)\n\ntips_for_plettre &lt;- lapply(1:length(profondeurs), function(i) {\n  tips_for_plettre&lt;-coo_root_tips_select %&gt;%\n    filter(plant_num!=1005) %&gt;%\n    filter(cut_break ==profondeurs[i]) %&gt;%\n    dplyr::group_by(condition,heat_condition,water_condition,genotype,plant_num) %&gt;%\n    dplyr::summarise(nb_tips = n()) %&gt;%\n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n    #filter(branching==1)\n    \n  FigX_stat=stat_analyse(\n      data=tips_for_plettre %&gt;% \n        mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n        mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n      mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n        drop_na(climat_condition,nb_tips) %&gt;% \n        as.data.frame(),\n      column_value = \"nb_tips\",\n      category_variables = c(\"climat_condition\"),\n      grp_var = \"genotype\",\n      show_plot = T,\n      outlier_show = F, \n      label_outlier = \"plant_num\",\n      biologist_stats = T,\n      Ylab_i =  paste0(\"Number of tips in \",profondeurs[i],\" to \",profondeurs[i] + 10,\" cm\"),\n    control_conditions = c(\"WW_OT\"),\n    strip_normale = F,\n    hex_pallet = climate_pallet\n  )\n  px=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position = \"right\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))#,plot.caption = element_text(vjust = 10))\n  print(px)+labs(color=\"Treatment\",fill=\"Treatment\")\n})\n\n# Assembling graphics\nfinal_plot &lt;- wrap_plots(plots, ncol = 2)+ \n  plot_layout(guides = \"collect\")+\n  guide_area()+\n  plot_annotation(tag_levels = 'A',\n                  title=\"Combined graph of the number of tips depending of the depth in soil (each 10cm)\",\n                  subtitle=\"19DAP\")\n\npng(here::here(\"report/root_architecture/plot/nb_tips_depending_depth_19DAP_condition.png\"), width = 16, height = 22, units = 'cm', res = 900)\nfinal_plot\ndev.off()\n\n\n\nAgain we have very good result depending of the depth",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Analyse Root Architecture dependent of the depth</span>"
    ]
  },
  {
    "objectID": "report/root_architecture/2_root_architecturedepending_depth.html#figure-for-the-publication",
    "href": "report/root_architecture/2_root_architecturedepending_depth.html#figure-for-the-publication",
    "title": "9  Analyse Root Architecture dependent of the depth",
    "section": "9.2 Figure for the publication",
    "text": "9.2 Figure for the publication\n\n\nCode\n# part stats to compile (only 10 to 20 and 30 to 40) ######\na=1 ; b=10\ncoo_root_tips_select$cut_break=cut(coo_root_tips_select$cm,breaks = c(seq(0,60,10)),\n                       labels=c(seq(0,50,10)),include.lowest = TRUE)\nprofondeurs=seq(0,40,10)\n\n##### tipe 10 to 20\ntips_for_plettre&lt;-coo_root_tips_select %&gt;%\n    filter(plant_num!=1005) %&gt;%\n    filter(cut_break ==profondeurs[2]) %&gt;%\n    dplyr::group_by(condition,heat_condition,water_condition,genotype,plant_num) %&gt;%\n    dplyr::summarise(nb_tips = n()) %&gt;%\n    mutate(condition=factor(condition,levels=c(\"Stp_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\")))\n    #filter(branching==1)\n    \nFigX_stat=stat_analyse(\n    data=tips_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,nb_tips) %&gt;% \n      as.data.frame(),\n    column_value = \"nb_tips\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i =  paste0(\"Number of tips in \",profondeurs[2],\" to \",profondeurs[2] + 10,\" cm\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\npx1=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position = \"bottom\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+ylim(0,250)+\n    labs(color=\"Treatment\",fill=\"Treatment\")\n\n#### tips 30 to 40\ntips_for_plettre&lt;-coo_root_tips_select %&gt;%\n    filter(plant_num!=1005) %&gt;%\n    filter(cut_break ==profondeurs[4]) %&gt;%\n    dplyr::group_by(condition,heat_condition,water_condition,genotype,plant_num) %&gt;%\n    dplyr::summarise(nb_tips = n()) %&gt;%\n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n    #filter(branching==1)\n    \nFigX_stat=stat_analyse(\n    data=tips_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,nb_tips) %&gt;% \n      as.data.frame(),\n    column_value = \"nb_tips\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i =  paste0(\"Number of tips in \",profondeurs[4],\" to \",profondeurs[4] + 10,\" cm\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\npx2=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position = \"bottom\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+ylim(0,250)+labs(color=\"Treatment\",fill=\"Treatment\")\n\n###### angle 10 to 20\na=1 ; b=10\ncoo_root_angle_select$cut_break=cut(coo_root_angle_select$YB_calc_cm,breaks = c(seq(0,60,10)),\n                       labels=c(seq(0,50,10)),include.lowest = TRUE)\nprofondeurs=seq(0,40,10)\n\nangle_for_plettre&lt;-coo_root_angle_select %&gt;%\n    filter(branching==1) %&gt;%\n    #filter(plant_num!=1005) %&gt;%\n    filter(cut_break ==profondeurs[3]) %&gt;%  \n    dplyr::group_by(condition,heat_condition,water_condition,genotype,plant_num) %&gt;%\n    dplyr::summarise(across(Angle_ABC:Angle_C2BD2, \\(x) mean(x,na.rm=T)))%&gt;%\n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n  \nFigX_stat=stat_analyse(\n    data=angle_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,Angle_ABC) %&gt;% \n      filter(plant_num != 1094) %&gt;% \n      as.data.frame(),\n    column_value = \"Angle_ABC\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i =  paste0(\"Angle ABC \\n\",profondeurs[3],\" to \",profondeurs[3]+10,\" cm (°) for branching 1\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\npx3=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),legend.position = \"right\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+ylim(55,102)+labs(color=\"Treatment\",fill=\"Treatment\")\n\n###### angle 30 to 40\n\na=1 ; b=10\ncoo_root_angle_select$cut_break=cut(coo_root_angle_select$YB_calc_cm,breaks = c(seq(0,60,10)),\n                       labels=c(seq(0,50,10)),include.lowest = TRUE)\nprofondeurs=seq(0,40,10)\n\nangle_for_plettre&lt;-coo_root_angle_select %&gt;%\n    filter(branching==1) %&gt;%\n    filter(plant_num!=1005) %&gt;%\n    filter(cut_break ==profondeurs[4]) %&gt;%  \n    dplyr::group_by(condition,heat_condition,water_condition,genotype,plant_num) %&gt;%\n    dplyr::summarise(across(Angle_ABC:Angle_C2BD2, \\(x) mean(x,na.rm=T)))%&gt;%\n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n  \nFigX_stat=stat_analyse(\n    data=angle_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,Angle_ABC) %&gt;% \n      as.data.frame(),\n    column_value = \"Angle_ABC\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"plant_num\",\n    biologist_stats = T,\n    Ylab_i =  paste0(\"Angle ABC \\n\",profondeurs[4],\" to \",profondeurs[4]+10,\" cm (°) for branching 1\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\npx4=FigX_stat[[\"plot\"]] + theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),legend.position = \"bottom\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+ylim(55,102)+labs(color=\"Treatment\",fill=\"Treatment\")\n\nfinal_plot=ggarrange(p5,p3,ncol=1,widths = c(1, 1), nrow=2,labels = c(\"A\",\"D\"),legend=\"bottom\",common.legend = T)\n\nstats_tips_angle=ggarrange(px1,px2,px3,px4,ncol=2, nrow=2,labels = c(\"B\",\"C\",\"E\",\"F\"),legend=\"bottom\",common.legend = T)\n\nplot_final=ggarrange(final_plot ,stats_tips_angle,ncol=2,widths = c(0.9, 0.7), nrow=1,legend=\"bottom\",common.legend = T,align = \"v\")\n\n\n# png(here::here(\"report/root_architecture/plot/fig_publie_angle_nb_tips_depending_depth.png\"), width = 32, height = 22, units = 'cm', res = 900)\n# plot_final\n# dev.off()\n\nsvg(here::here(\"report/root_architecture/plot/fig_publie_angle_nb_tips_depending_depth.svg\"), width = 32/2.5, height = 22/2.5)\nplot_final\ndev.off()",
    "crumbs": [
      "**🫚 Root architecture**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Analyse Root Architecture dependent of the depth</span>"
    ]
  },
  {
    "objectID": "report/iono/0A_preprocessing_iono.html",
    "href": "report/iono/0A_preprocessing_iono.html",
    "title": "10  Pre-processing of ionomic data",
    "section": "",
    "text": "10.1 Data importation\nCode\nplant_info=read_excel(here::here(\"data/plant_information.xlsx\"))\nCode\n# Creation of one function who analyse eatch excel for root, leaf and steam\nsource(here::here(\"src/function/iono/import_data_ionomic.R\"))\n\n#data importation ----\nlist_name_excel=c(\"ICP-2022-04E-M. Prudent_modif.xlsx\",\"ICP-2022-06E-M. Prudent_modif.xlsx\",\"ICP-2022-07E-M. Prudent_modif.xlsx\")\nlist_range=c(\"A42:AE95\",\"A39:AE92\",\"A40:AE93\")\nlist_range_colname=c(\"B25:AE25\",\"B25:AE25\",\"B25:AE25\")\nlist_compartiment=c(\"leaf\",\"root\",\"stem\")\n\ndf_ionomic=data.frame()\nfor (i in 1:length(list_name_excel)){\n  print(list_compartiment[i])\n  df_ionomic_x=import_data_ionomic(name_excel_x=list_name_excel[i],range_data_x=list_range[i],colname_x=list_range_colname[i],compartiment_x=list_compartiment[i])\n  df_ionomic=rbind(df_ionomic,df_ionomic_x)\n}\n\ndf_ionomic$only_C_and_N=NA\n\n# Importation of CHN analyse \ndf_chn=read_excel(here::here(\"data/iono/CHN/tableau résultats Corentin_compile.xlsx\"))\ndf_chn_vertical=df_chn %&gt;% \n  pivot_longer(c(\"N\",\"C\"),values_to=\"concentration\",names_to=\"compound\")\ndf_chn_vertical=df_chn_vertical %&gt;% \n  #as_tibble(df_chn_vertical) %&gt;% \n  dplyr::rename(id=Echantillon) %&gt;% \n  as.data.frame()\n\ndf_chn_vertical=df_chn_vertical %&gt;%\n  group_by(id,compound) %&gt;%\n  dplyr::summarise(concentration=mean(concentration))\n\ndf_chn_vertical$concentration=df_chn_vertical$concentration*10000\n\ndf_chn_vertical$compartiment_code=substr(df_chn_vertical$id,start=1,stop=1)\ndf_chn_vertical$plant_num=substr(df_chn_vertical$id,2,nchar(df_chn_vertical$id))\n\ndf_chn_vertical$compartiment[df_chn_vertical$compartiment_code==\"L\"] &lt;- \"leaf\"\ndf_chn_vertical$compartiment[df_chn_vertical$compartiment_code==\"S\"] &lt;- \"stem\"\ndf_chn_vertical$compartiment[df_chn_vertical$compartiment_code==\"R\"] &lt;- \"root\"\n\n\ndf_chn_vertical$compartiment_compound=paste0(df_chn_vertical$compartiment, \"_\", df_chn_vertical$compound)\ndf_chn_vertical$compound_compartiment=paste0(df_chn_vertical$compound, \"_\", df_chn_vertical$compartiment)\ndf_chn_vertical$justesse=1\ndf_chn_vertical$color=\"vert\"\n\nplant_info=read_excel(here::here(\"data/plant_information.xlsx\"))\ndf_chn_vertical=merge(plant_info,df_chn_vertical,by=\"plant_num\",all.y=T)\n\n# Add column only_C_N on plant_info \n# df_chn_vertical$only_C_and_N=T\n\n# Convert x in only_C_N into  into T\ndf_chn_vertical$only_C_and_N= ifelse(df_chn_vertical$only_C_and_N==\"x\",T,NA)\n\ndf_ionomic=rbind(df_ionomic,df_chn_vertical)\n\n# Allocation and quantity of ion in eatch plant\n#1- Importation of the data and merge\nBM=read.csv2(here::here(\"data/physio/global_physio.csv\"))\ndf_ionomic$plant_num=as.integer(df_ionomic$plant_num)\ndf_ionomic=merge(df_ionomic, BM %&gt;% dplyr::select(plant_num, weight_root,weight_leaf, weight_stem, leaf_area, stem_area), by= \"plant_num\", all=T) %&gt;% drop_na(concentration)\ndf_ionomic$weight_total=df_ionomic$weight_leaf+df_ionomic$weight_root+df_ionomic$weight_stem\n\n# Corection of the justesse with color\n# Justesse\ndf_ionomic$note=NA\ndf_ionomic$correct_concentration=NA\nfor( i in 1:length(df_ionomic$plant_num)){\n  if(is.na(df_ionomic$color[i])){next}\n  else if(df_ionomic$color[i]==\"jaune\"){\n    df_ionomic$correct_concentration[i]=df_ionomic$concentration[i]/df_ionomic$justesse[i]\n  }else if(df_ionomic$color[i]==\"vert\"){\n    df_ionomic$correct_concentration[i]=df_ionomic$concentration[i]\n  }else if (df_ionomic$color[i]==\"rouge\"){\n    df_ionomic$correct_concentration[i]=NA\n    df_ionomic$note[i]=\"[justesse color is red]\"\n  }\n}\n\ntest=df_ionomic %&gt;% filter(is.na(concentration))\n\n# By organe\ndf_ionomic$qty=NA\nfor(i in 1:length(df_ionomic$plant_num)){\n  if(is.na(df_ionomic$compartiment_code[i])){next}\n  else if(df_ionomic$compartiment_code[i]==\"L\"){\n    df_ionomic$qty[i]=df_ionomic$correct_concentration[i]*df_ionomic$weight_leaf[i]\n  }else if(df_ionomic$compartiment_code[i]==\"S\"){\n    df_ionomic$qty[i]=df_ionomic$correct_concentration[i]*df_ionomic$weight_stem[i]\n  }else if(df_ionomic$compartiment_code[i]==\"R\"){\n    df_ionomic$qty[i]=df_ionomic$correct_concentration[i]*df_ionomic$weight_root[i]\n  }\n}\n\n# Allocation in %\ndf_ionomic=df_ionomic %&gt;% \n  group_by(plant_num, compound) %&gt;%\n  mutate(sum_by_component=sum(qty, na.rm = T),\n         num_compartiment=n()) %&gt;% \n  mutate(allocation=ifelse(num_compartiment==3,qty/sum_by_component,NA))\n\n# Create id for ionomic\ndf_ionomic$id_sample=paste0( df_ionomic$plant_num, \"_\", df_ionomic$compartiment_code)\ndf_ionomic$condition_organe=paste0(df_ionomic$condition,\"_\",df_ionomic$compartiment)\n\n# Add type ion\ndf_ionomic$type_ion=NA\ndf_ionomic$type_ion_num=NA\nfor (i in 1:length(df_ionomic$compound)){\n  if(\n      df_ionomic$compound[i]==\"C\" || \n      df_ionomic$compound[i]==\"N\" ||\n      df_ionomic$compound[i]==\"Mg24\"||\n      df_ionomic$compound[i]==\"P31\"||\n      df_ionomic$compound[i]==\"S32\"||\n      df_ionomic$compound[i]==\"K39\"||\n      df_ionomic$compound[i]==\"Ca44\"\n     ){\n      df_ionomic$type_ion[i]=\"essential_macroelement\"\n      df_ionomic$type_ion_num[i]=1\n  } else if (\n      df_ionomic$compound[i]==\"B11\" || \n      df_ionomic$compound[i]==\"Mn55\"||\n      df_ionomic$compound[i]==\"Fe56\"||\n      df_ionomic$compound[i]==\"Ni60\"||\n      df_ionomic$compound[i]==\"Cu63\"||\n      df_ionomic$compound[i]==\"Zn66\"||\n      df_ionomic$compound[i]==\"Mo98\"||\n      df_ionomic$compound[i]==\"Mo95\"\n  ){\n    df_ionomic$type_ion[i]=\"essential_microelement\"\n    df_ionomic$type_ion_num[i]=2\n  }\n  else if (\n    df_ionomic$compound[i]==\"Na23\" || \n    df_ionomic$compound[i]==\"Si28\"||\n    df_ionomic$compound[i]==\"Al27\"||\n    df_ionomic$compound[i]==\"V51\"||\n    df_ionomic$compound[i]==\"Co59\"||\n    df_ionomic$compound[i]==\"Se77\"\n  ){\n    df_ionomic$type_ion[i]=\"beneficial_element\"\n    df_ionomic$type_ion_num[i]=3\n  }\n  else if (\n    df_ionomic$compound[i]==\"Ag107\" || \n    df_ionomic$compound[i]==\"As75\"||\n    df_ionomic$compound[i]==\"Ba137\"||\n    df_ionomic$compound[i]==\"Be9\"||\n    df_ionomic$compound[i]==\"Cd111\"||\n    df_ionomic$compound[i]==\"Cr52\"|| \n    df_ionomic$compound[i]==\"Pb208\"||\n    df_ionomic$compound[i]==\"Rb85\"||\n    df_ionomic$compound[i]==\"Sb121\"||\n    df_ionomic$compound[i]==\"Ti49\"||\n    df_ionomic$compound[i]==\"Tl205\"\n  ){\n    df_ionomic$type_ion[i]=\"other\"\n    df_ionomic$type_ion_num[i]=4\n  }\n}",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Pre-processing of ionomic data</span>"
    ]
  },
  {
    "objectID": "report/iono/0A_preprocessing_iono.html#filter-outlier-and-cleaning-data",
    "href": "report/iono/0A_preprocessing_iono.html#filter-outlier-and-cleaning-data",
    "title": "10  Pre-processing of ionomic data",
    "section": "10.2 Filter outlier and cleaning data",
    "text": "10.2 Filter outlier and cleaning data\n\n10.2.1 Verif outlier\n\n\n10.2.2 Extraction of good results only\n\n\nCode\ndf_ionomic=df_ionomic %&gt;%\n  filter(!plant_num%in%c(1087,1039,93,1027)) %&gt;% \n  filter(!compound%in%c(\"Al27\",\"Si28\",\"Ag107\",\"Pb208\",\"Mo98\",\"Ti49\",\"Sb121\"))\n\n\n\n\n\n\n\n\nI delet 93, 1027, 1039 and 1087\n\n\n\n\n\n\n\n\n\n\n\n\nI not analyse Al, Si, Pb, Ag, Ti and S because the results are not interesting or the variability is too higher\n\n\n\n\n\n\n\n\nCode\n# Exportation of the results\n\ndf_ionomic_export&lt;- apply(df_ionomic,2,as.character)\nwrite.csv(as.data.frame(df_ionomic_export),row.names = F,here::here(\"data/iono/output/ionomic.csv\"))\nwrite.csv(as.data.frame(df_ionomic),row.names = F,here::here(\"data/iono/output/ionomic_with_na.csv\"))",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Pre-processing of ionomic data</span>"
    ]
  },
  {
    "objectID": "report/iono/0B_preprocessing_efficiency.html",
    "href": "report/iono/0B_preprocessing_efficiency.html",
    "title": "11  Pre-processing for efficiency in ionomic analyse",
    "section": "",
    "text": "11.1 Data importation\nCode\nplant_info=read_excel(here::here(\"data/plant_information.xlsx\"))\ndf_ionomic=read.csv(here::here(\"data/iono/output/ionomic.csv\"))\ndf_ionomic %&gt;% filter(condition==\"Sto_WS_HS\") %&gt;% filter(compound==\"Cd111\")",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Pre-processing for efficiency in ionomic analyse</span>"
    ]
  },
  {
    "objectID": "report/iono/0B_preprocessing_efficiency.html#data-importation",
    "href": "report/iono/0B_preprocessing_efficiency.html#data-importation",
    "title": "11  Pre-processing for efficiency in ionomic analyse",
    "section": "",
    "text": "Beware of powder assemblies for two plants of the same condition and outliers\n\n\n\n\nNote that when I pooler I consider twice the same value for two different plants. Ex: 1067 and 1069 pooler. The result goes to 1067 and 1069 not to 1067&1069)\nI also removed the two plants 1039 and 1087 on 14/12/2022 for random draws (two plants out of type).",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Pre-processing for efficiency in ionomic analyse</span>"
    ]
  },
  {
    "objectID": "report/iono/0B_preprocessing_efficiency.html#efficicence-with-bootstrap",
    "href": "report/iono/0B_preprocessing_efficiency.html#efficicence-with-bootstrap",
    "title": "11  Pre-processing for efficiency in ionomic analyse",
    "section": "11.2 Efficicence with bootstrap",
    "text": "11.2 Efficicence with bootstrap\n\n11.2.1 Function for bootstrap EUE & sREU\nFunction for Element Use Efficiency based on random drawing between plant at harvest 1 (control plant) and plant at harvest 2 (control or also treated condition). Each time we combine the same genotype. Idem for specific Root Element Uptake but is an integration during between date and we use root weight.\n\n\nCode\n# warning, concentration in µg/g en root in g. \nrandom_drawing_iono_EUE_sREU&lt;-function(rep){\n  set.seed(1)\n  \n  df_compile=data.frame()\n  \n  #do it for each compound!!! #Do not take more than one organ because we are looking at the total quantity of an element\n  df_ionomic_select=df_ionomic %&gt;% filter(compartiment==\"leaf\") %&gt;% drop_na(sum_by_component) %&gt;% filter(compound!=\"Sb121\") %&gt;% filter(num_compartiment==3) %&gt;% drop_na(weight_total) %&gt;% filter(sum_by_component&gt;0) %&gt;% filter(!plant_num%in% c(1039,1087))\n  list_condition=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")\n  \n  for(e in levels(as.factor(as.character(df_ionomic_select$compound)))){\n    tic()\n    \n      for(cond in list_condition){\n        for (i in 1:rep){\n          #for R2\n          df_r2=df_ionomic_select %&gt;% filter(recolte==\"2\") %&gt;% filter(compound==e)%&gt;% filter(condition==cond)\n          df_r2_taking=df_r2 %&gt;% filter(plant_num==sample(df_r2$plant_num,1,replace=T))   %&gt;% dplyr::select(weight_total,condition,compound,sum_by_component,plant_num,recolte,date_recolte,weight_root)\n          #now for r1\n          if(str_sub(df_r2_taking$condition, 1, 3)==\"Sto\"){\n            df_r1=df_ionomic_select %&gt;% filter(recolte==\"1\")  %&gt;% filter(compound==e)  %&gt;% filter(condition==\"Sto_WW_OT\")\n            df_r1_taking=df_r1 %&gt;% filter(plant_num==sample(df_r1$plant_num,1,replace=T))  %&gt;% dplyr::select(weight_total,condition,compound,sum_by_component,plant_num,recolte,date_recolte,weight_root)\n            \n          }else {\n            df_r1=df_ionomic_select %&gt;% filter(recolte==\"1\")  %&gt;% filter(compound==e)  %&gt;% filter(condition==\"Wen_WW_OT\")\n            df_r1_taking=df_r1 %&gt;% filter(plant_num==sample(df_r1$plant_num,1,replace=T))  %&gt;% dplyr::select(weight_total,condition,compound,sum_by_component,plant_num,recolte,date_recolte,weight_root)\n          }\n          \n          colnames(df_r1_taking)=c(\"weight_total_r1\" ,\"condition_r1\" ,\"compound_r1\" ,\"sum_by_component_r1\" ,\"plant_num_r1\",\"recolte_r1\",\"date_recolte_r1\",\"weight_root_r1\")\n          colnames(df_r2_taking)=c(\"weight_total_r2\" ,\"condition_r2\" ,\"compound_r2\" ,\"sum_by_component_r2\" ,\"plant_num_r2\",\"recolte_r2\",\"date_recolte_r2\",\"weight_root_r2\")\n          \n          df_bind=cbind(df_r2_taking,df_r1_taking)\n          df_bind$rep=i\n          \n          ####################### Element Uptake Eficiency ##########################\n          df_bind$EUE= (df_bind$weight_total_r2-df_bind$weight_total_r1) / (df_bind$sum_by_component_r2-df_bind$sum_by_component_r1)\n          \n          #juste to verify\n          df_bind$EUE_numerator=(df_bind$weight_total_r2-df_bind$weight_total_r1) \n          df_bind$EUE_denominator=(df_bind$sum_by_component_r2-df_bind$sum_by_component_r1)\n          \n          ####################### Specific Root Element Uptake  ##########################\n          df_bind$sEUpE=(df_bind$sum_by_component_r2-df_bind$sum_by_component_r1)/\n            (( (as.numeric(as.Date(df_bind$date_recolte_r2)-as.Date(df_bind$date_recolte_r1))) * (df_bind$weight_root_r2+df_bind$weight_root_r1)/2 ))\n          \n          df_compile=rbind(df_compile,df_bind)\n        }\n        print(paste(sep=\"_\",e,cond))}\n    toc()\n  }\n  \n  df_compile$compile_rep=paste(sep=\"_\",df_compile$rep,df_compile$condition_r2)\n  \n  #df_compile =df_compile %&gt;% filter(EUE&gt;0)\n  \n  #write result\n  write.csv(df_compile,here::here(paste(sep=\"\",\"data/iono/output/random_drawing_EUE_sREU\",\n                                        #as.character(format(Sys.time(), \"%Y%m%d_%H%M%S\")),\n                                        \"_rep\",rep,\".csv\")))\n  return(df_compile)\n}\n\n\n\n\n11.2.2 Function execution with 100 repetitions\n\n\n\n\n\n\nThis function can take a very long time !!!\n\n\n\n\n\n\n\n\nCode\nrep=100\ndf_EUE_sREU=random_drawing_iono_EUE_sREU(rep=rep) #function little bit slow but very usefull\n\n\n\n\n11.2.3 Graphical verification\n\n11.2.3.1 For EUE\n\n\n\n\n\n\nI don’t know if it’s right, but sometimes there are negative values.\n\n\n\nI removed them to generate the graphs\n\n\n\n\nCode\n# Warning, concentration in µg/g en root in g. \ndf_EUE_sREU=read.csv(here::here(\"data/iono/output/random_drawing_EUE_sREU_rep100.csv\"))[-1] #%&gt;% \n  #filter(EUE&gt;0)\n\n# Graphics creation and assembly\nvector_compound=levels(as.factor(as.character(df_EUE_sREU$compound_r1)))\n\nplots &lt;- lapply(1:length(vector_compound), function(i) {\n  df_EUE_sREU_for_plettre&lt;-df_EUE_sREU %&gt;%\n    dplyr::rename(condition=condition_r2) %&gt;% \n    mutate(genotype=ifelse(str_sub(condition, 1,3)==\"Sto\",\"Stocata\",\"Wendy\")) %&gt;% \n    mutate(water_condition=str_sub(condition,5,6)) %&gt;% \n    mutate(heat_condition=str_sub(condition,8,9)) %&gt;% \n    filter(compound_r1==vector_compound[i]) %&gt;%  \n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n  \nFigX_stat=stat_analyse(\n    data=df_EUE_sREU_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,EUE),\n    column_value = \"EUE\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"compile_rep\",\n    biologist_stats = T,\n    Ylab_i =  paste0(\"EUE for \",vector_compound[i], \" (g.µgElement-1)\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\npx=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),legend.position = \"bottom\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+labs(color=\"Treatment\",fill=\"Treatment\")\nprint(px)\n})\n\n# Assembling graphics\nfinal_plot &lt;- wrap_plots(plots, ncol = 4)+ \n  plot_layout(guides = \"collect\")+\n  plot_annotation(tag_levels = 'A',\n                  title=\"Element Use Efficiency. After 100 random drawing\",\n                  subtitle=\"\")& theme(legend.position = 'bottom')\n\npng(here::here(\"report/iono/plot/boxplot_EUE_100rep_treatment.png\"), width = 29.7, height = 42, units = 'cm', res = 900)\nfinal_plot\ndev.off()\n\n\n\n\n\n11.2.3.2 For sREU\n\n\nCode\n# warning, concentration in µg/g en root in g. \ndf_EUE_sREU=read.csv(here::here(\"data/iono/output/random_drawing_EUE_sREU_rep100.csv\"))[-1] %&gt;% \n  #filter(sEUpE&gt;0) %&gt;% \n  dplyr::rename(sREU=sEUpE)\n\n# Graphics creation and assembly\nvector_compound=levels(as.factor(as.character(df_EUE_sREU$compound_r1)))\n\nplots &lt;- lapply(1:length(vector_compound), function(i) {\n  df_EUE_sREU_for_plettre&lt;-df_EUE_sREU %&gt;%\n    dplyr::rename(condition=condition_r2) %&gt;% \n    mutate(genotype=ifelse(str_sub(condition, 1,3)==\"Sto\",\"Stocata\",\"Wendy\")) %&gt;% \n    mutate(water_condition=str_sub(condition,5,6)) %&gt;% \n    mutate(heat_condition=str_sub(condition,8,9)) %&gt;% \n    filter(compound_r1==vector_compound[i]) %&gt;%  \n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n  \nFigX_stat=stat_analyse(\n    data=df_EUE_sREU_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,sREU),\n    column_value = \"sREU\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = F, \n    label_outlier = \"compile_rep\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"sREU (µg \",vector_compound[i],\"[gBMroot day-1]-1)\"), \n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\npx=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),legend.position = \"bottom\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+labs(color=\"Treatment\",fill=\"Treatment\")\nprint(px)\n})\n\n# Assembling graphics\nfinal_plot &lt;- wrap_plots(plots, ncol = 4)+ \n  plot_layout(guides = \"collect\")+\n  plot_annotation(tag_levels = 'A',\n                  title=\"Specific Root Element Uptake. After 100 random drawing\",\n                  subtitle=\"\")& theme(legend.position = 'bottom')\n\npng(here::here(\"report/iono/plot/boxplot_sREU_100rep_treatment.png\"), width = 29.7, height = 48, units = 'cm', res = 900)\nfinal_plot\ndev.off()",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Pre-processing for efficiency in ionomic analyse</span>"
    ]
  },
  {
    "objectID": "report/iono/0B_preprocessing_efficiency.html#efficiency-calculated-with-the-average-of-harvest-1",
    "href": "report/iono/0B_preprocessing_efficiency.html#efficiency-calculated-with-the-average-of-harvest-1",
    "title": "11  Pre-processing for efficiency in ionomic analyse",
    "section": "11.3 Efficiency calculated with the average of harvest 1",
    "text": "11.3 Efficiency calculated with the average of harvest 1\n\n11.3.1 Function for calculate EUE & sREU\nFunction for Element Use Efficiency based on H1 mean (harvest 1, control plant) and plant at harvest 2 (control or also treated condition). Each time we combine the same genotype. Idem for specific Root Element Uptake but is an integration during between date and we use root weight.\n\n\nCode\n# warning, concentration in µg/g en root in g. \nfunction_iono_EUE_sREU&lt;-function(){\n  df_compile=data.frame()\n  df_ionomic_select=df_ionomic %&gt;% filter(compartiment==\"leaf\") %&gt;% drop_na(sum_by_component) %&gt;% filter(compound!=\"Sb121\") %&gt;% filter(num_compartiment==3) %&gt;% drop_na(weight_total) %&gt;% filter(sum_by_component&gt;0) %&gt;% filter(!plant_num%in% c(1039,1087))\n  list_condition=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")\n  \n  for(e in levels(as.factor(as.character(df_ionomic_select$compound)))){\n      for(cond in list_condition){\n          df_r2=df_ionomic_select %&gt;% filter(recolte==\"2\") %&gt;% filter(compound==e)%&gt;% filter(condition==cond)\n        for (i in 1:nrow(df_r2)){\n          #for R2\n          plant_num_i&lt;-df_r2$plant_num[i]\n          df_r2_taking=df_r2 %&gt;% filter(plant_num==plant_num_i) %&gt;% dplyr::select(condition, compound, recolte, date_recolte, plant_num,weight_total,weight_root,sum_by_component)\n          \n          #now for r1\n          if(str_sub(df_r2_taking$condition, 1, 3)==\"Sto\"){\n            df_r1=df_ionomic_select %&gt;% filter(recolte==\"1\")  %&gt;% filter(compound==e)  %&gt;% filter(condition==\"Sto_WW_OT\")\n            df_r1_mean=df_r1 %&gt;% dplyr::group_by(condition,compound,recolte,date_recolte)%&gt;% \n              dplyr::summarise(across(c(\"weight_total\",\"weight_root\", \"sum_by_component\"), ~ mean(.x, na.rm = TRUE))) %&gt;% \n  dplyr::rename_all(~ paste0(., \"_H1\"))\n            \n          }else {\n            df_r1=df_ionomic_select %&gt;% filter(recolte==\"1\")  %&gt;% filter(compound==e)  %&gt;% filter(condition==\"Wen_WW_OT\")\n            df_r1_mean=df_r1 %&gt;% dplyr::group_by(condition,compound,recolte,date_recolte)%&gt;% \n              dplyr::summarise(across(c(\"weight_total\",\"weight_root\", \"sum_by_component\"), ~ mean(.x, na.rm = TRUE))) %&gt;% \n  dplyr::rename_all(~ paste0(., \"_H1\"))\n          }\n          \n          colnames(df_r1_mean)=c(\"condition_H1\" ,\"compound_H1\" ,\"Harvest_1\",\"date_recolte_H1\",\"weight_total_H1\" ,\"weight_root_H1\",\"sum_by_component_H1\")\n          colnames(df_r2_taking)=c(\"condition_H2\" ,\"compound_H2\", \"Harvest_H2\", \"date_recolte_H2\", \"plant_num_H2\",\"weight_total_H2\", \"weight_root_H2\",\"sum_by_component_H2\")\n          \n          df_bind=cbind(df_r2_taking,df_r1_mean)\n          \n          ####################### Element Uptake Eficiency ##########################\n          df_bind$EUE= (df_bind$weight_total_H2-df_bind$weight_total_H1) / (df_bind$sum_by_component_H2-df_bind$sum_by_component_H1)\n          \n          #juste to verify\n          df_bind$EUE_numerator=(df_bind$weight_total_H2-df_bind$weight_total_H1) \n          df_bind$EUE_denominator=(df_bind$sum_by_component_H2-df_bind$sum_by_component_H1)\n          \n          ####################### Specific Root Element Uptake  ##########################\n          df_bind$sEUpE=(df_bind$sum_by_component_H2-df_bind$sum_by_component_H1)/\n            (( (as.numeric(as.Date(df_bind$date_recolte_H2)-as.Date(df_bind$date_recolte_H1))) * (df_bind$weight_root_H2+df_bind$weight_root_H1)/2))\n          df_compile=rbind(df_compile,df_bind)\n        }\n        cat(paste(e,\" \",cond, \"\\n\"))}\n  }\n  \n  #write result\n  write.csv(df_compile,here::here(\"data/iono/output/EUE_sREU_1mean.csv\"))\n  return(df_compile)\n}\n\n\n\n\n11.3.2 Function execution\n\n\nCode\ndf_EUE_sREU=function_iono_EUE_sREU()\n\n\n\n\n11.3.3 Graphical verification\n\n11.3.3.1 For EUE\n\n\n\n\n\n\nI don’t know if it’s right, but sometimes there are negative values.\n\n\n\nI removed them to generate the graphs\n\n\n\n\nCode\n# warning, concentration in µg/g en root in g. \ndf_EUE_sREU=read.csv(here::here(\"data/iono/output/EUE_sREU_1mean.csv\"))[-1]# %&gt;% \n  #filter(EUE&gt;0)\n# Graphics creation and assembly\nvector_compound=levels(as.factor(as.character(df_EUE_sREU$compound_H1)))\n\nplots &lt;- lapply(1:length(vector_compound), function(i) {\ncat_col(c(vector_compound[i],\"\\n\"),color = \"green\")\n\n    df_EUE_sREU_for_plettre&lt;-df_EUE_sREU %&gt;%\n    dplyr::rename(condition=condition_H2) %&gt;% \n    mutate(genotype=ifelse(str_sub(condition, 1,3)==\"Sto\",\"Stocata\",\"Wendy\")) %&gt;% \n    mutate(water_condition=str_sub(condition,5,6)) %&gt;% \n    mutate(heat_condition=str_sub(condition,8,9)) %&gt;% \n    filter(compound_H1==vector_compound[i]) %&gt;%  \n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n  \nFigX_stat=stat_analyse(\n    data=df_EUE_sREU_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,EUE),\n    column_value = \"EUE\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = T, \n    label_outlier = \"plant_num_H2\",\n    biologist_stats = T,\n    Ylab_i =  paste0(\"EUE for \",vector_compound[i], \" (g.µgElement-1)\"),\n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\npx=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),legend.position = \"bottom\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+labs(color=\"Treatment\",fill=\"Treatment\")\nprint(px)\n})\n\n# Assembling graphics\nfinal_plot &lt;- wrap_plots(plots, ncol = 4)+ \n  plot_layout(guides = \"collect\")+\n  plot_annotation(tag_levels = 'A',\n                  title=\"Element Use Efficiency. Mean in harvest 1\",\n                  subtitle=\"\")& theme(legend.position = 'bottom')\n\npng(here::here(\"report/iono/plot/boxplot_EUE_1mean_treatment_outlier_show.png\"), width = 29.7, height = 42, units = 'cm', res = 900)\nfinal_plot\ndev.off()\n\n\n\n\n\n11.3.3.2 For sREU\n\n\nCode\n# warning, concentration in µg/g en root in g. \ndf_EUE_sREU=read.csv(here::here(\"data/iono/output/EUE_sREU_1mean.csv\"))[-1] %&gt;% \n  #filter(sEUpE&gt;0) %&gt;% \n  dplyr::rename(sREU=sEUpE)\n\n# Graphics creation and assembly\nvector_compound=levels(as.factor(as.character(df_EUE_sREU$compound_H1)))\n\nplots &lt;- lapply(1:length(vector_compound), function(i) {\n  cat_col(c(vector_compound[i],\"\\n\"),color = \"green\")\n  df_EUE_sREU_for_plettre&lt;-df_EUE_sREU %&gt;%\n    dplyr::rename(condition=condition_H2) %&gt;% \n    mutate(genotype=ifelse(str_sub(condition, 1,3)==\"Sto\",\"Stocata\",\"Wendy\")) %&gt;% \n    mutate(water_condition=str_sub(condition,5,6)) %&gt;% \n    mutate(heat_condition=str_sub(condition,8,9)) %&gt;% \n    filter(compound_H1==vector_compound[i]) %&gt;%  \n    mutate(condition=factor(condition,levels=c(\"Wen_WW_OT\",\"Wen_WW_HS\",\"Wen_WS_OT\",\"Wen_WS_HS\",\"Sto_WW_OT\",\"Sto_WW_HS\",\"Sto_WS_OT\",\"Sto_WS_HS\")))\n  \nFigX_stat=stat_analyse(\n    data=df_EUE_sREU_for_plettre %&gt;% \n      mutate(climat_condition=paste0(water_condition,\"_\",heat_condition)) %&gt;% \n      mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n    mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n      drop_na(climat_condition,sREU),\n    column_value = \"sREU\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = T,\n    outlier_show = T, \n    label_outlier = \"plant_num_H2\",\n    biologist_stats = T,\n    Ylab_i = paste0(\"sREU (µg \",vector_compound[i],\"[gBMroot day-1]-1)\"), \n  control_conditions = c(\"WW_OT\"),\n  strip_normale = F,\n  hex_pallet = climate_pallet\n)\n\npx=FigX_stat[[\"plot\"]] +  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),legend.position = \"bottom\",plot.margin=unit(c(0.1,0.1,0.7,0.1), \"cm\"))+labs(color=\"Treatment\",fill=\"Treatment\")\nprint(px)\n})\n\n# Assembling graphics\nfinal_plot &lt;- wrap_plots(plots, ncol = 4)+ \n  plot_layout(guides = \"collect\")+\n  plot_annotation(tag_levels = 'A',\n                  title=\"Specific Root Element Uptake. Mean in Harvest 1\",\n                  subtitle=\"\")& theme(legend.position = 'bottom')\n\npng(here::here(\"report/iono/plot/boxplot_sREU_1mean_treatment_outlier_show.png\"), width = 29.7, height = 48, units = 'cm', res = 900)\nfinal_plot\ndev.off()",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Pre-processing for efficiency in ionomic analyse</span>"
    ]
  },
  {
    "objectID": "report/iono/2_rapid_analysis_iono.html",
    "href": "report/iono/2_rapid_analysis_iono.html",
    "title": "12  Analysis of ionome",
    "section": "",
    "text": "12.1 Data importation\nCode\ndf_iono=read.csv(here::here(\"data/iono/output/ionomic.csv\"))",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Analysis of ionome</span>"
    ]
  },
  {
    "objectID": "report/iono/2_rapid_analysis_iono.html#table-resume",
    "href": "report/iono/2_rapid_analysis_iono.html#table-resume",
    "title": "12  Analysis of ionome",
    "section": "12.2 Table resume",
    "text": "12.2 Table resume\n\n12.2.1 For concentration\n\nCode\n############ parameter ##############\n# rule for scientific value\nformat_conditionnel &lt;- function(x) {\n  ifelse(x &gt; 1000 | x &gt;= 0.0 & x &lt;= 0.01, format(x, scientific = TRUE, digits = 2), round(x,2))#digit and rule for scientific format\n}\n\n# df input\nfile_i=df_iono %&gt;%\n  filter(recolte==2) %&gt;% \n  dplyr::select(plant_num,condition,compound,correct_concentration, compartiment,genotype) %&gt;% \n  pivot_wider(names_from = \"compound\", values_from = \"correct_concentration\")\n\n# Creation of one table for each genotype, for each organe.\n## possibility\n\ndf_possibilities&lt;-expand.grid(genotype=levels(as.factor(df_iono$genotype)),\n                              compartiment=levels(as.factor(df_iono$compartiment))\n                              )\n\nlist_dataframes &lt;- list() #to create excel\n\nfor (i in 1:nrow(df_possibilities)){\n  # creation of the vector\n  v_essential_macroelement &lt;- df_iono %&gt;% filter (recolte==2) %&gt;% filter(type_ion==\"essential_macroelement\") %&gt;% mutate(compound=as.factor(compound)) %&gt;% pull(compound) %&gt;% levels()\n  v_essential_microelement &lt;- df_iono %&gt;% filter (recolte==2) %&gt;% filter(type_ion==\"essential_microelement\") %&gt;% mutate(compound=as.factor(compound)) %&gt;% pull(compound) %&gt;% levels()\n  v_beneficial_element &lt;- df_iono %&gt;% filter (recolte==2) %&gt;% filter(type_ion==\"beneficial_element\") %&gt;% mutate(compound=as.factor(compound)) %&gt;% pull(compound) %&gt;% levels()\n  v_other &lt;- df_iono %&gt;% filter (recolte==2) %&gt;% filter(type_ion==\"other\") %&gt;% mutate(compound=as.factor(compound)) %&gt;% pull(compound) %&gt;% levels()\n  \n  v_var&lt;-c(v_essential_macroelement, v_essential_microelement,v_beneficial_element, v_other)  # compilation of the vector\n  \n  ############### to modify ###############\n  if(df_possibilities$genotype[i]==\"Stocata\"){\n    gt_table_x&lt;-analyzePlantData(A = \"Sto_WW_OT\",B=\"Sto_WS_OT\",v_var = v_var,file_i=file_i %&gt;% \n      filter(genotype==df_possibilities$genotype[i]) %&gt;% \n      filter(compartiment==df_possibilities$compartiment[i])) %&gt;% \n      dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value)) %&gt;% \n      \n      #compilationwith other condition\n      inner_join(analyzePlantData(A = \"Sto_WW_OT\",B=\"Sto_WW_HS\",v_var = v_var, file_i=file_i %&gt;% \n      filter(genotype==df_possibilities$genotype[i]) %&gt;% \n      filter(compartiment==df_possibilities$compartiment[i])\n      ) %&gt;% \n      dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value,Sto_WW_OT_mean,Sto_WW_OT_sd)),\n      by=\"variable\") %&gt;% \n      \n      inner_join(analyzePlantData(A = \"Sto_WW_OT\",B=\"Sto_WS_HS\",v_var = v_var,file_i=file_i %&gt;% \n      filter(genotype==df_possibilities$genotype[i]) %&gt;% \n      filter(compartiment==df_possibilities$compartiment[i])) %&gt;% \n      dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value,Sto_WW_OT_mean,Sto_WW_OT_sd)),\n      by=\"variable\") %&gt;% \n      arrange(desc(Sto_WW_OT_mean)) \n  }else if (df_possibilities$genotype[i]==\"Wendy\"){\n    gt_table_x&lt;-analyzePlantData(A = \"Wen_WW_OT\",B=\"Wen_WS_OT\",v_var = v_var,file_i=file_i %&gt;% \n      filter(genotype==df_possibilities$genotype[i]) %&gt;% \n      filter(compartiment==df_possibilities$compartiment[i])) %&gt;% \n      dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value)) %&gt;% \n      \n      #compilationwith other condition\n      inner_join(analyzePlantData(A = \"Wen_WW_OT\",B=\"Wen_WW_HS\",v_var = v_var, file_i=file_i %&gt;% \n      filter(genotype==df_possibilities$genotype[i]) %&gt;% \n      filter(compartiment==df_possibilities$compartiment[i])\n      ) %&gt;% \n      dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value,Wen_WW_OT_mean,Wen_WW_OT_sd)),\n      by=\"variable\") %&gt;% \n      \n      inner_join(analyzePlantData(A = \"Wen_WW_OT\",B=\"Wen_WS_HS\",v_var = v_var,file_i=file_i %&gt;% \n      filter(genotype==df_possibilities$genotype[i]) %&gt;% \n      filter(compartiment==df_possibilities$compartiment[i])) %&gt;% \n      dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value,Wen_WW_OT_mean,Wen_WW_OT_sd)),\n      by=\"variable\")%&gt;% \n      arrange(desc(Wen_WW_OT_mean))\n  }\n  gt_table_x=gt_table_x %&gt;% \n      dplyr::mutate(type_variable = case_when(\n        variable %in% v_essential_macroelement ~ \"Essential macroelement\",\n        variable %in% v_essential_microelement ~ \"Essential microelement\",\n        variable %in% v_beneficial_element ~ \"Beneficial element\",\n        variable %in% v_other ~ \"Other\",\n        TRUE ~ \"Other variable\" \n      )) %&gt;% \n     mutate(type_variable=factor(type_variable,levels=c(\"Essential macroelement\",\"Essential microelement\",\"Beneficial element\",\"Other\"))) %&gt;% \n      tibble() %&gt;% \n       mutate(type_variable = factor(type_variable)) %&gt;%\n      arrange(type_variable) %&gt;% \n      \n      dplyr::mutate(across(where(is.numeric), ~format_conditionnel(.x))) %&gt;% \n      dplyr::mutate(across(contains(\"sd\"), ~paste0(\"±\", .))) %&gt;% \n      dplyr::mutate(variable = str_replace_all(variable, \"[0-9]\", \"\")) %&gt;% \n      dplyr::mutate(variable = paste0(variable,\" (µg/g)\"))\n  \n  list_dataframes[[paste(df_possibilities$compartiment[i],\"_\", df_possibilities$genotype[i])]] &lt;- gt_table_x # Each loop is a panel in excel\n  \n  gt_table_x=gt_table_x %&gt;%   \n      gt(groupname_col = \"type_variable\") %&gt;% \n      tab_options(\n        row.striping.include_table_body = TRUE\n      ) %&gt;%\n      tab_style(\n        style = list(\n          cell_text(weight = \"bold\")\n        ),\n        locations = cells_column_labels(columns = TRUE)\n      ) %&gt;%\n      tab_style(\n        style =list(\n          cell_text(style  = \"italic\")),\n        locations = cells_group(groups = TRUE)\n      ) %&gt;% \n      tab_style(\n        style = cell_text(weight = \"bold\", align=\"center\"),\n        locations = cells_body(\n          columns = c(contains(\"_mean\"))\n        )\n      )\n  if(df_possibilities$genotype[i]==\"Stocata\"){\n      gt_table_x=gt_table_x %&gt;% cols_label(\n        variable = \"Variable\",\n        Sto_WW_OT_mean = \"Sto_WW_OT\",\n        Sto_WW_OT_sd = \"\",\n        \n        Sto_WS_OT_mean = \"Sto_WS_OT\",\n        Sto_WW_HS_mean = \"Sto_WW_HS\",\n        Sto_WS_HS_mean = \"Sto_WS_HS\",\n        \n        Sto_WS_OT_sd = \" \",\n        Sto_WW_HS_sd = \" \",\n        Sto_WS_HS_sd = \" \",\n        \n        Sto_WS_OT_Significance = \"\",\n        Sto_WW_HS_Significance = \"\",\n        Sto_WS_HS_Significance = \"\"\n        ) %&gt;% \n        tab_header(\n        title = md(paste0(\"Summary of concentration in element for Stocata in \",df_possibilities$compartiment[i])) #,\n        # subtitle = \"Yearly measurements of Bill depth, Bill length, Body Mass and Flipper Length in each island \"\n        ) \n  }else if (df_possibilities$genotype[i]==\"Wendy\"){\n    gt_table_x=gt_table_x %&gt;% cols_label(\n          variable = \"Variable\",\n          Wen_WW_OT_mean = \"Wen_WW_OT\",\n          Wen_WW_OT_sd = \"\",\n          \n          Wen_WS_OT_mean = \"Wen_WS_OT\",\n          Wen_WW_HS_mean = \"Wen_WW_HS\",\n          Wen_WS_HS_mean = \"Wen_WS_HS\",\n          \n          Wen_WS_OT_sd = \" \",\n          Wen_WW_HS_sd = \" \",\n          Wen_WS_HS_sd = \" \",\n          \n          Wen_WS_OT_Significance = \"\",\n          Wen_WW_HS_Significance = \"\",\n          Wen_WS_HS_Significance = \"\"\n          ) %&gt;% \n          tab_header(\n          title = md(paste0(\"Summary of concentration in element for Wendy in \",df_possibilities$compartiment[i]))#,\n          # subtitle = \"Yearly measurements of Bill depth, Bill length, Body Mass and Flipper Length in each island \"\n        ) \n    }\n    \n  gt_table_x=    gt_table_x %&gt;% \n      tab_footnote(\n          footnote = \"For each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\"\n                       ) # %&gt;% \n      #  text_case_match(\n      #   \"An\" ~  \"An (\\U00B5mol CO\\U2082.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n      #   \"DW_leaf\" ~ \"Leaf dry weight (g)\",\n      #   \"DW_stem\" ~ \"Stem dry weight (g)\",\n      #   \"DW_root\" ~ \"Root dry weight (g)\",\n      #   \"leaf_Area\" ~ \"Leaf area (cm²)\",\n      #   \"RUE\" ~ \"RUE (g.cm\\U207B\\U00B2)\",\n      #   \"Tot_DW\" ~ \"Total dry weiht (g)\",\n      #   \"BC2_1\"~\"Length root order 1 (cm)\",\n      #   \"density\"~\"Density\", \n      #   \"root_LR1\"~\"LR1\",\n      #   \"root_LR3\"~\"LR3\",\n      #   \"root_Area\"~\"Root Area (cm²)\", \n      #   \"root_ConvexHull\"~\"Area of the root convex hull (cm²)\",\n      #   \"root_Length\"~\"Root length\",\n      #   \"root_LR2\"~\"LR2\",\n      #   \"root_LR_tot\"~\"LR Total\",\n      #   \"root_Width\"~\"Root Width (cm)\",\n      #   \"Cond\"~\"g&lt;sub&gt;s&lt;/sub&gt;\",\n      #   \"Evapo\"~\"ETtot (ml)\",\n      #   \"LWP\"~\"LWP (MPa)\",\n      #   \"sRWU\"~ \"sRWU(gH&lt;sub&gt;2&lt;/sub&gt;O[gBM&lt;sub&gt;root&lt;/sub&gt;.day\\U207B\\U00B9]\\U207B\\U00B9)\",\n      #   \"TR_mmol_m2_s\"~\"TR (mmol.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n      #   \"WUE\"~\"WUE (g.gH\\U2082O\\U207B\\U00B9)\",\n      #   \"Tleaf\"~\"Leaf temperature (°C)\", \n      #   \"SLA\"~\"SLA (g/cm²)\"\n      # )\n    \n    ############## to modify ##############\n    #export \n    gtsave(gt_table_x, here::here(paste0(\"report/iono/table/gt_summary_\",df_possibilities$genotype[i],\"_in_\",df_possibilities$compartiment[i],\".html\")))\n    gt_table_x\n    print(gt_table_x)\n} #end of the loop  \n\n\n\n\n\n\n\nSummary of concentration in element for Stocata in leaf\n\n\n\n\nVariable\n\n\nSto_WW_OT\n\n\n\n\nSto_WS_OT\n\n\n\n\n\n\nSto_WW_HS\n\n\n\n\n\n\nSto_WS_HS\n\n\n\n\n\n\n\n\n\n\nEssential macroelement\n\n\n\n\nC (µg/g)\n\n\n4.4e+05\n\n\n±3.2e+03\n\n\n4.3e+05\n\n\n±4.0e+03\n\n\n***\n\n\n4.4e+05\n\n\n±1.2e+03\n\n\nns\n\n\n4.1e+05\n\n\n±5.7e+03\n\n\n***\n\n\n\n\nN (µg/g)\n\n\n5.1e+04\n\n\n±2.3e+03\n\n\n5.6e+04\n\n\n±1.7e+03\n\n\n***\n\n\n5.4e+04\n\n\n±1.6e+03\n\n\n*\n\n\n6.2e+04\n\n\n±2.3e+03\n\n\n***\n\n\n\n\nCa (µg/g)\n\n\n2.4e+04\n\n\n±1.6e+03\n\n\n3.4e+04\n\n\n±1.3e+03\n\n\n***\n\n\n2.1e+04\n\n\n±1.4e+03\n\n\n*\n\n\n3.9e+04\n\n\n±2.0e+03\n\n\n***\n\n\n\n\nK (µg/g)\n\n\n1.6e+04\n\n\n±1.6e+03\n\n\n1.5e+04\n\n\n±688.13\n\n\nns\n\n\n2.3e+04\n\n\n±438.91\n\n\n***\n\n\n1.6e+04\n\n\n±1.0e+03\n\n\nns\n\n\n\n\nMg (µg/g)\n\n\n6.3e+03\n\n\n±223.75\n\n\n4.1e+03\n\n\n±173.28\n\n\n***\n\n\n4.9e+03\n\n\n±935.45\n\n\n*\n\n\n3.3e+03\n\n\n±220.31\n\n\n***\n\n\n\n\nS (µg/g)\n\n\n2.7e+03\n\n\n±131.28\n\n\n2.8e+03\n\n\n±86.23\n\n\nns\n\n\n2.9e+03\n\n\n±159.61\n\n\nns\n\n\n3.5e+03\n\n\n±260.14\n\n\n***\n\n\n\n\nP (µg/g)\n\n\n2.6e+03\n\n\n±244.42\n\n\n3.0e+03\n\n\n±349.5\n\n\n*\n\n\n3.5e+03\n\n\n±299.86\n\n\n**\n\n\n3.6e+03\n\n\n±340.8\n\n\n***\n\n\n\n\nEssential microelement\n\n\n\n\nFe (µg/g)\n\n\n146.36\n\n\n±22.26\n\n\n125.29\n\n\n±14.7\n\n\nns\n\n\n137.41\n\n\n±6.02\n\n\nns\n\n\n180.27\n\n\n±74.6\n\n\nns\n\n\n\n\nZn (µg/g)\n\n\n51.34\n\n\n±3.43\n\n\n55.03\n\n\n±3.64\n\n\nns\n\n\n60.54\n\n\n±6.7\n\n\nns\n\n\n61\n\n\n±5.23\n\n\n**\n\n\n\n\nB (µg/g)\n\n\n50.15\n\n\n±2.41\n\n\n39.01\n\n\n±3.3\n\n\n***\n\n\n73.09\n\n\n±2.43\n\n\n***\n\n\n54.36\n\n\n±4.27\n\n\nns\n\n\n\n\nMn (µg/g)\n\n\n39.24\n\n\n±3.49\n\n\n49.57\n\n\n±2.89\n\n\n***\n\n\n43.48\n\n\n±3.79\n\n\nns\n\n\n44.61\n\n\n±4.73\n\n\nns\n\n\n\n\nCu (µg/g)\n\n\n11.4\n\n\n±2.58\n\n\n13.99\n\n\n±3.17\n\n\nns\n\n\n14.1\n\n\n±5.6\n\n\nns\n\n\n14.59\n\n\n±2.28\n\n\nns\n\n\n\n\nNi (µg/g)\n\n\n3.84\n\n\n±0.48\n\n\n6.27\n\n\n±2.27\n\n\n*\n\n\n4.15\n\n\n±0.53\n\n\nns\n\n\n7.34\n\n\n±0.9\n\n\n***\n\n\n\n\nMo (µg/g)\n\n\n0.68\n\n\n±0.22\n\n\n0.16\n\n\n±0.04\n\n\n**\n\n\n0.66\n\n\n±0.11\n\n\nns\n\n\n0.25\n\n\n±0.02\n\n\n*\n\n\n\n\nBeneficial element\n\n\n\n\nNa (µg/g)\n\n\n258.77\n\n\n±84.83\n\n\n347.24\n\n\n±52.26\n\n\nns\n\n\n215.98\n\n\n±63.2\n\n\nns\n\n\n325.36\n\n\n±90.54\n\n\nns\n\n\n\n\nSe (µg/g)\n\n\n0.34\n\n\n±0.11\n\n\n0.07\n\n\n±0.06\n\n\n**\n\n\n0.47\n\n\n±0.15\n\n\nns\n\n\n0.13\n\n\n±0.07\n\n\n**\n\n\n\n\nV (µg/g)\n\n\n0.11\n\n\n±0.03\n\n\n0.1\n\n\n±0.02\n\n\nns\n\n\n0.08\n\n\n±9.7e-03\n\n\nns\n\n\n0.17\n\n\n±0.05\n\n\n*\n\n\n\n\nCo (µg/g)\n\n\n0.08\n\n\n±7.7e-03\n\n\n0.07\n\n\n±0.01\n\n\nns\n\n\n0.12\n\n\n±0.03\n\n\n*\n\n\n0.15\n\n\n±0.02\n\n\n***\n\n\n\n\nOther\n\n\n\n\nBa (µg/g)\n\n\n33.31\n\n\n±2.89\n\n\n45.84\n\n\n±2.25\n\n\n***\n\n\n29.66\n\n\n±1.22\n\n\n*\n\n\n54.41\n\n\n±3.24\n\n\n***\n\n\n\n\nRb (µg/g)\n\n\n14.53\n\n\n±2.53\n\n\n18.15\n\n\n±3.24\n\n\nns\n\n\n14.43\n\n\n±1.89\n\n\nns\n\n\n18.17\n\n\n±6.3\n\n\nns\n\n\n\n\nCr (µg/g)\n\n\n6.87\n\n\n±2.08\n\n\n7.4\n\n\n±3.22\n\n\nns\n\n\n4.44\n\n\n±1.01\n\n\nns\n\n\n17.78\n\n\n±12.97\n\n\nns\n\n\n\n\nCd (µg/g)\n\n\n0.28\n\n\n±0.07\n\n\n0.14\n\n\n±0.03\n\n\n*\n\n\n0.36\n\n\n±0.1\n\n\nns\n\n\n0.15\n\n\n±0.03\n\n\n*\n\n\n\n\nAs (µg/g)\n\n\n0.15\n\n\n±0.02\n\n\n0.05\n\n\n±1.0e-03\n\n\n***\n\n\n0.25\n\n\n±0.02\n\n\n***\n\n\n0.07\n\n\n±0.01\n\n\n***\n\n\n\n\nTl (µg/g)\n\n\n0.02\n\n\n±2.1e-03\n\n\n0.02\n\n\n±9.1e-04\n\n\n**\n\n\n0.02\n\n\n±3.9e-03\n\n\nns\n\n\n0.01\n\n\n±9.4e-04\n\n\n***\n\n\n\n\nBe (µg/g)\n\n\n3.5e-03\n\n\n±1.1e-03\n\n\n4.3e-03\n\n\n±1.2e-03\n\n\nns\n\n\n2.7e-03\n\n\n±5.7e-04\n\n\nns\n\n\n4.0e-03\n\n\n±7.1e-04\n\n\nns\n\n\n\n\n\n\nFor each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\n\n\n\n\n\n\n\n\n\n\n\nSummary of concentration in element for Wendy in leaf\n\n\n\n\nVariable\n\n\nWen_WW_OT\n\n\n\n\nWen_WS_OT\n\n\n\n\n\n\nWen_WW_HS\n\n\n\n\n\n\nWen_WS_HS\n\n\n\n\n\n\n\n\n\n\nEssential macroelement\n\n\n\n\nC (µg/g)\n\n\n4.5e+05\n\n\n±2.8e+03\n\n\n4.4e+05\n\n\n±4.6e+03\n\n\nns\n\n\n4.5e+05\n\n\n±2.8e+03\n\n\nns\n\n\n4.1e+05\n\n\n±7.5e+03\n\n\n***\n\n\n\n\nN (µg/g)\n\n\n5.0e+04\n\n\n±3.2e+03\n\n\n5.4e+04\n\n\n±3.0e+03\n\n\nns\n\n\n5.1e+04\n\n\n±3.7e+03\n\n\nns\n\n\n6.2e+04\n\n\n±1.3e+03\n\n\n***\n\n\n\n\nCa (µg/g)\n\n\n2.2e+04\n\n\n±1.3e+03\n\n\n2.7e+04\n\n\n±1.9e+03\n\n\n***\n\n\n2.1e+04\n\n\n±1.8e+03\n\n\nns\n\n\n4.0e+04\n\n\n±2.8e+03\n\n\n***\n\n\n\n\nK (µg/g)\n\n\n1.6e+04\n\n\n±1.7e+03\n\n\n1.4e+04\n\n\n±990.7\n\n\n*\n\n\n1.9e+04\n\n\n±1.3e+03\n\n\n**\n\n\n1.5e+04\n\n\n±2.1e+03\n\n\nns\n\n\n\n\nMg (µg/g)\n\n\n6.3e+03\n\n\n±679.78\n\n\n4.4e+03\n\n\n±423.91\n\n\n***\n\n\n5.4e+03\n\n\n±292.47\n\n\n*\n\n\n3.7e+03\n\n\n±226.75\n\n\n***\n\n\n\n\nS (µg/g)\n\n\n2.6e+03\n\n\n±228.89\n\n\n2.6e+03\n\n\n±204.67\n\n\nns\n\n\n2.7e+03\n\n\n±90.58\n\n\nns\n\n\n3.7e+03\n\n\n±259.55\n\n\n***\n\n\n\n\nP (µg/g)\n\n\n2.4e+03\n\n\n±451.65\n\n\n2.5e+03\n\n\n±281.4\n\n\nns\n\n\n3.1e+03\n\n\n±306.9\n\n\n**\n\n\n3.3e+03\n\n\n±560.94\n\n\n*\n\n\n\n\nEssential microelement\n\n\n\n\nFe (µg/g)\n\n\n164.03\n\n\n±76.24\n\n\n168.65\n\n\n±83.82\n\n\nns\n\n\n137.98\n\n\n±9.62\n\n\nns\n\n\n175.79\n\n\n±121.09\n\n\nns\n\n\n\n\nZn (µg/g)\n\n\n59.17\n\n\n±37.7\n\n\n45.32\n\n\n±4.58\n\n\nns\n\n\n58.21\n\n\n±9.79\n\n\nns\n\n\n51.29\n\n\n±9.14\n\n\nns\n\n\n\n\nB (µg/g)\n\n\n47.91\n\n\n±2.72\n\n\n32.48\n\n\n±1.83\n\n\n***\n\n\n66.94\n\n\n±1.48\n\n\n***\n\n\n48.12\n\n\n±8.23\n\n\nns\n\n\n\n\nMn (µg/g)\n\n\n39.46\n\n\n±5.34\n\n\n51.93\n\n\n±5.06\n\n\n**\n\n\n48.95\n\n\n±2.95\n\n\n**\n\n\n46.66\n\n\n±6.03\n\n\nns\n\n\n\n\nCu (µg/g)\n\n\n9.82\n\n\n±2.39\n\n\n16.16\n\n\n±4.39\n\n\n*\n\n\n16.86\n\n\n±10.56\n\n\nns\n\n\n14.54\n\n\n±2.57\n\n\n*\n\n\n\n\nNi (µg/g)\n\n\n3.28\n\n\n±0.93\n\n\n3.23\n\n\n±0.62\n\n\nns\n\n\n3.05\n\n\n±0.47\n\n\nns\n\n\n4.28\n\n\n±1.7\n\n\nns\n\n\n\n\nMo (µg/g)\n\n\n0.97\n\n\n±0.2\n\n\n0.37\n\n\n±0.16\n\n\n***\n\n\n0.87\n\n\n±0.1\n\n\nns\n\n\n0.53\n\n\n±0.2\n\n\n**\n\n\n\n\nBeneficial element\n\n\n\n\nNa (µg/g)\n\n\n245.83\n\n\n±89\n\n\n424.1\n\n\n±87.95\n\n\n**\n\n\n295.85\n\n\n±80.32\n\n\nns\n\n\n386.93\n\n\n±136.82\n\n\nns\n\n\n\n\nSe (µg/g)\n\n\n0.25\n\n\n±0.1\n\n\n0.04\n\n\n±0.03\n\n\n**\n\n\n0.46\n\n\n±0.1\n\n\n**\n\n\n0.17\n\n\n±0.1\n\n\nns\n\n\n\n\nV (µg/g)\n\n\n0.13\n\n\n±0.1\n\n\n0.13\n\n\n±0.07\n\n\nns\n\n\n0.07\n\n\n±0.02\n\n\nns\n\n\n0.25\n\n\n±0.22\n\n\nns\n\n\n\n\nCo (µg/g)\n\n\n0.07\n\n\n±0.03\n\n\n0.07\n\n\n±0.02\n\n\nns\n\n\n0.11\n\n\n±3.9e-03\n\n\n*\n\n\n0.18\n\n\n±0.05\n\n\n**\n\n\n\n\nOther\n\n\n\n\nBa (µg/g)\n\n\n27.68\n\n\n±4.42\n\n\n35.3\n\n\n±3.47\n\n\n**\n\n\n26.37\n\n\n±2.76\n\n\nns\n\n\n50.27\n\n\n±4.08\n\n\n***\n\n\n\n\nRb (µg/g)\n\n\n10.14\n\n\n±1.06\n\n\n11.43\n\n\n±2.27\n\n\nns\n\n\n11.69\n\n\n±1.62\n\n\nns\n\n\n7.88\n\n\n±3.28\n\n\nns\n\n\n\n\nCr (µg/g)\n\n\n8.33\n\n\n±9.36\n\n\n12.22\n\n\n±6.99\n\n\nns\n\n\n3.02\n\n\n±0.53\n\n\nns\n\n\n16.79\n\n\n±21.06\n\n\nns\n\n\n\n\nCd (µg/g)\n\n\n0.48\n\n\n±0.28\n\n\n0.19\n\n\n±0.06\n\n\nns\n\n\n0.39\n\n\n±0.04\n\n\nns\n\n\n0.18\n\n\n±0.04\n\n\n*\n\n\n\n\nAs (µg/g)\n\n\n0.13\n\n\n±0.01\n\n\n0.04\n\n\n±6.7e-03\n\n\n***\n\n\n0.19\n\n\n±0.03\n\n\n**\n\n\n0.07\n\n\n±0.01\n\n\n***\n\n\n\n\nTl (µg/g)\n\n\n0.02\n\n\n±2.1e-03\n\n\n0.01\n\n\n±1.4e-03\n\n\n**\n\n\n0.02\n\n\n±1.3e-03\n\n\nns\n\n\n0.01\n\n\n±1.2e-04\n\n\n**\n\n\n\n\nBe (µg/g)\n\n\n4.3e-03\n\n\n±1.1e-03\n\n\n4.3e-03\n\n\n±1.5e-03\n\n\nns\n\n\n3.3e-03\n\n\n±4.8e-04\n\n\nns\n\n\n4.4e-03\n\n\n±1.4e-03\n\n\nns\n\n\n\n\n\n\nFor each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\n\n\n\n\n\n\n\n\n\n\n\nSummary of concentration in element for Stocata in root\n\n\n\n\nVariable\n\n\nSto_WW_OT\n\n\n\n\nSto_WS_OT\n\n\n\n\n\n\nSto_WW_HS\n\n\n\n\n\n\nSto_WS_HS\n\n\n\n\n\n\n\n\n\n\nEssential macroelement\n\n\n\n\nC (µg/g)\n\n\n4.0e+05\n\n\n±1.1e+04\n\n\n4.4e+05\n\n\n±1.5e+04\n\n\n***\n\n\n3.9e+05\n\n\n±9.9e+03\n\n\n*\n\n\n4.5e+05\n\n\n±5.0e+03\n\n\n***\n\n\n\n\nN (µg/g)\n\n\n4.1e+04\n\n\n±3.2e+03\n\n\n3.8e+04\n\n\n±5.5e+03\n\n\nns\n\n\n3.5e+04\n\n\n±2.3e+03\n\n\n**\n\n\n3.9e+04\n\n\n±5.0e+03\n\n\nns\n\n\n\n\nMg (µg/g)\n\n\n1.2e+04\n\n\n±3.0e+03\n\n\n6.2e+03\n\n\n±1.3e+03\n\n\n*\n\n\n1.4e+04\n\n\n±426.53\n\n\nns\n\n\n3.7e+03\n\n\n±402.04\n\n\n**\n\n\n\n\nK (µg/g)\n\n\n1.0e+04\n\n\n±1.8e+03\n\n\n6.5e+03\n\n\n±2.0e+03\n\n\n**\n\n\n1.7e+04\n\n\n±3.4e+03\n\n\n*\n\n\n7.9e+03\n\n\n±2.0e+03\n\n\nns\n\n\n\n\nCa (µg/g)\n\n\n1.0e+04\n\n\n±2.2e+03\n\n\n1.0e+04\n\n\n±2.2e+03\n\n\nns\n\n\n1.1e+04\n\n\n±1.2e+03\n\n\nns\n\n\n9.5e+03\n\n\n±1.0e+03\n\n\nns\n\n\n\n\nS (µg/g)\n\n\n2.8e+03\n\n\n±684.92\n\n\n2.6e+03\n\n\n±411.85\n\n\nns\n\n\n3.2e+03\n\n\n±410.99\n\n\nns\n\n\n2.9e+03\n\n\n±328.84\n\n\nns\n\n\n\n\nP (µg/g)\n\n\n1.7e+03\n\n\n±180.32\n\n\n2.0e+03\n\n\n±400.32\n\n\nns\n\n\n2.1e+03\n\n\n±299.87\n\n\nns\n\n\n2.9e+03\n\n\n±646.59\n\n\n**\n\n\n\n\nEssential microelement\n\n\n\n\nFe (µg/g)\n\n\n1.5e+03\n\n\n±832.41\n\n\n1.1e+03\n\n\n±474.48\n\n\nns\n\n\n1.8e+03\n\n\n±518.79\n\n\nns\n\n\n2.7e+03\n\n\n±1.1e+03\n\n\nns\n\n\n\n\nZn (µg/g)\n\n\n38.54\n\n\n±3.92\n\n\n38.86\n\n\n±12.44\n\n\nns\n\n\n50.51\n\n\n±2.35\n\n\n***\n\n\n41.18\n\n\n±11.42\n\n\nns\n\n\n\n\nMn (µg/g)\n\n\n37.03\n\n\n±14.41\n\n\n23.17\n\n\n±5.2\n\n\nns\n\n\n146.18\n\n\n±54.05\n\n\n*\n\n\n39.61\n\n\n±3.74\n\n\nns\n\n\n\n\nB (µg/g)\n\n\n16.16\n\n\n±1.83\n\n\n15.77\n\n\n±1.21\n\n\nns\n\n\n15.77\n\n\n±1.41\n\n\nns\n\n\n14.13\n\n\n±0.72\n\n\nns\n\n\n\n\nCu (µg/g)\n\n\n13.26\n\n\n±3.42\n\n\n13.76\n\n\n±1.43\n\n\nns\n\n\n19.31\n\n\n±14.12\n\n\nns\n\n\n24.78\n\n\n±5.54\n\n\n**\n\n\n\n\nNi (µg/g)\n\n\n8.98\n\n\n±3.95\n\n\n6.47\n\n\n±1.14\n\n\nns\n\n\n5.94\n\n\n±0.52\n\n\nns\n\n\n14.1\n\n\n±3.6\n\n\nns\n\n\n\n\nMo (µg/g)\n\n\n1\n\n\n±0.46\n\n\n0.52\n\n\n±0.38\n\n\nns\n\n\n1.61\n\n\n±0.23\n\n\n*\n\n\n1.72\n\n\n±0.7\n\n\nns\n\n\n\n\nBeneficial element\n\n\n\n\nNa (µg/g)\n\n\n6.5e+03\n\n\n±2.4e+03\n\n\n6.2e+03\n\n\n±1.3e+03\n\n\nns\n\n\n5.1e+03\n\n\n±955.01\n\n\nns\n\n\n3.5e+03\n\n\n±479.79\n\n\n*\n\n\n\n\nV (µg/g)\n\n\n3.32\n\n\n±2.16\n\n\n2.08\n\n\n±0.88\n\n\nns\n\n\n3.93\n\n\n±1.2\n\n\nns\n\n\n3.52\n\n\n±0.45\n\n\nns\n\n\n\n\nCo (µg/g)\n\n\n0.92\n\n\n±0.37\n\n\n0.71\n\n\n±0.22\n\n\nns\n\n\n1.4\n\n\n±0.29\n\n\nns\n\n\n1.47\n\n\n±0.27\n\n\n*\n\n\n\n\nSe (µg/g)\n\n\n0.42\n\n\n±0.32\n\n\n0.1\n\n\n±0.04\n\n\nns\n\n\n0.41\n\n\n±0.25\n\n\nns\n\n\n0.03\n\n\n±0.02\n\n\nns\n\n\n\n\nOther\n\n\n\n\nBa (µg/g)\n\n\n71.14\n\n\n±13.94\n\n\n40.98\n\n\n±4.22\n\n\n**\n\n\n110.2\n\n\n±15.5\n\n\n**\n\n\n66.02\n\n\n±8.23\n\n\nns\n\n\n\n\nCr (µg/g)\n\n\n20.22\n\n\n±18.44\n\n\n27.92\n\n\n±16.97\n\n\nns\n\n\n12.91\n\n\n±2.4\n\n\nns\n\n\n209.88\n\n\n±175.23\n\n\n*\n\n\n\n\nRb (µg/g)\n\n\n16.51\n\n\n±3.86\n\n\n16.14\n\n\n±3.1\n\n\nns\n\n\n16.63\n\n\n±1.62\n\n\nns\n\n\n13.13\n\n\n±2.86\n\n\nns\n\n\n\n\nCd (µg/g)\n\n\n2.65\n\n\n±0.49\n\n\n0.89\n\n\n±0.08\n\n\n**\n\n\n4.52\n\n\n±1.12\n\n\n*\n\n\n0.57\n\n\n±0.19\n\n\n***\n\n\n\n\nAs (µg/g)\n\n\n1.29\n\n\n±0.56\n\n\n0.68\n\n\n±0.23\n\n\nns\n\n\n1.42\n\n\n±0.12\n\n\nns\n\n\n0.82\n\n\n±0.09\n\n\nns\n\n\n\n\nTl (µg/g)\n\n\n0.15\n\n\n±0.03\n\n\n0.11\n\n\n±9.1e-03\n\n\n*\n\n\n0.16\n\n\n±0.02\n\n\nns\n\n\n0.08\n\n\n±8.2e-03\n\n\n**\n\n\n\n\nBe (µg/g)\n\n\n0.1\n\n\n±0.04\n\n\n0.07\n\n\n±0.02\n\n\nns\n\n\n0.12\n\n\n±0.02\n\n\nns\n\n\n0.1\n\n\n±0.01\n\n\nns\n\n\n\n\n\n\nFor each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\n\n\n\n\n\n\n\n\n\n\n\nSummary of concentration in element for Wendy in root\n\n\n\n\nVariable\n\n\nWen_WW_OT\n\n\n\n\nWen_WS_OT\n\n\n\n\n\n\nWen_WW_HS\n\n\n\n\n\n\nWen_WS_HS\n\n\n\n\n\n\n\n\n\n\nEssential macroelement\n\n\n\n\nC (µg/g)\n\n\n4.1e+05\n\n\n±7.0e+03\n\n\n4.4e+05\n\n\n±8.0e+03\n\n\n***\n\n\n4.0e+05\n\n\n±8.1e+03\n\n\nns\n\n\n4.3e+05\n\n\n±9.1e+03\n\n\n***\n\n\n\n\nN (µg/g)\n\n\n3.7e+04\n\n\n±2.0e+03\n\n\n3.8e+04\n\n\n±3.4e+03\n\n\nns\n\n\n3.1e+04\n\n\n±1.9e+03\n\n\n***\n\n\n4.3e+04\n\n\n±3.0e+03\n\n\n**\n\n\n\n\nMg (µg/g)\n\n\n1.2e+04\n\n\n±1.3e+03\n\n\n6.7e+03\n\n\n±242.86\n\n\n***\n\n\n1.4e+04\n\n\n±1.4e+03\n\n\nns\n\n\n5.3e+03\n\n\n±912.94\n\n\n***\n\n\n\n\nK (µg/g)\n\n\n1.2e+04\n\n\n±1.3e+03\n\n\n5.0e+03\n\n\n±529.66\n\n\n***\n\n\n1.6e+04\n\n\n±2.8e+03\n\n\n*\n\n\n8.0e+03\n\n\n±1.6e+03\n\n\n**\n\n\n\n\nCa (µg/g)\n\n\n1.0e+04\n\n\n±1.8e+03\n\n\n1.3e+04\n\n\n±519.25\n\n\n*\n\n\n1.1e+04\n\n\n±1.3e+03\n\n\nns\n\n\n1.2e+04\n\n\n±1.4e+03\n\n\nns\n\n\n\n\nS (µg/g)\n\n\n3.3e+03\n\n\n±201.28\n\n\n2.7e+03\n\n\n±315.74\n\n\n**\n\n\n4.0e+03\n\n\n±447.88\n\n\n*\n\n\n3.6e+03\n\n\n±452.95\n\n\nns\n\n\n\n\nP (µg/g)\n\n\n1.8e+03\n\n\n±115.14\n\n\n1.6e+03\n\n\n±184.92\n\n\nns\n\n\n1.7e+03\n\n\n±279.37\n\n\nns\n\n\n2.4e+03\n\n\n±508.6\n\n\nns\n\n\n\n\nEssential microelement\n\n\n\n\nFe (µg/g)\n\n\n1.4e+03\n\n\n±319.99\n\n\n784.7\n\n\n±132.22\n\n\n**\n\n\n1.4e+03\n\n\n±323.84\n\n\nns\n\n\n1.8e+03\n\n\n±818.46\n\n\nns\n\n\n\n\nZn (µg/g)\n\n\n48.45\n\n\n±4.78\n\n\n48.6\n\n\n±24.87\n\n\nns\n\n\n50.14\n\n\n±5.96\n\n\nns\n\n\n40.35\n\n\n±6.94\n\n\nns\n\n\n\n\nMn (µg/g)\n\n\n40.15\n\n\n±8.84\n\n\n21.01\n\n\n±3.05\n\n\n**\n\n\n133.89\n\n\n±52.87\n\n\n**\n\n\n35.04\n\n\n±6.89\n\n\nns\n\n\n\n\nB (µg/g)\n\n\n15.22\n\n\n±0.96\n\n\n14.74\n\n\n±0.51\n\n\nns\n\n\n15.17\n\n\n±1.11\n\n\nns\n\n\n15.82\n\n\n±1.42\n\n\nns\n\n\n\n\nCu (µg/g)\n\n\n13.99\n\n\n±4.57\n\n\n13.18\n\n\n±3.89\n\n\nns\n\n\n11.33\n\n\n±2.55\n\n\nns\n\n\n18\n\n\n±3.03\n\n\nns\n\n\n\n\nNi (µg/g)\n\n\n6.74\n\n\n±1.97\n\n\n5.41\n\n\n±1.24\n\n\nns\n\n\n6.35\n\n\n±1.56\n\n\nns\n\n\n8.37\n\n\n±2.36\n\n\nns\n\n\n\n\nMo (µg/g)\n\n\n1.4\n\n\n±0.42\n\n\n0.54\n\n\n±0.08\n\n\n**\n\n\n1.92\n\n\n±0.46\n\n\nns\n\n\n1.94\n\n\n±0.87\n\n\nns\n\n\n\n\nBeneficial element\n\n\n\n\nNa (µg/g)\n\n\n4.7e+03\n\n\n±1.1e+03\n\n\n7.7e+03\n\n\n±441.95\n\n\n***\n\n\n5.3e+03\n\n\n±596.11\n\n\nns\n\n\n4.9e+03\n\n\n±706.75\n\n\nns\n\n\n\n\nV (µg/g)\n\n\n2.91\n\n\n±0.91\n\n\n1.48\n\n\n±0.41\n\n\n**\n\n\n3.26\n\n\n±0.76\n\n\nns\n\n\n2.88\n\n\n±1.06\n\n\nns\n\n\n\n\nCo (µg/g)\n\n\n1.01\n\n\n±0.2\n\n\n0.71\n\n\n±0.13\n\n\n*\n\n\n1.47\n\n\n±0.31\n\n\n*\n\n\n1.18\n\n\n±0.39\n\n\nns\n\n\n\n\nSe (µg/g)\n\n\n0.61\n\n\n±0.21\n\n\n0.14\n\n\n±0.08\n\n\n**\n\n\n0.61\n\n\n±0.08\n\n\nns\n\n\n0.18\n\n\n±0.13\n\n\n**\n\n\n\n\nOther\n\n\n\n\nBa (µg/g)\n\n\n78.22\n\n\n±6.61\n\n\n48.1\n\n\n±4.9\n\n\n***\n\n\n117.49\n\n\n±35.56\n\n\n*\n\n\n73.46\n\n\n±11.73\n\n\nns\n\n\n\n\nCr (µg/g)\n\n\n25.05\n\n\n±9.36\n\n\n14.76\n\n\n±9.63\n\n\nns\n\n\n31.52\n\n\n±18.97\n\n\nns\n\n\n113.62\n\n\n±88.04\n\n\nns\n\n\n\n\nRb (µg/g)\n\n\n12.26\n\n\n±1.47\n\n\n9.73\n\n\n±1.05\n\n\n**\n\n\n13.3\n\n\n±1.54\n\n\nns\n\n\n8.96\n\n\n±2.22\n\n\n*\n\n\n\n\nCd (µg/g)\n\n\n3.13\n\n\n±0.97\n\n\n1.24\n\n\n±0.27\n\n\n**\n\n\n4.07\n\n\n±0.98\n\n\nns\n\n\n0.64\n\n\n±0.13\n\n\n**\n\n\n\n\nAs (µg/g)\n\n\n1.14\n\n\n±0.22\n\n\n0.48\n\n\n±0.09\n\n\n***\n\n\n1.04\n\n\n±0.13\n\n\nns\n\n\n0.74\n\n\n±0.19\n\n\n**\n\n\n\n\nTl (µg/g)\n\n\n0.16\n\n\n±0.02\n\n\n0.11\n\n\n±0.01\n\n\n**\n\n\n0.18\n\n\n±0.02\n\n\nns\n\n\n0.08\n\n\n±0.01\n\n\n***\n\n\n\n\nBe (µg/g)\n\n\n0.08\n\n\n±0.02\n\n\n0.05\n\n\n±0.01\n\n\n*\n\n\n0.09\n\n\n±0.01\n\n\nns\n\n\n0.09\n\n\n±0.02\n\n\nns\n\n\n\n\n\n\nFor each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\n\n\n\n\n\n\n\n\n\n\n\nSummary of concentration in element for Stocata in stem\n\n\n\n\nVariable\n\n\nSto_WW_OT\n\n\n\n\nSto_WS_OT\n\n\n\n\n\n\nSto_WW_HS\n\n\n\n\n\n\nSto_WS_HS\n\n\n\n\n\n\n\n\n\n\nEssential macroelement\n\n\n\n\nC (µg/g)\n\n\n4.3e+05\n\n\n±9.2e+03\n\n\n4.3e+05\n\n\n±7.5e+03\n\n\nns\n\n\n4.3e+05\n\n\n±2.4e+03\n\n\nns\n\n\n4.0e+05\n\n\n±7.0e+03\n\n\n***\n\n\n\n\nN (µg/g)\n\n\n2.8e+04\n\n\n±1.9e+03\n\n\n4.0e+04\n\n\n±2.5e+03\n\n\n***\n\n\n2.5e+04\n\n\n±1.1e+03\n\n\n**\n\n\n6.3e+04\n\n\n±5.8e+03\n\n\n***\n\n\n\n\nK (µg/g)\n\n\n1.3e+04\n\n\n±2.8e+03\n\n\n8.4e+03\n\n\n±1.4e+03\n\n\n*\n\n\n2.5e+04\n\n\n±1.1e+03\n\n\n***\n\n\n1.3e+04\n\n\n±1.7e+03\n\n\nns\n\n\n\n\nCa (µg/g)\n\n\n1.2e+04\n\n\n±1.2e+03\n\n\n1.9e+04\n\n\n±1.2e+03\n\n\n***\n\n\n1.3e+04\n\n\n±1.6e+03\n\n\nns\n\n\n2.2e+04\n\n\n±1.5e+03\n\n\n***\n\n\n\n\nMg (µg/g)\n\n\n3.0e+03\n\n\n±94.73\n\n\n2.4e+03\n\n\n±190.98\n\n\n***\n\n\n2.4e+03\n\n\n±247.11\n\n\n*\n\n\n3.0e+03\n\n\n±215.37\n\n\nns\n\n\n\n\nP (µg/g)\n\n\n1.0e+03\n\n\n±108.44\n\n\n1.5e+03\n\n\n±410.03\n\n\n*\n\n\n1.6e+03\n\n\n±239.26\n\n\n*\n\n\n3.3e+03\n\n\n±669.76\n\n\n***\n\n\n\n\nS (µg/g)\n\n\n893.11\n\n\n±79.39\n\n\n1.4e+03\n\n\n±158.89\n\n\n***\n\n\n1.1e+03\n\n\n±105.11\n\n\n*\n\n\n3.1e+03\n\n\n±507.41\n\n\n***\n\n\n\n\nEssential microelement\n\n\n\n\nFe (µg/g)\n\n\n64.59\n\n\n±19.2\n\n\n69.75\n\n\n±21.83\n\n\nns\n\n\n81.63\n\n\n±18.1\n\n\nns\n\n\n134.55\n\n\n±72.86\n\n\nns\n\n\n\n\nZn (µg/g)\n\n\n27.66\n\n\n±4.07\n\n\n31.32\n\n\n±4.33\n\n\nns\n\n\n32.77\n\n\n±5.88\n\n\nns\n\n\n44.88\n\n\n±10.27\n\n\n**\n\n\n\n\nCu (µg/g)\n\n\n13.98\n\n\n±8.36\n\n\n9.36\n\n\n±2.96\n\n\nns\n\n\n14.98\n\n\n±11.01\n\n\nns\n\n\n13.09\n\n\n±1.63\n\n\nns\n\n\n\n\nB (µg/g)\n\n\n13.35\n\n\n±0.69\n\n\n15.33\n\n\n±0.87\n\n\n**\n\n\n13.89\n\n\n±0.81\n\n\nns\n\n\n16.15\n\n\n±1.36\n\n\n**\n\n\n\n\nMn (µg/g)\n\n\n9.72\n\n\n±0.67\n\n\n9.54\n\n\n±0.59\n\n\nns\n\n\n13.2\n\n\n±0.89\n\n\n***\n\n\n10.37\n\n\n±0.83\n\n\nns\n\n\n\n\nNi (µg/g)\n\n\n2.8\n\n\n±0.39\n\n\n5.73\n\n\n±1.59\n\n\n**\n\n\n2.69\n\n\n±0.69\n\n\nns\n\n\n8.24\n\n\n±1.84\n\n\n***\n\n\n\n\nMo (µg/g)\n\n\n0.8\n\n\n±0.26\n\n\n0.32\n\n\n±0.16\n\n\n**\n\n\n2.03\n\n\n±0.29\n\n\n***\n\n\n0.53\n\n\n±0.18\n\n\nns\n\n\n\n\nBeneficial element\n\n\n\n\nNa (µg/g)\n\n\n357.07\n\n\n±80.67\n\n\n367.57\n\n\n±56.81\n\n\nns\n\n\n408.15\n\n\n±116.83\n\n\nns\n\n\n1.1e+03\n\n\n±179.21\n\n\n***\n\n\n\n\nV (µg/g)\n\n\n0.12\n\n\n±0.03\n\n\n0.12\n\n\n±0.02\n\n\nns\n\n\n0.13\n\n\n±0.03\n\n\nns\n\n\n0.22\n\n\n±0.12\n\n\nns\n\n\n\n\nSe (µg/g)\n\n\n0.08\n\n\n±0.07\n\n\n0.03\n\n\n±0.02\n\n\nns\n\n\n0.19\n\n\n±0.04\n\n\n*\n\n\n0.1\n\n\n±0.02\n\n\nns\n\n\n\n\nCo (µg/g)\n\n\n0.08\n\n\n±0.03\n\n\n0.07\n\n\n±0.02\n\n\nns\n\n\n0.09\n\n\n±0.01\n\n\nns\n\n\n0.12\n\n\n±0.03\n\n\n*\n\n\n\n\nOther\n\n\n\n\nBa (µg/g)\n\n\n14.52\n\n\n±0.64\n\n\n20.22\n\n\n±1.33\n\n\n***\n\n\n16.54\n\n\n±0.87\n\n\n*\n\n\n26.67\n\n\n±2.96\n\n\n***\n\n\n\n\nRb (µg/g)\n\n\n10.24\n\n\n±1.09\n\n\n12.44\n\n\n±2.77\n\n\nns\n\n\n11.82\n\n\n±2.34\n\n\nns\n\n\n13.29\n\n\n±5.99\n\n\nns\n\n\n\n\nCr (µg/g)\n\n\n4.39\n\n\n±2.85\n\n\n5.64\n\n\n±3.11\n\n\nns\n\n\n4.47\n\n\n±2.87\n\n\nns\n\n\n12.26\n\n\n±10.22\n\n\nns\n\n\n\n\nAs (µg/g)\n\n\n0.17\n\n\n±9.8e-03\n\n\n0.14\n\n\n±8.1e-03\n\n\n**\n\n\n0.18\n\n\n±0.01\n\n\nns\n\n\n0.16\n\n\n±0.01\n\n\nns\n\n\n\n\nCd (µg/g)\n\n\n0.09\n\n\n±0.02\n\n\n0.03\n\n\n±0.01\n\n\n**\n\n\n0.15\n\n\n±0.07\n\n\nns\n\n\n0.05\n\n\n±0.01\n\n\n*\n\n\n\n\nTl (µg/g)\n\n\n0.03\n\n\n±0.01\n\n\n0.04\n\n\n±0.01\n\n\nns\n\n\n0.05\n\n\n±8.7e-03\n\n\n*\n\n\n0.04\n\n\n±4.1e-03\n\n\nns\n\n\n\n\nBe (µg/g)\n\n\n0.01\n\n\n±2.1e-03\n\n\n0.01\n\n\n±2.8e-03\n\n\nns\n\n\n0.01\n\n\n±9.0e-04\n\n\nns\n\n\n0.01\n\n\n±1.1e-03\n\n\n*\n\n\n\n\n\n\nFor each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\n\n\n\n\n\n\n\n\n\n\n\nSummary of concentration in element for Wendy in stem\n\n\n\n\nVariable\n\n\nWen_WW_OT\n\n\n\n\nWen_WS_OT\n\n\n\n\n\n\nWen_WW_HS\n\n\n\n\n\n\nWen_WS_HS\n\n\n\n\n\n\n\n\n\n\nEssential macroelement\n\n\n\n\nC (µg/g)\n\n\n4.4e+05\n\n\n±3.9e+03\n\n\n4.4e+05\n\n\n±2.9e+03\n\n\nns\n\n\n4.4e+05\n\n\n±4.2e+03\n\n\nns\n\n\n4.1e+05\n\n\n±7.3e+03\n\n\n***\n\n\n\n\nN (µg/g)\n\n\n2.5e+04\n\n\n±1.3e+03\n\n\n3.4e+04\n\n\n±2.8e+03\n\n\n***\n\n\n2.1e+04\n\n\n±3.0e+03\n\n\n**\n\n\n5.3e+04\n\n\n±4.9e+03\n\n\n***\n\n\n\n\nK (µg/g)\n\n\n1.4e+04\n\n\n±2.6e+03\n\n\n4.7e+03\n\n\n±681.44\n\n\n***\n\n\n1.8e+04\n\n\n±3.1e+03\n\n\n*\n\n\n1.0e+04\n\n\n±1.9e+03\n\n\n*\n\n\n\n\nCa (µg/g)\n\n\n1.1e+04\n\n\n±1.1e+03\n\n\n1.6e+04\n\n\n±1.4e+03\n\n\n***\n\n\n1.2e+04\n\n\n±1.3e+03\n\n\nns\n\n\n2.4e+04\n\n\n±1.7e+03\n\n\n***\n\n\n\n\nMg (µg/g)\n\n\n2.9e+03\n\n\n±365.85\n\n\n2.4e+03\n\n\n±162.45\n\n\n*\n\n\n2.5e+03\n\n\n±182.92\n\n\n*\n\n\n3.4e+03\n\n\n±294.35\n\n\n*\n\n\n\n\nP (µg/g)\n\n\n983.81\n\n\n±170.49\n\n\n859.29\n\n\n±101.15\n\n\nns\n\n\n1.2e+03\n\n\n±163.85\n\n\nns\n\n\n2.2e+03\n\n\n±807.14\n\n\n*\n\n\n\n\nS (µg/g)\n\n\n801.42\n\n\n±93.5\n\n\n866.4\n\n\n±103.48\n\n\nns\n\n\n877.05\n\n\n±62.85\n\n\nns\n\n\n2.7e+03\n\n\n±673.24\n\n\n**\n\n\n\n\nEssential microelement\n\n\n\n\nFe (µg/g)\n\n\n81.81\n\n\n±51.15\n\n\n63.6\n\n\n±20.19\n\n\nns\n\n\n80.7\n\n\n±12.18\n\n\nns\n\n\n114.69\n\n\n±80.25\n\n\nns\n\n\n\n\nZn (µg/g)\n\n\n22.85\n\n\n±4.72\n\n\n22.14\n\n\n±6.55\n\n\nns\n\n\n31.57\n\n\n±12.08\n\n\nns\n\n\n32.32\n\n\n±7.65\n\n\n*\n\n\n\n\nB (µg/g)\n\n\n14.7\n\n\n±1.14\n\n\n13.92\n\n\n±0.82\n\n\nns\n\n\n14.24\n\n\n±0.71\n\n\nns\n\n\n17.16\n\n\n±2.4\n\n\nns\n\n\n\n\nMn (µg/g)\n\n\n9.9\n\n\n±1.27\n\n\n8.73\n\n\n±0.29\n\n\nns\n\n\n12.7\n\n\n±1.48\n\n\n**\n\n\n11.23\n\n\n±1.34\n\n\nns\n\n\n\n\nCu (µg/g)\n\n\n9.57\n\n\n±3.7\n\n\n12.69\n\n\n±12.63\n\n\nns\n\n\n22.44\n\n\n±20.42\n\n\nns\n\n\n10.04\n\n\n±1.23\n\n\nns\n\n\n\n\nNi (µg/g)\n\n\n2.11\n\n\n±0.95\n\n\n1.84\n\n\n±0.3\n\n\nns\n\n\n2.04\n\n\n±0.55\n\n\nns\n\n\n2.87\n\n\n±0.79\n\n\nns\n\n\n\n\nMo (µg/g)\n\n\n1.39\n\n\n±0.43\n\n\n0.86\n\n\n±0.39\n\n\nns\n\n\n2.12\n\n\n±0.33\n\n\n**\n\n\n1.87\n\n\n±0.98\n\n\nns\n\n\n\n\nBeneficial element\n\n\n\n\nNa (µg/g)\n\n\n347.11\n\n\n±31.62\n\n\n366.22\n\n\n±95.56\n\n\nns\n\n\n437.43\n\n\n±84.61\n\n\n*\n\n\n1.7e+03\n\n\n±406.76\n\n\n**\n\n\n\n\nV (µg/g)\n\n\n0.15\n\n\n±0.09\n\n\n0.12\n\n\n±0.03\n\n\nns\n\n\n0.13\n\n\n±0.02\n\n\nns\n\n\n0.17\n\n\n±0.06\n\n\nns\n\n\n\n\nSe (µg/g)\n\n\n0.11\n\n\n±0.04\n\n\n0.03\n\n\n±0.02\n\n\n**\n\n\n0.17\n\n\n±0.03\n\n\n*\n\n\n0.1\n\n\n±0.06\n\n\nns\n\n\n\n\nCo (µg/g)\n\n\n0.06\n\n\n±0.03\n\n\n0.06\n\n\n±0.01\n\n\nns\n\n\n0.08\n\n\n±0.02\n\n\nns\n\n\n0.12\n\n\n±0.03\n\n\n*\n\n\n\n\nOther\n\n\n\n\nBa (µg/g)\n\n\n15.22\n\n\n±3.56\n\n\n17.91\n\n\n±2.62\n\n\nns\n\n\n14.31\n\n\n±1.57\n\n\nns\n\n\n29.93\n\n\n±2.05\n\n\n***\n\n\n\n\nRb (µg/g)\n\n\n6.94\n\n\n±0.79\n\n\n5.39\n\n\n±0.96\n\n\n*\n\n\n7.72\n\n\n±1.67\n\n\nns\n\n\n5.18\n\n\n±2.61\n\n\nns\n\n\n\n\nCr (µg/g)\n\n\n5.67\n\n\n±6.32\n\n\n6.11\n\n\n±3.12\n\n\nns\n\n\n4.48\n\n\n±1.41\n\n\nns\n\n\n11.84\n\n\n±11.94\n\n\nns\n\n\n\n\nCd (µg/g)\n\n\n0.17\n\n\n±0.12\n\n\n0.05\n\n\n±0.02\n\n\n*\n\n\n0.23\n\n\n±0.11\n\n\nns\n\n\n0.07\n\n\n±0.03\n\n\nns\n\n\n\n\nAs (µg/g)\n\n\n0.16\n\n\n±0.01\n\n\n0.13\n\n\n±7.2e-03\n\n\n**\n\n\n0.16\n\n\n±9.4e-03\n\n\nns\n\n\n0.15\n\n\n±0.01\n\n\nns\n\n\n\n\nTl (µg/g)\n\n\n0.04\n\n\n±8.6e-03\n\n\n0.03\n\n\n±0.01\n\n\nns\n\n\n0.04\n\n\n±4.0e-03\n\n\nns\n\n\n0.04\n\n\n±4.1e-03\n\n\nns\n\n\n\n\nBe (µg/g)\n\n\n0.01\n\n\n±8.0e-04\n\n\n0.01\n\n\n±1.6e-03\n\n\nns\n\n\n0.01\n\n\n±4.6e-04\n\n\nns\n\n\n0.01\n\n\n±1.0e-03\n\n\nns\n\n\n\n\n\n\nFor each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\n\n\n\n\n\n\nCode\nwrite_xlsx(list_dataframes, here::here(paste0(\"report/iono/table/gt_summary_concentration_element.xlsx\")))",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Analysis of ionome</span>"
    ]
  },
  {
    "objectID": "report/iono/2_rapid_analysis_iono.html#pca",
    "href": "report/iono/2_rapid_analysis_iono.html#pca",
    "title": "12  Analysis of ionome",
    "section": "12.3 PCA",
    "text": "12.3 PCA\n\n\nCode\ndf_iono$id_sample=paste0( df_iono$plant_num, \"_\", df_iono$compartiment_code)\ndf_iono$condition_organe=paste0(df_iono$condition, \"_\", df_iono$compartiment)\n\ndf_ionomic_s_horizontal=df_iono %&gt;%\n  filter(recolte==\"2\") %&gt;% \n  select(compound,correct_concentration,id_sample, condition_organe,compartiment,condition)%&gt;% \n  pivot_wider(names_from=\"compound\",values_from=\"correct_concentration\") %&gt;% \n  drop_na(S32) %&gt;% \n  column_to_rownames(\"id_sample\")\n#df_ionomic_s_horizontal=df_ionomic_s_horizontal[-1]\n\n\n\n12.3.1 By compartment\nI use imputePCA function of the missMDA package because i miss a value for the Se in the stems.\nThe package missMDA allows the use of principal component methods for an incomplete data set. To achieve this goal in the case of PCA, the missing values are predicted using the iterative PCA algorithm for a predefined number of dimensions. Then, PCA is performed on the imputed data set. The single imputation step requires tuning the number of dimensions used to impute the data. For more information see PCA with missing values from Julie Josse.\n\n\nCode\nnb &lt;- estim_ncpPCA(df_ionomic_s_horizontal,quali.sup=1:4,method.cv = \"Kfold\", verbose = FALSE) # estimate the number of components from incomplete data\n#(available methods include GCV to approximate CV)\nplot(0:5, nb$criterion, xlab = \"nb dim\", ylab = \"MSEP\")\nres.comp &lt;- imputePCA(df_ionomic_s_horizontal,quali.sup=1:4, ncp = nb$ncp) # iterativePCA algorithm\n\nres_pca_iono_r2&lt;-PCA(res.comp$completeObs,quali.sup=1:4, graph = TRUE)\n\n#res_pca_iono_r2 &lt;- PCA(df_ionomic_s_horizontal,quali.sup=1:4, graph = TRUE)\n#res_pca_iono_r2 &lt;- PCA(df_ionomic_s_horizontal [,-1], graph = TRUE)\nfviz_eig(res_pca_iono_r2, addlabels = TRUE, ylim = c(0, 50))\n\nvar &lt;- get_pca_var(res_pca_iono_r2)\ncorrplot(var$cos2, is.corr=FALSE)\n\npng(here::here(paste0(\"report/iono/plot/ACP_var_by_compartment.png\")), width = 16, height = 16, units = 'cm', res = 600)\nfviz_pca_var(res_pca_iono_r2, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE # Évite le chevauchement de texte\n)\ndev.off()\n\npng(here::here(paste0(\"report/iono/plot/ACP_by_compartment.png\")), width = 18, height = 15, units = 'cm', res = 600)\nPCA_compartment&lt;-fviz_pca_ind(res_pca_iono_r2,\n             geom.ind = \"point\", # Shows points only (not text)\n             pointshape = 20,pointsize = 2,\n             col.ind = df_ionomic_s_horizontal$compartiment, # colorer by groups\n             palett=compartment_pallet,\n             addEllipses = T, # Concentration ellipses\n             legend.title = \"Organe\", \n             label=T, \n             ellipse.level = 0.95,\n             ellipse.type = c(\"norm\"),\n             \n)+ ggtitle(\"Visualizing Individual PCA by compartment\")\nPCA_compartment\ndev.off()\n\n### biplot \n\nPCA_compartment&lt;-fviz_pca_biplot(res_pca_iono_r2,\n            geom.ind = \"point\", # Shows points only (not text)\n            #shape.ind=ifelse(df_sREU$genotype==\"Wendy\",\"cross\",\"point\")\n            pointshape = 20,\n            pointsize = 3,\n            col.ind = df_ionomic_s_horizontal$compartiment, # colorer by groups\n            col.quanti.sup = \"red\",\n            palett=compartment_pallet,\n            addEllipses = T, # Ellipses de concentration\n            legend.title = \"Organe\", \n            ellipse.level = 0.95,\n            ellipse.alpha=0.3,\n            ellipse.type = c(\"norm\"),\n            arrowsize=.5,\n            col.var = \"black\",axes = (c(1,2))\n)+ ggtitle(\"Visualizing Individual PCA and concentration variable for each organe\")+\n  theme_classic()\n\n ggsave(filename = here::here(paste0(\"report/iono/plot/ACP_by_compartment.svg\")), plot = PCA_compartment, width = 18, height = 15, units = \"cm\")\n\n\n\n\n\n12.3.2 For each compartment\n\n\nCode\n# leaf\ndf_iono_leaf=df_ionomic_s_horizontal %&gt;% filter(compartiment==\"leaf\")\nres_pca_iono_laef &lt;- PCA(df_iono_leaf %&gt;% as.data.frame() %&gt;%  column_to_rownames(\"id_sample\"),quali.sup=1:3, graph = T)\n\nfviz_eig(res_pca_iono_laef, addlabels = TRUE, ylim = c(0, 50))\nvar &lt;- get_pca_var(res_pca_iono_laef)\n\ncorrplot(var$cos2, is.corr=FALSE)\n\npng(here::here(paste0(\"report/iono/plot/ACP_var_by_treatment_for_leaf.png\")), width = 16, height = 16, units = 'cm', res = 600)\nfviz_pca_var(res_pca_iono_laef, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE # Avoids text overlap\n)\ndev.off()\n\npng(here::here(paste0(\"report/iono/plot/ACP_by_treatment_for_leaf.png\")), width = 18, height = 15, units = 'cm', res = 600)\nPCA_compartment&lt;-fviz_pca_ind(res_pca_iono_laef,\n #            geom.ind = \"point\", # Shows points only (not text)\n             pointshape = 20,pointsize = 2,\n             col.ind = df_ionomic_s_horizontal %&gt;% filter(compartiment==\"leaf\") %&gt;% mutate(climat_condition=substr(condition, 5, 9)) %&gt;% pull(climat_condition), # colorer by groups\n             palett=c(climate_pallet),\n             addEllipses = T, # Concentration ellipses\n             legend.title = \"Treatment\", \n             ellipse.level = 0.95,\n             ellipse.type = c(\"norm\"),\n             \n)+ ggtitle(\"Visualizing Individual PCA by treatment for leaf\")\nPCA_compartment\ndev.off()\n\n# stem\ndf_iono_stem=df_ionomic_s_horizontal %&gt;% filter(compartiment==\"stem\") %&gt;%dplyr::select(-Se77)\nres_pca_iono_stem &lt;- PCA(df_iono_stem %&gt;% as.data.frame() %&gt;%  column_to_rownames(\"id_sample\"),quali.sup=1:3, graph = T)\n\nfviz_eig(res_pca_iono_stem, addlabels = TRUE, ylim = c(0, 50))\nvar &lt;- get_pca_var(res_pca_iono_stem)\n\ncorrplot(var$cos2, is.corr=FALSE)\n\npng(here::here(paste0(\"report/iono/plot/ACP_var_by_treatment_for_stem.png\")), width = 16, height = 16, units = 'cm', res = 600)\nfviz_pca_var(res_pca_iono_stem, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE # Avoids text overlap\n)\ndev.off()\n\npng(here::here(paste0(\"report/iono/plot/ACP_by_treatment_for_stem.png\")), width = 18, height = 15, units = 'cm', res = 600)\nPCA_compartment&lt;-fviz_pca_ind(res_pca_iono_stem,\n #            geom.ind = \"point\", # Shows points only (not text)\n             pointshape = 20,pointsize = 2,\n             col.ind = df_ionomic_s_horizontal %&gt;% filter(compartiment==\"stem\")%&gt;%dplyr::select(-Se77) %&gt;% mutate(climat_condition=substr(condition, 5, 9)) %&gt;% pull(climat_condition), # colorer by groups\n            palett=c(climate_pallet),\n             addEllipses = T, # Concentration ellipses\n             legend.title = \"Treatment\", \n             ellipse.level = 0.95,\n             ellipse.type = c(\"norm\"),\n             \n)+ ggtitle(\"Visualizing Individual PCA by treatment for stem\")\nPCA_compartment\ndev.off()\n\n# root\ndf_iono_root=df_ionomic_s_horizontal %&gt;% filter(compartiment==\"root\") %&gt;% dplyr::select(-Se77) %&gt;% filter(id_sample!=\"1119_R\")\nres_pca_iono_root &lt;- PCA(df_iono_root %&gt;% as.data.frame() %&gt;%  column_to_rownames(\"id_sample\"),quali.sup=1:3, graph = T)\n\nfviz_eig(res_pca_iono_root, addlabels = TRUE, ylim = c(0, 50))\nvar &lt;- get_pca_var(res_pca_iono_root)\n\ncorrplot(var$cos2, is.corr=FALSE)\n\npng(here::here(paste0(\"report/iono/plot/ACP_var_by_treatment_for_root.png\")), width = 16, height = 16, units = 'cm', res = 600)\nfviz_pca_var(res_pca_iono_root, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE  # Avoids text overlap\n)\ndev.off()\n\npng(here::here(paste0(\"report/iono/plot/ACP_by_treatment_for_root.png\")), width = 18, height = 15, units = 'cm', res = 600)\nPCA_compartment&lt;-fviz_pca_ind(res_pca_iono_root,\n            # geom.ind = \"point\", # Shows points only (not text)\n             pointshape = 20,pointsize = 2,\n             col.ind = df_ionomic_s_horizontal %&gt;% filter(compartiment==\"root\") %&gt;% mutate(climat_condition=substr(condition, 5, 9))  %&gt;% dplyr::select(-Se77) %&gt;% filter(id_sample!=\"1119_R\")%&gt;% pull(climat_condition), # colorer by groups\n            palett=c(climate_pallet),\n             addEllipses = T, # Concentration ellipses\n             legend.title = \"Treatment\", \n             ellipse.level = 0.95,\n             ellipse.type = c(\"norm\"),\n             \n)+ ggtitle(\"Visualizing Individual PCA by treatment for root\")\nPCA_compartment\ndev.off()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n12.3.3 For each compartment and only for macroelement\n\n\nCode\n# leaf\ndf_iono_leaf=df_ionomic_s_horizontal %&gt;% filter(compartiment==\"leaf\") %&gt;% dplyr::select(id_sample,condition_organe,compartiment,condition,N,C,Ca44,S32,Mg24,K39,P31)\nres_pca_iono_laef &lt;- PCA(df_iono_leaf %&gt;% as.data.frame() %&gt;%  column_to_rownames(\"id_sample\"),quali.sup=1:3, graph = T)\n\nfviz_eig(res_pca_iono_laef, addlabels = TRUE, ylim = c(0, 50))\nvar &lt;- get_pca_var(res_pca_iono_laef)\n\ncorrplot(var$cos2, is.corr=FALSE)\n\npng(here::here(paste0(\"report/iono/plot/ACP_var_by_treatment_for_leaf_macro_element.png\")), width = 16, height = 16, units = 'cm', res = 600)\nfviz_pca_var(res_pca_iono_laef, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE \n)\ndev.off()\n\npng(here::here(paste0(\"report/iono/plot/ACP_by_treatment_for_leaf_macro_element.png\")), width = 18, height = 15, units = 'cm', res = 600)\nPCA_compartment&lt;-fviz_pca_ind(res_pca_iono_laef,\n             pointshape = 20,pointsize = 2,\n             col.ind = df_ionomic_s_horizontal %&gt;% filter(compartiment==\"leaf\") %&gt;% mutate(climat_condition=substr(condition, 5, 9)) %&gt;% pull(climat_condition), # colorer by groups\n             palett=c(climate_pallet),\n             addEllipses = T, \n             legend.title = \"Treatment\", \n             ellipse.level = 0.95,\n             ellipse.type = c(\"norm\"),\n             \n)+ ggtitle(\"Visualizing Individual PCA by treatment for leaf\")\nPCA_compartment\ndev.off()\n\n# stem\ndf_iono_stem=df_ionomic_s_horizontal %&gt;% filter(compartiment==\"stem\") %&gt;% dplyr::select(id_sample,condition_organe,compartiment,condition,N,C,Ca44,S32,Mg24,K39,P31)\nres_pca_iono_stem &lt;- PCA(df_iono_stem %&gt;% as.data.frame() %&gt;%  column_to_rownames(\"id_sample\"),quali.sup=1:3, graph = T)\n\nfviz_eig(res_pca_iono_stem, addlabels = TRUE, ylim = c(0, 50))\nvar &lt;- get_pca_var(res_pca_iono_stem)\n\ncorrplot(var$cos2, is.corr=FALSE)\n\npng(here::here(paste0(\"report/iono/plot/ACP_var_by_treatment_for_stem_macro_element.png\")), width = 16, height = 16, units = 'cm', res = 600)\nfviz_pca_var(res_pca_iono_stem, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE \n)\ndev.off()\n\npng(here::here(paste0(\"report/iono/plot/ACP_by_treatment_for_stem_macro_element.png\")), width = 18, height = 15, units = 'cm', res = 600)\nPCA_compartment&lt;-fviz_pca_ind(res_pca_iono_stem,\n #            geom.ind = \"point\", \n             pointshape = 20,pointsize = 2,\n             col.ind = df_ionomic_s_horizontal %&gt;% filter(compartiment==\"stem\") %&gt;% mutate(climat_condition=substr(condition, 5, 9)) %&gt;% pull(climat_condition), # colorer by groups\n            palett=c(climate_pallet),\n             addEllipses = T,\n             legend.title = \"Treatment\", \n             ellipse.level = 0.95,\n             ellipse.type = c(\"norm\"),\n             \n)+ ggtitle(\"Visualizing Individual PCA by treatment for stem\")\nPCA_compartment\ndev.off()\n\n# root\ndf_iono_root=df_ionomic_s_horizontal %&gt;% filter(compartiment==\"root\") %&gt;% dplyr::select(id_sample,condition_organe,compartiment,condition,N,C,Ca44,S32,Mg24,K39,P31)\nres_pca_iono_root &lt;- PCA(df_iono_root %&gt;% as.data.frame() %&gt;%  column_to_rownames(\"id_sample\"),quali.sup=1:3, graph = T)\n\nfviz_eig(res_pca_iono_root, addlabels = TRUE, ylim = c(0, 50))\nvar &lt;- get_pca_var(res_pca_iono_root)\n\ncorrplot(var$cos2, is.corr=FALSE)\n\npng(here::here(paste0(\"report/iono/plot/ACP_var_by_treatment_for_root_macro_element.png\")), width = 16, height = 16, units = 'cm', res = 600)\nfviz_pca_var(res_pca_iono_root, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE # Évite le chevauchement de texte\n)\ndev.off()\n\npng(here::here(paste0(\"report/iono/plot/ACP_by_treatment_for_root_macro_element.png\")), width = 18, height = 15, units = 'cm', res = 600)\nPCA_compartment&lt;-fviz_pca_ind(res_pca_iono_root,\n #            geom.ind = \"point\", \n             pointshape = 20,pointsize = 2,\n             col.ind = df_ionomic_s_horizontal %&gt;% filter(compartiment==\"root\") %&gt;% mutate(climat_condition=substr(condition, 5, 9)) %&gt;% pull(climat_condition), # colorer by groups\n            palett=c(climate_pallet),\n             addEllipses = T, \n             legend.title = \"Treatment\", \n             ellipse.level = 0.95,\n             ellipse.type = c(\"norm\"),\n             \n)+ ggtitle(\"Visualizing Individual PCA by treatment for root\")\nPCA_compartment\ndev.off()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n12.3.4 For sREU\n\n\nCode\ndf_sum_evapo=read.csv(here::here(\"data/water/weighing_watering_output/sum_evapotranspi.csv\"))[-1] %&gt;% \n        dplyr::rename(sum_total_evapotranspiration_rt=sum_total_evapotranspiration)\n\ndf_sREU=read.csv(here::here(\"data/iono/output/EUE_sREU_1mean.csv\"))[-1] %&gt;% \n  dplyr::rename(condition=condition_H2) %&gt;% \n  dplyr::rename(compound=compound_H2) %&gt;% \n  dplyr::rename(plant_num=plant_num_H2) %&gt;% \n  dplyr::select(plant_num,condition,compound, sEUpE) %&gt;% \n  mutate(genotype = ifelse(substr(condition, 1, 3)==\"Sto\",\"Stocata\",\"Wendy\")) %&gt;% \n  mutate(water_condition=substr(condition,5,6)) %&gt;% \n  mutate(heat_condition=substr(condition,8,9)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  #filter(compound%in%c(\"C\",\"N\",\"K39\",\"P31\",\"S32\",\"Mg24\",\"Ca44\")) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;% \n  mutate(compound = gsub(\"\\\\d\", \"\", compound)) %&gt;% \n  pivot_wider(names_from = compound, values_from = sEUpE) %&gt;% \n  drop_na(\"Mg\") %&gt;% \n  #dplyr::select(-Se,-Cu) %&gt;% \n  left_join(.,\n            read.csv(here::here(\"data/water/weighing_watering_output/WUE_sRWU_1mean.csv\"))[-1] %&gt;% \n        dplyr::select(plant_num_H2,WUE) %&gt;% \n        dplyr::rename(plant_num=plant_num_H2), \n            by=\"plant_num\") %&gt;% \n  \n  left_join(.,\n            read.csv(here::here(\"data/water/weighing_watering_output/WUE_sRWU_1mean.csv\"))[-1] %&gt;% \n        dplyr::select(plant_num_H2,sRWU) %&gt;% \n        dplyr::rename(plant_num=plant_num_H2), \n            by=\"plant_num\") %&gt;% \n  \n  left_join(.,\n            df_sum_evapo %&gt;%\n        mutate(plant_num=plant_id) %&gt;% \n        bind_rows(.,df_sum_evapo %&gt;%\n                    mutate(plant_num=plant_id+1)) %&gt;% \n        arrange(plant_num) %&gt;% \n        mutate(sum_total_evapotranspiration=sum_total_evapotranspiration_rt/2) %&gt;% \n        filter(recolte==2) %&gt;% \n        dplyr::select(plant_num, sum_total_evapotranspiration), \n            by=\"plant_num\") %&gt;% \n  dplyr::rename(S_evapo=sum_total_evapotranspiration) %&gt;% \n  \n   left_join(.,\n            read.csv(here::here(\"data/water/weighing_watering_output/transpiration_rate_20231011.csv\")) %&gt;% \n        dplyr::select(plant_num,TR_mmol_m2_s), \n            by=\"plant_num\") %&gt;% \n     dplyr::rename(TR=TR_mmol_m2_s) %&gt;% \n    left_join(.,\n            read.csv2(here::here(\"data/physio/global_physio.csv\")) %&gt;% \n        dplyr::select(plant_num,SLA), \n            by=\"plant_num\") %&gt;% \n  column_to_rownames(\"plant_num\")\n  \n\nnb &lt;- estim_ncpPCA(df_sREU,quali.sup=1:5,quanti.sup = 32:35,method.cv = \"Kfold\", verbose = FALSE) # estimate the number of components from incomplete data\n# (available methods include GCV to approximate CV)\nplot(0:5, nb$criterion, xlab = \"nb dim\", ylab = \"MSEP\")\nres.comp &lt;- imputePCA(df_sREU,quali.sup=1:5,quanti.sup = 32:35, ncp = nb$ncp) # iterativePCA algorithm\n\nres_pca_sREU&lt;-PCA(res.comp$completeObs,quali.sup=1:5,quanti.sup = 32:35, graph = TRUE)\n  \n  # mutate(compartiment=str_to_title(compartiment)) %&gt;% \n  # mutate(compartiment=factor(compartiment,levels=c(\"Leaf\",\"Stem\",\"Root\"))) \n  # res_pca_sREU &lt;- PCA(df_sREU,quali.sup=1:5,quanti.sup = 29:32, graph = F)\n\nfviz_eig(res_pca_sREU, addlabels = TRUE, ylim = c(0, 50))\nvar &lt;- get_pca_var(res_pca_sREU)\n\ncorrplot(var$cos2, is.corr=FALSE)\n\npng(here::here(paste0(\"report/iono/plot/ACP_var_sREU.png\")), width = 16, height = 16, units = 'cm', res = 600)\nfviz_pca_var(res_pca_sREU, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE \n)\ndev.off()\n\nPCA_compartment&lt;-fviz_pca_biplot(res_pca_sREU,\n            geom.ind = \"point\", \n            #shape.ind=ifelse(df_sREU$genotype==\"Wendy\",\"cross\",\"point\")\n            pointshape = 20,\n            pointsize = 3,\n            col.ind = df_sREU %&gt;% pull(condition), # colorer by groups\n            col.quanti.sup = \"red\",\n            palett=c(\"#047658\", \"#385A94\", \"#97212B\", \"#C87D04\",\"#09ECB0\", \"#A6BADD\", \"#EDABB1\", \"#FCC873\" ),\n            addEllipses = T, \n            legend.title = \"Condition\", \n            ellipse.level = 0.70,\n            ellipse.alpha=0.3,\n            ellipse.type = c(\"convex\"),\n            arrowsize=.5,\n            col.var = \"black\",axes = (c(2,1))\n)+ ggtitle(\"Visualizing Individual PCA and variable for sREU\")+\n  theme_classic()\n# png(here::here(paste0(\"report/iono/plot/ACP_sREU.png\")), width = 35, height = 18, units = 'cm', res = 900)\n# PCA_compartment\n#  dev.off()\n \n ggsave(filename = here::here(paste0(\"report/iono/plot/ACP_sREU.svg\")), plot = PCA_compartment, width = 35, height = 18, units = \"cm\")",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Analysis of ionome</span>"
    ]
  },
  {
    "objectID": "report/iono/2_rapid_analysis_iono.html#contribution-of-each-variable-for-the-concentration",
    "href": "report/iono/2_rapid_analysis_iono.html#contribution-of-each-variable-for-the-concentration",
    "title": "12  Analysis of ionome",
    "section": "12.4 Contribution of each variable for the concentration",
    "text": "12.4 Contribution of each variable for the concentration\n\n\nCode\ndf_iono_select=df_iono %&gt;%\n  filter(recolte==2) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  dplyr::select(c(plant_num, genotype, water_condition, heat_condition,condition,climat_condition,compartiment, compound, type_ion, id_sample, compartiment_compound, correct_concentration)) %&gt;% \n  dplyr::rename(concentration=correct_concentration) %&gt;% \n  filter(!compartiment_compound %in% c(\"leaf_Al27\",\"leaf_Si28\",\"root_Al27\",\"root_Si28\",\"stem_Al27\",\"stem_Si28\", \"root_Ag107\", \"stem_Ag107\",\"leaf_Ag107\",\"root_Pb208\", \"stem_Pb208\",\"leaf_Pb208\",\"root_Mo98\", \"stem_Mo98\",\"leaf_Mo98\",\"leaf_Ti49\",\"root_Ti49\",\"stem_Sb121\",\"stem_Ti49\"))\n\ncompile_result=as.data.frame(matrix(data=NA,nrow = 0, ncol = 8))\nfor (i in 1:length(levels(as.factor(df_iono_select$compartiment_compound)))){\n  variable_l_i=as.character(levels(as.factor(df_iono_select$compartiment_compound))[i])\n  cat( \"Variable:\" ,variable_l_i, \"\\n\")\n  \n  df_x= df_iono_select  %&gt;% \n    filter(compartiment_compound==variable_l_i) %&gt;% \n    drop_na(concentration)\n  \n  formula_string &lt;- as.formula(paste(\"concentration\", \"~\", paste(\"genotype\",\"*\",\"water_condition\",\"*\",\"heat_condition\", sep = \"\")))\n  \n  # Effectuer l'ANOVA à l'aide de la fonction aov\n  result_variable &lt;- aov(data = df_x, formula = formula_string)\n  anova_result=summary(result_variable)[[1]] %&gt;% mutate(R2 = `Sum Sq` / sum(`Sum Sq`))\n  \n  row_name&lt;-rownames(anova_result)\n  row_name &lt;- gsub(\"genotype\",\"Genotype\",row_name)\n  row_name &lt;- gsub(\"water_condition\",\"Water\",row_name)\n  row_name &lt;- gsub(\"heat_condition\",\"Heat\",row_name)\n  rownames(anova_result)&lt;-row_name\n  anova_result$compartiment_compound=as.character(df_x$compartiment_compound)[1]\n  compile_result=rbind(compile_result,anova_result)\n\n}\n\ncompile_result&lt;-compile_result %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column(\"contribution_variable\") %&gt;% \n  mutate(Significance = case_when(\n    `Pr(&gt;F)` &lt;= 0.001 ~ '***',\n    `Pr(&gt;F)` &lt; 0.01  ~ '**',\n    `Pr(&gt;F)` &lt; 0.05  ~ '*',\n    `Pr(&gt;F)` &lt; 0.1   ~ '.',\n    TRUE            ~ ' '\n  ))\n\ncompile_result=compile_result%&gt;% \n  filter(str_detect(contribution_variable, \"Total\", negate = TRUE)) %&gt;% \n  filter(str_detect(contribution_variable, \"Residual\", negate = TRUE)) %&gt;% \n  mutate(contribution_variable = str_replace_all(contribution_variable, \" \", \"\")) %&gt;% \n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"\\\\$\", \"\"))%&gt;%\n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"[0-9]\", \"\")) %&gt;% \n  mutate(contribution_variable = as.character(contribution_variable)) %&gt;% \n  mutate(fontcolor = ifelse(contribution_variable %in% c(\"Water\", \"Genotype:Water:Heat\"), \"#ffffff\", \"#000000\")) %&gt;% \n  mutate(contribution_variable=fct_relevel(contribution_variable,c(\"Genotype\",\"Water\",\"Heat\", \"Genotype:Water\",\"Genotype:Heat\",\"Water:Heat\",\"Genotype:Water:Heat\"))) %&gt;% \n  mutate(text_output=paste0(round(R2*100,0), \"% \", Significance))\n\ncompile_result =compile_result %&gt;% drop_na() %&gt;% dplyr::group_by(compartiment_compound) %&gt;% dplyr::mutate(residuals=1-sum(R2)) %&gt;% ungroup\n\ncompile_result_s=compile_result %&gt;% \n    left_join(.,df_iono_select %&gt;% \n                dplyr::select(compartiment_compound,type_ion,compartiment) %&gt;% \n                 distinct(compartiment_compound,type_ion,compartiment),by=\"compartiment_compound\") %&gt;% \n  mutate(\n    type_ion = case_when(\n    type_ion == \"beneficial_element\" ~ \"Beneficial Element\",\n    type_ion == \"essential_macroelement\" ~ \"Essential Macroelement\",\n    type_ion == \"essential_microelement\" ~ \"Essential Microelement\",\n    type_ion == \"other\" ~ \"Other\",\n    TRUE ~ type_ion  # Keep other values unchanged\n    )\n  )%&gt;%\n  mutate(type_ion = factor(type_ion, levels = c(\"Essential Macroelement\",\"Essential Microelement\",\"Beneficial Element\", \"Other\"))) %&gt;% \n  \n  mutate(compartiment=str_to_title(compartiment)) %&gt;% \n  mutate(compartiment = factor(compartiment, levels = c(\"Leaf\",\"Stem\",\"Root\")))  %&gt;% \n  mutate(compartiment_compound2=substr(compartiment_compound, 6, nchar(compartiment_compound))) %&gt;% \n  mutate(compartiment_compound2 = ifelse(substr(compartiment, 1, 1) == \"L\", paste0(\"  \", compartiment_compound2, \"  \"), ifelse(substr(compartiment, 1, 1) == \"S\", paste0(\" \", compartiment_compound2, \" \"),compartiment_compound2))) %&gt;% \n  mutate(compartiment_compound2 = gsub(\"\\\\d\", \"\", compartiment_compound2)) %&gt;% \n  #arrange(type_ion,compartiment,residuals) %&gt;% \n  mutate(compartiment = factor(compartiment, levels = c(\"Leaf\",\"Stem\",\"Root\"))) %&gt;% \n  #arrange(compartiment_compound2) %&gt;% \n  arrange(compartiment) \n  \n#compile_result_s$Order=1:length(compile_result_s$contribution_variable)\n\nplot_contrib&lt;-ggplot(compile_result_s, aes(x = reorder(compartiment_compound2,compartiment), y = R2, fill = contribution_variable)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = ifelse(R2 &gt; 0.03, text_output, \"\")), color = compile_result_s$fontcolor, position = position_stack(vjust = 0.5), size = 2.5)+\n  scale_fill_manual(values = c(\"#ffd166\", # geno\n                               \"#118ab2\", # water\n                               \"#ef476f\", # heat\n                               \"#06d6a0\", # watergeno\n                               \"#f78c6b\", # genoheat\n                               \"#FFB6C1\", # waterheat\n                               \"#333333\"),\n                    name = \"Contribution of the \\ngenotype or the traitment \") + # all\n  scale_y_continuous(labels = scales::percent_format())+\n  scale_color_identity()+\n  labs(x = \"Compartment\",\n       y = \"The relative contribution for the different concentration in element (%)\",\n       ) +\n  theme_minimal()+\n  theme(panel.grid = element_blank(),\n        axis.text.x = element_text(face = \"bold\",margin = margin(t = -30)),\n        axis.title.y = element_text(size=12, face=\"bold\"),\n        #legend.title = element_blank(), \n        #axis.text.x = element_text(angle = 45,hjust = 1, vjust = 1),\n        axis.title.x = element_blank(),\n        strip.text = element_text(face = \"bold\",vjust = 1,size = 12),\n        legend.position = \"bottom\"\n        )+facet_wrap(.~type_ion,scales = \"free_x\",strip.position= \"bottom\")+\n  new_scale_fill() +\n  scale_fill_manual(values = c(\"#68a500\",\"#d9d2b1\",\"#ce7f50\"),name =\"Organs\")+ #leaf,#stem #root)\n  geom_tile(aes(x = compartiment_compound2, \n                          y = -0.02,  # Adjust this value to move the rectangles downwards,\n                         fill = compartiment,\n                         width = 0.85,\n                height = 0.015\n                ),  # Rectangle width (adjustable)\n                     data = compile_result_s,\n            color=\"black\",\n                     alpha = 1,  # Rectangle opacity\n                     inherit.aes = FALSE); plot_contrib\n \n\nplot_contrib_v&lt;-ggplot(compile_result_s, aes(x = reorder(compartiment_compound2, residuals), y = R2, fill = contribution_variable)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = ifelse(R2 &gt; 0.03, text_output, \"\")), color = compile_result_s$fontcolor, position = position_stack(vjust = 0.5), size = 2.5)+\n  scale_fill_manual(values = c(\"#ffd166\", # geno\n                               \"#118ab2\", # water\n                               \"#ef476f\", # heat\n                               \"#06d6a0\", # watergeno\n                               \"#f78c6b\", # genoheat\n                               \"#FFB6C1\", # waterheat\n                               \"#333333\"),\n                    name = \"Contribution of the \\ngenotype or the traitment \") +#all\n  scale_y_continuous(labels = scales::percent_format())+\n  scale_color_identity()+\n  labs(x = \"Compartment\",\n       y = \"The relative contribution for the different concentration in element (%)\",\n       ) +\n  theme_minimal()+\n  theme(panel.grid = element_blank(),\n        axis.text.x = element_text(face = \"bold\",margin = margin(t = -30)),\n        #legend.title = element_blank(), #for delete title\n        #axis.text.x = element_text(angle = 45,hjust = 1, vjust = 1),\n        axis.title.x = element_blank(),\n        strip.text = element_text(face = \"bold\",vjust = 2),\n        legend.position = \"bottom\",\n  legend.box=\"vertical\"\n        )+\n  facet_wrap(type_ion~.,scales = \"free_x\",ncol = 1,strip.position= \"bottom\")+\n  new_scale_fill() +\n  scale_fill_manual(values = c(\"#68a500\",\"#d9d2b1\",\"#ce7f50\"),name =\"Organes\")+ #leaf,#stem #root)+\n  geom_tile(aes(x = compartiment_compound2, \n                          y = -0.02,  \n                         fill = compartiment,\n                         width = 0.85,\n                height = 0.015\n                ),  \n                     data = compile_result_s,\n            color=\"black\",\n                     alpha = 1,  \n                     inherit.aes = FALSE); plot_contrib_v\n\nggsave(here::here(\"report/iono/plot/contribution_concentration.svg\"), plot_contrib, height = 21/2.2,width = 29.7/1.7)\nggsave(here::here(\"report/iono/plot/contribution_concentration_v.svg\"), plot_contrib_v, height = 20,width = 10)",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Analysis of ionome</span>"
    ]
  },
  {
    "objectID": "report/iono/2_rapid_analysis_iono.html#contribution-of-each-variable-for-the-specific-root-element-uptake-sreu",
    "href": "report/iono/2_rapid_analysis_iono.html#contribution-of-each-variable-for-the-specific-root-element-uptake-sreu",
    "title": "12  Analysis of ionome",
    "section": "12.5 Contribution of each variable for the specific root element uptake (sREU)",
    "text": "12.5 Contribution of each variable for the specific root element uptake (sREU)\n\n\nCode\ndf_iono_efficiency=read.csv(here::here(\"data/iono/output/EUE_sREU_1mean.csv\")) %&gt;%\n  dplyr::select(plant_num_H2, condition_H2, compound_H2,EUE,sEUpE) %&gt;% \n  dplyr::rename(condition=condition_H2,compound=compound_H2, plant_num=plant_num_H2) %&gt;% \n  tidyr::separate(condition, into = c(\"genotype\", \"water_condition\",\"heat_condition\"), sep = \"_\",remove = F) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  pivot_longer(names_to = \"type\",values_to = \"value\",cols = c(\"EUE\",\"sEUpE\")) %&gt;% \n  mutate(variable=paste0(compound,\"_\",type))\n\ndf_input=df_iono_efficiency\n\ncompile_result=as.data.frame(matrix(data=NA,nrow = 0, ncol = 8))\nfor (i in 1:length(levels(as.factor(df_input$variable)))){\n  variable_l_i=as.character(levels(as.factor(df_input$variable))[i])\n  cat( \"Variable:\" ,variable_l_i, \"\\n\")\n  \n  df_x= df_input  %&gt;% \n    filter(variable==variable_l_i) %&gt;% \n    drop_na(value)\n  \n  formula_string &lt;- as.formula(paste(\"value\", \"~\", paste(\"genotype\",\"*\",\"water_condition\",\"*\",\"heat_condition\", sep = \"\")))\n  \n  # Perform ANOVA using the aov function\n  result_variable &lt;- aov(data = df_x, formula = formula_string)\n  anova_result=summary(result_variable)[[1]] %&gt;% mutate(R2 = `Sum Sq` / sum(`Sum Sq`))\n  \n  row_name&lt;-rownames(anova_result)\n  row_name &lt;- gsub(\"genotype\",\"Genotype\",row_name)\n  row_name &lt;- gsub(\"water_condition\",\"Water\",row_name)\n  row_name &lt;- gsub(\"heat_condition\",\"Heat\",row_name)\n  rownames(anova_result)&lt;-row_name\n  anova_result$variable=as.character(df_x$variable)[1]\n  compile_result=rbind(compile_result,anova_result)\n\n}\n\ncompile_result&lt;-compile_result %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column(\"contribution_variable\") %&gt;% \n  mutate(Significance = case_when(\n    `Pr(&gt;F)` &lt;= 0.001 ~ '***',\n    `Pr(&gt;F)` &lt; 0.01  ~ '**',\n    `Pr(&gt;F)` &lt; 0.05  ~ '*',\n    `Pr(&gt;F)` &lt; 0.1   ~ '.',\n    TRUE            ~ ' '\n  ))\n\ncompile_result=compile_result%&gt;% \n  filter(str_detect(contribution_variable, \"Total\", negate = TRUE)) %&gt;% \n  filter(str_detect(contribution_variable, \"Residual\", negate = TRUE)) %&gt;% \n  mutate(contribution_variable = str_replace_all(contribution_variable, \" \", \"\")) %&gt;% \n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"\\\\$\", \"\"))%&gt;%\n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"[0-9]\", \"\")) %&gt;% \n  mutate(contribution_variable = as.character(contribution_variable)) %&gt;% \n  mutate(fontcolor = ifelse(contribution_variable %in% c(\"Water\", \"Genotype:Water:Heat\"), \"#ffffff\", \"#000000\")) %&gt;% \n  mutate(contribution_variable=fct_relevel(contribution_variable,c(\"Genotype\",\"Water\",\"Heat\", \"Genotype:Water\",\"Genotype:Heat\",\"Water:Heat\",\"Genotype:Water:Heat\"))) %&gt;% \n  mutate(text_output=paste0(round(R2*100,0), \"% \", Significance))\n\ncompile_result =compile_result %&gt;% drop_na()%&gt;% dplyr::group_by(variable) %&gt;% dplyr::mutate(residuals=1-sum(R2)) %&gt;% ungroup %&gt;% arrange(residuals)\n\ncompile_result=compile_result %&gt;% \n    left_join(.,df_iono_efficiency %&gt;% \n                dplyr::select(variable,type) %&gt;% \n                 distinct(variable,type),by=\"variable\")\n\nplot_contrib&lt;-ggplot(compile_result, aes(x = reorder(variable, desc(residuals)), y = R2, fill = contribution_variable)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = ifelse(R2 &gt; 0.02, text_output, \"\")), color = compile_result$fontcolor, position = position_stack(vjust = 0.5), size = 2.5)+\n  scale_fill_manual(values = c(\"#ffd166\", # geno\n                               \"#118ab2\", # water\n                               \"#ef476f\", # heat\n                               \"#06d6a0\", # watergeno\n                               \"#f78c6b\", # genoheat\n                               \"#FFB6C1\", # waterheat\n                               \"#333333\"),\n                    name = \"title of legend (contribution\") +# all\n  scale_y_continuous(labels = scales::percent_format())+\n  scale_color_identity()+\n  labs(x = \"Compartment\",\n       y = \"The relative contribution for the different variables (%)\",\n       ) +\n  theme_minimal()+\n  theme(panel.grid = element_blank(),\n        legend.title = element_blank(), # for delete title\n        # axis.text.x = element_text(angle = 45,hjust = 1, vjust = 1),\n        axis.title.x = element_blank(),\n        legend.position = \"bottom\"\n        ) +facet_wrap(.~type,scales = \"free_y\")+\n  coord_flip(); plot_contrib\n        \nggsave(here::here(\"report/iono/plot/contribution_efficiency_1mean.svg\"), plot_contrib, height = 10,width = 18)",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Analysis of ionome</span>"
    ]
  },
  {
    "objectID": "report/iono/2_rapid_analysis_iono.html#allocation",
    "href": "report/iono/2_rapid_analysis_iono.html#allocation",
    "title": "12  Analysis of ionome",
    "section": "12.6 Allocation",
    "text": "12.6 Allocation\nThe aim here is just to see how the elements are remobilized in the plant as a function of conditions. Maybe there are differential allocation effects from roots to leaves or vice versa\n\n\nCode\ndf_iono=read.csv(here::here(\"data/iono/output/ionomic.csv\")) %&gt;% \n  filter(recolte==2) %&gt;% \n  dplyr::select(plant_num, condition, genotype, water_condition, heat_condition, compartiment,compound,  qty, allocation,correct_concentration, weight_stem,weight_leaf, weight_root) %&gt;% \n  drop_na(correct_concentration, allocation) %&gt;% \n  dplyr::group_by(condition, water_condition, heat_condition,compound,compartiment,genotype) %&gt;% \n  dplyr::summarise(qty_mean=mean(qty),allocation_mean=mean(allocation),allocation_sd=sd(allocation)) %&gt;% \n  mutate(climat_condition=paste0(water_condition, \"_\", heat_condition)) %&gt;% \n  #filter(compound%in%c(\"C\",\"N\",\"K39\",\"P31\",\"S32\",\"Mg24\",\"Ca44\")) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Wen_WW_OT\",\"Sto_WS_OT\",\"Wen_WS_OT\",\"Sto_WW_HS\",\"Wen_WW_HS\",\"Sto_WS_HS\",\"Wen_WS_HS\"))) %&gt;% \n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\", \"WS_OT\", \"WW_HS\", \"WS_HS\"))) %&gt;% \n  mutate(compartiment=str_to_title(compartiment)) %&gt;% \n  mutate(compartiment=factor(compartiment,levels=c(\"Leaf\",\"Stem\",\"Root\"))) \n  \n  ggplot(df_iono %&gt;% filter(compound!=\"C\"), aes(x = condition, y = qty_mean, fill = compound)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  labs(title = \"Total Biomass and Element Quantities\",\n       y = \"Quantity\",\n       x = \"Elements\") +\n  facet_grid(compartiment~.)+\n  scale_fill_manual(values = c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\",\n          \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\",\"green\",\"blue\",\"black\",\"red\",\"pink\",\"yellow\",\"darkblue\",\"cyan\",\"azure\",\"salmon\",\"chartreuse\",\"cyan4\",\"darkolivegreen1\",\"tomato2\",\"tan1\",\"bisque1\",\"coral\"))+\n  theme_minimal()#+scale_fill_brewer(palette = \"Dark2\")\n\npx=ggplot(df_iono, aes(x = condition, y = allocation_mean, fill = compartiment)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = paste0(round(allocation_mean*100, 0),\"\\u00B1\",round(allocation_sd*100, 0))), position = position_stack(vjust = 0.5), color = \"black\", size = 3) + \n  # geom_errorbar(aes(ymin = allocation_mean - allocation_sd, ymax = allocation_mean + allocation_sd), \n  #               width = 0.2, stat = \"identity\") +\n  \n  facet_wrap(reorder(compound, desc(qty_mean)) ~ ., strip.position = \"top\", scales = \"free_x\",ncol = 3) +\n  theme(legend.position = \"top\",\n        panel.spacing = unit(0, \"lines\"),\n        strip.background = element_blank(),\n        axis.line = element_line(colour = \"white\"),\n        panel.grid.major.y = element_line(colour = \"white\"),\n        strip.placement = \"outside\",\n        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n        panel.background = element_rect(fill = 'white', colour = 'white')) +\n  scale_fill_manual(values = c(\"#68a500\", \"#d9d2b1\", \"#ce7f50\"), name = \"Organs\")+\n  scale_y_continuous(labels = scales::percent)+\n  new_scale_fill() +\n  scale_fill_manual(values=climate_pallet,name =\"Treatment\")+ #leaf,#stem #root)+\n  geom_tile(aes(x = condition, \n                          y = -0.025,  \n                         fill = climat_condition,\n                         width = 0.90,\n                height = 0.040\n                ),  \n                     data = df_iono,\n            color=\"black\",\n                     alpha = 1,\n                     inherit.aes = FALSE)+\n  labs(y = \"Allocation %\",\n       x = \"Condition\")  ; px\n\nggsave(here::here(\"report/iono/plot/allocation.svg\"), px, height = 21,width = 10)\n\n# Divided into two\npx_best9=ggplot(df_iono %&gt;% \n                  mutate(compound=str_replace_all(compound, \"[0-9]\", \"\")) %&gt;% \n                  filter(compound %in% c(\"C\",\"N\",\"Ca\",\"K\",\"Mg\",\"S\",\"P\",\"Na\",\"Fe\")), aes(x = condition, y = allocation_mean, fill = compartiment)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = paste0(round(allocation_mean*100, 0),\"\\u00B1\",round(allocation_sd*100, 0))), position = position_stack(vjust = 0.5), color = \"black\", size = 3) + \n  # geom_errorbar(aes(ymin = allocation_mean - allocation_sd, ymax = allocation_mean + allocation_sd), \n  #               width = 0.2, stat = \"identity\") +\n  \n  facet_wrap(reorder(compound, desc(qty_mean)) ~ ., strip.position = \"top\",ncol = 3, axes = \"all\", axis.labels = \"all_y\") +\n  theme(legend.position = \"bottom\",\n        panel.spacing = unit(0, \"lines\"),\n        strip.background = element_blank(),\n        axis.line = element_line(colour = \"white\"),\n        panel.grid.major.y = element_line(colour = \"white\"),\n        strip.placement = \"outside\",\n        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n        panel.background = element_rect(fill = 'white', colour = 'white'),\n        axis.ticks.x=element_blank()) +\n  scale_fill_manual(values = c(\"#68a500\", \"#d9d2b1\", \"#ce7f50\"), name = \"Organs\")+\n  scale_y_continuous(labels = scales::percent)+\n  new_scale_fill() +\n  scale_fill_manual(values=climate_pallet,name =\"Treatment\")+ #leaf,#stem #root)+\n  geom_tile(aes(x = condition, \n                          y = -0.050,  \n                         fill = climat_condition,\n                         width = 0.90,\n                height = 0.060\n                ),  \n                     data = df_iono %&gt;% \n                  mutate(compound=str_replace_all(compound, \"[0-9]\", \"\")) %&gt;% \n                  filter(compound %in% c(\"C\",\"N\",\"Ca\",\"K\",\"Mg\",\"S\",\"P\",\"Na\",\"Fe\")),\n            color=\"black\",\n                     alpha = 1,\n                     inherit.aes = FALSE)+\n  labs(y = \"Allocation %\",\n       x = \"Condition\") ; px_best9\n\nggsave(here::here(\"report/iono/plot/allocation_best9.svg\"), px_best9, height = 7,width = 11)\n\n# Other ########\npx_other=ggplot(df_iono %&gt;% \n                  mutate(compound=str_replace_all(compound, \"[0-9]\", \"\")) %&gt;% \n                  filter(!compound %in% c(\"C\",\"N\",\"Ca\",\"K\",\"Mg\",\"S\",\"P\",\"Na\",\"Fe\")), aes(x = condition, y = allocation_mean, fill = compartiment)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = paste0(round(allocation_mean*100, 0),\"\\u00B1\",round(allocation_sd*100, 0))), position = position_stack(vjust = 0.5), color = \"black\", size = 3) + \n  # geom_errorbar(aes(ymin = allocation_mean - allocation_sd, ymax = allocation_mean + allocation_sd), \n  #               width = 0.2, stat = \"identity\") +\n  \n  facet_wrap(reorder(compound, desc(qty_mean)) ~ ., strip.position = \"top\",ncol = 4, axes = \"all\", axis.labels = \"all_y\") +\n  theme(legend.position = \"bottom\",\n        panel.spacing = unit(0, \"lines\"),\n        strip.background = element_blank(),\n        axis.line = element_line(colour = \"white\"),\n        panel.grid.major.y = element_line(colour = \"white\"),\n        strip.placement = \"outside\",\n        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n        panel.background = element_rect(fill = 'white', colour = 'white'),\n        axis.ticks.x=element_blank()) +\n  scale_fill_manual(values = c(\"#68a500\", \"#d9d2b1\", \"#ce7f50\"), name = \"Organs\")+\n  scale_y_continuous(labels = scales::percent)+\n  new_scale_fill() +\n  scale_fill_manual(values=climate_pallet,name =\"Treatment\")+ #leaf,#stem #root)+\n  geom_tile(aes(x = condition, \n                          y = -0.050,  \n                         fill = climat_condition,\n                         width = 0.90,\n                height = 0.060\n                ),\n                     data = df_iono %&gt;% \n                  mutate(compound=str_replace_all(compound, \"[0-9]\", \"\")) %&gt;% \n                  filter(!compound %in% c(\"C\",\"N\",\"Ca\",\"K\",\"Mg\",\"S\",\"P\",\"Na\",\"Fe\")),\n            color=\"black\",\n                     alpha = 1,\n                     inherit.aes = FALSE)+\n  labs(y = \"Allocation %\",\n       x = \"Condition\") ; px_other\n\nggsave(here::here(\"report/iono/plot/allocation_other.svg\"), px_other, height = 10,width = 14)\n\n\n\n\n\nBonus: Some stats for ionomic analysis\n\n\n\nCode\ntest=df_iono_select %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;%\n  filter(compound==\"P31\") %&gt;%\n  drop_na(correct_concentration) %&gt;% \n  filter(compartiment==\"leaf\") %&gt;% \n  # filter(climat_condition==\"WW_OT\") %&gt;% \n  t_test(correct_concentration ~ condition,p.adjust.method = \"BH\") %&gt;%\n  add_significance()\n\n\n\n\nCode\ndf_physio_s=df_iono_select %&gt;% \n  mutate(across(c(\"genotype\",\"water_condition\",\"heat_condition\"), as.factor)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;%\nfilter(compound==\"Mg24\") %&gt;%\n  drop_na(correct_concentration) %&gt;% \n  filter(compartiment==\"stem\") %&gt;% \n  #filter(genotype==\"Stocata\") %&gt;% \n  #filter(climat_condition%in% c(\"WW_OT\",\"WS_HS\")) %&gt;% \n  dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(Mean=mean(correct_concentration)) ; df_physio_s\n\nall=((df_physio_s$Mean[1]-df_physio_s$Mean[5])/df_physio_s$Mean[5])+((df_physio_s$Mean[2]-df_physio_s$Mean[6])/df_physio_s$Mean[6])+((df_physio_s$Mean[3]-df_physio_s$Mean[7])/df_physio_s$Mean[7])+((df_physio_s$Mean[4]-df_physio_s$Mean[8])/df_physio_s$Mean[8])\n\nall/4\n\nall=((df_physio_s$Mean[1]-df_physio_s$Mean[5])/df_physio_s$Mean[5])+((df_physio_s$Mean[2]-df_physio_s$Mean[6])/df_physio_s$Mean[6])\n\nall/2\n\n\nMultiple regression model\n\n\nCode\ndf_iono=read.csv(here::here(\"data/iono/output/ionomic.csv\")) %&gt;% \n  filter(recolte==2) %&gt;% \n  filter(compartiment==\"stem\") %&gt;% \n  mutate(across(c(genotype, water_condition, heat_condition), factor)) %&gt;% \n  mutate(water_condition=relevel(water_condition, \"WW\")) %&gt;% \n  mutate(heat_condition=relevel(heat_condition, \"OT\")) %&gt;% \n  dplyr::select(plant_num, condition, genotype, water_condition, heat_condition, compound,  correct_concentration) %&gt;% \n  pivot_wider(names_from = compound, values_from = correct_concentration) %&gt;% \n  \n  drop_na(S32, N) %&gt;% \n  mutate(S_N= S32/N)\n\ncontrasts(df_iono$genotype) &lt;- contr.sum # to say look at the big average only for genotype (juste an other representation)\nmod1=lm(formula = C ~ water_condition*heat_condition*genotype, data = df_iono %&gt;% drop_na(S32, N),contrasts = list(genotype = MASS::contr.sdif))\np_x&lt;-ggcoef_model(mod1) # ; p_x\nggsave(here::here(\"report/iono/plot/ggcoef_model_1.svg\"),p_x)\n\n\nA criterion must be defined to determine the quality of a model. One of the most widely used is the Akaike Information Criterion or AIC. It is a compromise between the number of degrees of freedom (e.g. the number of coefficients in the model) we wish to minimize and the explained variance we wish to maximize (the likelihood).\nThe AIC resuls for this first model is 900.95\nThe step() function selects the best model using a top-down step-by-step procedure based on AIC minimization. The function displays the various selection steps on the screen and returns the final model.\nThe AIC resuls for this second model is 895.7\n\n\n\n\nDisplay performance indicators and the regression results\n\n\nCode\n# mod2 |&gt; performance::model_performance()\nperformance::compare_performance(mod1, mod2)\nmod2 |&gt; \n  tbl_regression() |&gt; \n  bold_labels() |&gt; \n  add_glance_source_note()\n\n\nComparison of the two models\n\n\nCode\nggstats::ggcoef_compare(\n  list(mod1,mod2),\n  tidy_fun = broom.helpers::tidy_marginal_predictions,\n  type = \"dodge\",\n  vline = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\nFigure: Concentration of elements in the different plant compartments for the two genotypes and for each stress condition\n\n Show Mg content for reviewer\n\n\nCode\ndf_iono=read.csv(here::here(\"data/iono/output/ionomic.csv\")) %&gt;% \n  dplyr::select(plant_num, recolte, condition, genotype, water_condition, heat_condition, compartiment, compound, correct_concentration) %&gt;% \n  dplyr::rename(harvest = recolte,\n                compartment = compartiment,\n                concentration = correct_concentration) %&gt;% \n  mutate(climat_condition = paste0(water_condition,\"_\", heat_condition)) %&gt;% \n  filter(harvest == 2) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Stoc_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\")),\n         climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\")))\n  \nlibrary(patchwork)\nplots_list &lt;- list()\n\ncompound_i &lt;- \"Mg24\"\ncompartments &lt;- c(\"leaf\", \"stem\", \"root\")\n\nfor (comp in compartments) {\n  df_iono_compartment &lt;- comp\n  # Ajuster le label de l'axe Y pour refléter le compartiment\n  Ylab_i &lt;- as.expression(bquote(paste(\"Mg in \", .(df_iono_compartment), \" (\", mu, \"g/g)\")))\n  \n  # Analyse\n  plot_x = stat_analyse(\n    data = df_iono %&gt;% \n      filter(compartment == df_iono_compartment,\n             compound == compound_i) %&gt;% \n      drop_na(genotype, climat_condition, concentration),\n    column_value = \"concentration\",\n    category_variables = c(\"climat_condition\"),\n    grp_var = \"genotype\",\n    show_plot = TRUE,\n    outlier_show = FALSE,\n    label_outlier = \"plant_num\",\n    biologist_stats = TRUE,\n    Ylab_i = Ylab_i,\n    control_conditions = c(\"WW_OT\"),\n    hex_pallet = climate_pallet,\n    strip_normale = FALSE\n  )\n  \n  # Stocker le graphique dans la liste\n  plots_list[[comp]] &lt;- plot_x[[\"plot\"]] + labs(fill = \"Treatment\", color = \"Treatment\") + ggtitle(str_to_title(comp))\n}\n\n# Combiner les graphiques avec patchwork\ncombined_plot &lt;- wrap_plots(plots_list, ncol = 1, guides = \"collect\") &\n  theme(legend.position = \"right\")\n\n# Exporter la figure combinée\npng(here::here(\"report/iono/plot/supp/Mg_concentration_combined.png\"), width = 12, height = 18, units = 'cm', res = 900)\nprint(combined_plot)\ndev.off()",
    "crumbs": [
      "**⚛️ Ionomics**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Analysis of ionome</span>"
    ]
  },
  {
    "objectID": "report/multi_omics/A1_physio_iono_RA.html",
    "href": "report/multi_omics/A1_physio_iono_RA.html",
    "title": "13  Root architecture - Ionomics - Biomass - Water - Licor",
    "section": "",
    "text": "13.1 Bind the different dataframe\nCode\n# data import base information from experiment\ndf_plant_info=readxl::read_excel(here::here(\"data/plant_information.xlsx\")) %&gt;%\n  dplyr::select(plant_num,condition,genotype,water_condition,heat_condition,plant_id) %&gt;% \n  mutate(climat_condition=paste0(water_condition,\"_\",heat_condition))\n\n# data ionomic and linking with water\ndf_plant_num=import_plant_num(df_iono_conc_i =T,df_physio_i = T, df_sum_evapo_select_i = T, df_water_potential = T, df_licor_i =T,df_sEUpE_i = T,df_WUE_i = T,df_sRWU_i = T,df_RUE_i = T,df_TR_i = T) %&gt;% \n  dplyr::rename(ETtot=sum_total_evapotranspiration) %&gt;% \n  dplyr::rename(LWP=Hydric_potential) %&gt;% \n  dplyr::rename(DW_leaf=weight_leaf) %&gt;% \n  dplyr::rename(DW_stem=weight_stem) %&gt;% \n  dplyr::rename(DW_root=weight_root) %&gt;% \n  dplyr::rename(leaf_Area=leaf_area) %&gt;% \n  dplyr::rename(Tot_DW=sum_biomass) %&gt;% \n  dplyr::rename(An=Photo) %&gt;% \n  dplyr::rename(S.R=shoot_root_ratio) %&gt;% \n  dplyr::rename(TR=TR_mmol_m2_s ) %&gt;% \n  \n  \n  dplyr::select(-c(condition,genotype,water_condition,heat_condition,plant_id,climat_condition, Trmmol))\n  \n\n# data deap learning root architecture and height of the plant\ndf_DL_archi_19=import_kinetic(df_ra_i = T,df_height_plant_i = F,key = \"plant_num_shooting_date\") %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;%\n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;%\n  filter(recolte==2) %&gt;% \n  filter(days_after_transplantation!=3) %&gt;% \n  filter(days_after_transplantation==19) %&gt;% \n  dplyr::select(plant_num,root,surface, volume, perimeter,area,largeur,length_skull,density) %&gt;% \n  mutate(plant_num=as.numeric(as.character(plant_num))) %&gt;% \n  dplyr::rename(root_Area=root,\n                root_Length=length_skull,\n                root_ConvexHull=area, \n                root_Surface=surface, \n                root_Volume=volume) %&gt;% \n  #dplyr::rename(PlantHeight=diff_correct_plant_height) %&gt;% \n  dplyr::rename(root_Width=largeur)\n\n# data from macro imagJ/fiji (root tips number, angle of root, length of the root)\n# /!\\ for macro is litle bit wrong i associate the wrong plant but, at the opposite i associate the same rhizotube. \ndf_MACRO_archi_19=import_kinetic(df_root_tips_nb_10000_i = T,df_root_tips_angle_i = T,df_root_tips_length_mean_i = T, df_root_tips_length_sum_i = T ,df_root_nb_ramif_i = T,df_root_tips_nb_macro_i = T,key = \"plant_num_shooting_date\") %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;%\n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;%\n  filter(recolte==2) %&gt;%\n  filter(days_after_transplantation!=3) %&gt;% \n  filter(days_after_transplantation==19) %&gt;% \n  dplyr::select(plant_num, nb_tips_macro_1, nb_tips_macro_2, nb_tips_macro_3, sum_tips_macro, Angle_ABC2_mean_1, Angle_ABC2_mean_2, Angle_ABC2_mean_3,BC2_mean_1, BC2_mean_2, BC2_mean_3,BC2_sum_1,BC2_sum_2,BC2_sum_3) %&gt;% \n  mutate(plant_num=as.numeric(as.character(plant_num))) %&gt;% \n  filter(plant_num %% 2 == 0) %&gt;%  # select only even elements. \n  mutate(plant_num=plant_num-1) %&gt;% \n  dplyr::rename(root_LR2=nb_tips_macro_2,\n                root_LR1=nb_tips_macro_1,\n                root_LR3=nb_tips_macro_3) %&gt;% \n  dplyr::rename(root_LR_tot=sum_tips_macro) %&gt;% \n  dplyr::select(-root_LR3)\n  \n# df_MACRO_archi_19 %&gt;%\n#   pivot_longer(-plant_num,names_to = \"variable\",values_to = \"value\") %&gt;% \n#   dplyr::group_by(variable,)\n\n# compilation of the tree dataset    \ndf_compile=full_join(df_plant_info,df_plant_num,by=\"plant_num\") %&gt;%\n  full_join(.,df_DL_archi_19,by=\"plant_num\") %&gt;% \n  full_join(.,df_MACRO_archi_19,by=\"plant_num\") %&gt;% \n  as.data.frame() #/!\\ not working with tibble\n\nwrite.csv(file = here::here(\"data/multi_omics/output/df_all_information_plant_num_day19.csv\"),x=df_compile,row.names = F)",
    "crumbs": [
      "**📊 Multi-Omics Integration**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Root architecture - Ionomics - Biomass - Water - Licor</span>"
    ]
  },
  {
    "objectID": "report/multi_omics/A1_physio_iono_RA.html#creation-of-row-data-table-for-publication",
    "href": "report/multi_omics/A1_physio_iono_RA.html#creation-of-row-data-table-for-publication",
    "title": "13  Root architecture - Ionomics - Biomass - Water - Licor",
    "section": "13.2 Creation of row data table for publication",
    "text": "13.2 Creation of row data table for publication\n\n\nCode\ndf_kinetic&lt;-import_kinetic(df_root_tips_nb_10000_i = T,df_root_tips_angle_i = T,df_root_tips_length_mean_i = T, df_root_tips_length_sum_i = T ,df_root_nb_ramif_i = T,df_root_tips_nb_macro_i = T,key = \"plant_num_shooting_date\",df_height_plant_i = T) %&gt;% \n  mutate(condition=factor(condition,levels=c(\"Sto_WW_OT\",\"Sto_WS_OT\",\"Sto_WW_HS\",\"Sto_WS_HS\",\"Wen_WW_OT\",\"Wen_WS_OT\",\"Wen_WW_HS\",\"Wen_WS_HS\"))) %&gt;%\n  mutate(climat_condition=factor(climat_condition,levels=c(\"WW_OT\",\"WS_OT\",\"WW_HS\",\"WS_HS\"))) %&gt;%\n  dplyr::select(plant_num, shooting_date,condition ,days_after_transplantation, nb_tips_macro_1, nb_tips_macro_2, nb_tips_macro_3, sum_tips_macro, Angle_ABC2_mean_1, Angle_ABC2_mean_2, Angle_ABC2_mean_3,BC2_mean_1, BC2_mean_2, BC2_mean_3,BC2_sum_1,BC2_sum_2,BC2_sum_3) %&gt;% \n  mutate(plant_num=as.numeric(as.character(plant_num))) %&gt;% \n  filter(plant_num %% 2 == 0) %&gt;%  # select only even elements. \n  mutate(plant_num=plant_num-1) %&gt;% \n  dplyr::rename(root_LR2=nb_tips_macro_2,\n                root_LR1=nb_tips_macro_1,\n                root_LR3=nb_tips_macro_3) %&gt;% \n  dplyr::rename(root_LR_tot=sum_tips_macro) %&gt;% \n  dplyr::select(-root_LR3)\n\nl &lt;- list(\n  \"Raw_data_at_19_days\" = df_compile,\n  \"Kinetic architecture\"=df_kinetic,\n  \"Envirotyping\" = read.csv(here::here(\"data/climat/output/climat_temperature.csv\"))[-1], \n  \"Watering\"=read.csv(here::here(\"data/water/weighing_watering_output/all_weighing_watering.csv\"))[-1]\n  )\nwrite.xlsx(l, file = here::here(\"data/multi_omics/output/Supporting_Information_1_data_RA_kinectics_ionomic_Envirotyping.xlsx\"), asTable = TRUE)",
    "crumbs": [
      "**📊 Multi-Omics Integration**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Root architecture - Ionomics - Biomass - Water - Licor</span>"
    ]
  },
  {
    "objectID": "report/multi_omics/A1_physio_iono_RA.html#creation-of-table-resume",
    "href": "report/multi_omics/A1_physio_iono_RA.html#creation-of-table-resume",
    "title": "13  Root architecture - Ionomics - Biomass - Water - Licor",
    "section": "13.3 Creation of table resume",
    "text": "13.3 Creation of table resume\n\n\nCode\n# test=analyzePlantData(A = \"Sto_WW_OT\",B=\"Sto_WS_HS\",v_var = c(\"DW_stem\", \"DW_leaf\", \"An\",\"SLA\")) #%&gt;% \n  #dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative))\n\n# rule for scientific value\nformat_conditionnel &lt;- function(x) {\n  ifelse(x &gt; 1000 | x &gt;= 0.0 & x &lt;= 0.01, format(x, scientific = TRUE, digits = 2), round(x,2))#digit and rule for scientific format\n}\n\n#colnames(read.csv(file = here::here(\"data/multi_omics/output/df_all_information_plant_num_day19.csv\")))\n############ parameter ##############\n\nv_related_to_carbon_flow &lt;- c(\"DW_leaf\", \"DW_stem\", \"DW_root\",\"An\",\"Tot_DW\",\"leaf_Area\") \nv_related_to_carbon_flow &lt;- c(\"An\",\"leaf_Area\") \n\nv_related_to_water_flow &lt;- c(\"ETtot\",\"LWP\",\"TR\",\"sRWU\",\"WUE\",\"Cond\") \n\nv_related_to_RSA &lt;- c(\"root_Area\",\"root_Length\",\"root_ConvexHull\", \"root_Width\", \"root_Surface\", \"root_Volume\",\"density\",\"root_LR1\",\"root_LR2\",\"root_LR_tot\",\"BC2_mean_1\",\"BC2_mean_2\",\"BC2_sum_1\",\"BC2_sum_2\") \nv_related_to_RSA &lt;- c(\"root_Area\",\"root_Surface\", \"root_Volume\",\"root_Length\",\"root_ConvexHull\", \"root_Width\",\"density\",\"BC2_mean_1\",\"BC2_sum_1\",\"BC2_sum_2\") \n\nv_var&lt;-c(v_related_to_carbon_flow, v_related_to_water_flow,v_related_to_RSA, \"SLA\", \"Tleaf\",\"S.R\")\nv_var&lt;-c(v_related_to_carbon_flow, v_related_to_water_flow, v_related_to_RSA, \"Tleaf\", \"SLA\")\n\nlist_dataframes &lt;- list() #to create excel\n\n##########  table Stocata ###########\ngt_sto_resum&lt;-analyzePlantData(A = \"Sto_WW_OT\",B=\"Sto_WS_OT\",v_var = v_var) %&gt;% \n  dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value)) %&gt;% \n  \n  #compilationwith other condition\n  inner_join(analyzePlantData(A = \"Sto_WW_OT\",B=\"Sto_WW_HS\",v_var = v_var) %&gt;% \n  dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value,Sto_WW_OT_mean,Sto_WW_OT_sd)),\n  by=\"variable\") %&gt;% \n  \n  inner_join(analyzePlantData(A = \"Sto_WW_OT\",B=\"Sto_WS_HS\",v_var = v_var) %&gt;% \n  dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value,Sto_WW_OT_mean,Sto_WW_OT_sd)),\n  by=\"variable\") %&gt;% \n  \n  mutate(type_variable = case_when(\n    variable %in% v_related_to_carbon_flow ~ \"Variable related to carbon flows\",\n    variable %in% v_related_to_water_flow ~ \"Variable related to water flows\",\n    variable %in% v_related_to_RSA ~ \"Variable related to RSA\",\n    TRUE ~ \"Other variable\" \n  )) %&gt;% \n  tibble() %&gt;% \n   mutate(type_variable = factor(type_variable)) %&gt;% # Assurez-vous que type_variable est un facteur\n  arrange(variable) %&gt;% \n  arrange(type_variable == \"Other variable\", type_variable) %&gt;% \n  \n  dplyr::mutate(across(where(is.numeric), ~format_conditionnel(.x))) %&gt;% \n  dplyr::mutate(across(contains(\"sd\"), ~paste0(\"±\", .))) \n\n  list_dataframes[[\"Stocata\"]] &lt;- gt_sto_resum \n  \n  gt_sto_resum=gt_sto_resum %&gt;% \n  gt(groupname_col = \"type_variable\") %&gt;% \n  tab_options(\n    row.striping.include_table_body = TRUE\n  ) %&gt;%\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_column_labels(columns = TRUE)\n  ) %&gt;%\n  tab_style(\n    style =list(\n      cell_text(style  = \"italic\")),\n    locations = cells_group(groups = TRUE)\n  ) %&gt;% \n  tab_style(\n    style = cell_text(weight = \"bold\", align=\"center\"),\n    locations = cells_body(\n      columns = c(contains(\"_mean\"))\n    )\n  ) %&gt;% \n  cols_label(\n    variable = \"Variable\",\n    Sto_WW_OT_mean = \"Sto_WW_OT\",\n    Sto_WW_OT_sd = \"\",\n    \n    Sto_WS_OT_mean = \"Sto_WS_OT\",\n    Sto_WW_HS_mean = \"Sto_WW_HS\",\n    Sto_WS_HS_mean = \"Sto_WS_HS\",\n    \n    Sto_WS_OT_sd = \" \",\n    Sto_WW_HS_sd = \" \",\n    Sto_WS_HS_sd = \" \",\n    \n    Sto_WS_OT_Significance = \"\",\n    Sto_WW_HS_Significance = \"\",\n    Sto_WS_HS_Significance = \"\"\n    ) %&gt;% \n    tab_header(\n    title = md(paste0(\"Summary of physiological and structural variables for Stocata\"))#,\n    #subtitle = \"Yearly measurements of Bill depth, Bill length, Body Mass and Flipper Length in each island \"\n  ) %&gt;% \n  tab_footnote(\n    footnote = \"For each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\"\n                 ) %&gt;% \n   text_case_match(\n    \"An\" ~  \"An (\\U00B5mol CO\\U2082.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"DW_leaf\" ~ \"Leaf dry weight (g)\",\n    \"DW_stem\" ~ \"Stem dry weight (g)\",\n    \"DW_root\" ~ \"Root dry weight (g)\",\n    \"leaf_Area\" ~ \"Leaf area (cm²)\",\n    \"RUE\" ~ \"RUE (g.cm\\U207B\\U00B2)\",\n    \"Tot_DW\" ~ \"Total dry weiht (g)\",\n    \"BC2_mean_1\"~\"Mean Length root of order 1 (cm)\",\n    \"BC2_mean_2\"~\"Mean Length root of order 2 (cm)\",\n    \n    \"BC2_sum_1\"~\"Sum Length root of order 1 (cm)\",\n    \"BC2_sum_2\"~\"Sum Length root of order 2 (cm)\",\n    \n    \"density\"~\"Density\", \n    \"root_LR1\"~\"LR1\",\n    \"root_LR3\"~\"LR3\",\n    \"root_Area\"~\"Root projected area (cm²)\", \n    \"root_Surface\"~\"Root surface area (cm²)\", \n    \"root_Volume\"~\"Root volume (cm\\u00B3)\",\n    \"root_ConvexHull\"~\"Area of the root convex hull (cm²)\",\n    \"root_Length\"~\"Root length (cm)\",\n    \"root_LR2\"~\"LR2\",\n    \"root_LR_tot\"~\"LR Total\",\n    \"root_Width\"~\"Root Width (cm)\",\n    \"Cond\"~\"g\\U209B (mol H\\U2082O.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"ETtot\"~\"ETtot (mL)\",\n    \"LWP\"~\"\\u03C8&lt;sub&gt;leaf&lt;/sub&gt; (MPa)\",\n    \"sRWU\"~ \"sRWU (gH&lt;sub&gt;2&lt;/sub&gt;O[gBM&lt;sub&gt;root&lt;/sub&gt;.day\\U207B\\U00B9]\\U207B\\U00B9)\",\n    \"TR\"~\"TR (mmol H\\U2082O.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"WUE\"~\"WUE (g.gH\\U2082O\\U207B\\U00B9)\",\n    \"Tleaf\"~\"Leaf temperature (°C)\", \n    \"SLA\"~\"SLA (m²/kg)\",\n    \"S.R\"~\"Shoot / Root ratio\"\n  )\ngt_sto_resum\n\n\n\n\n\n\n\n\nSummary of physiological and structural variables for Stocata\n\n\nVariable\nSto_WW_OT\n\nSto_WS_OT\n\n\nSto_WW_HS\n\n\nSto_WS_HS\n\n\n\n\n\n\nVariable related to carbon flows\n\n\nAn (µmol CO₂.m⁻².s⁻¹)\n9.38\n±1\n4.11\n±2.37\n***\n7.73\n±2.22\nns\n0.21\n±3.09\n**\n\n\nLeaf area (cm²)\n187.72\n±35.4\n65.14\n±9.75\n***\n164.94\n±28.29\nns\n31.19\n±8.06\n***\n\n\nVariable related to RSA\n\n\nMean Length root of order 1 (cm)\n3.51\n±0.69\n3.43\n±0.54\nns\n3.26\n±0.63\nns\n3.13\n±0.64\nns\n\n\nSum Length root of order 1 (cm)\n574.97\n±111.24\n454.55\n±36.55\n*\n410.44\n±44.84\n**\n388.08\n±73.56\n**\n\n\nSum Length root of order 2 (cm)\n590.8\n±175.7\n268.18\n±62.7\n***\n278.01\n±101.16\n**\n20.16\n±10.37\n***\n\n\nDensity\n0.3\n±0.04\n0.25\n±0.04\n***\n0.23\n±0.05\n***\n0.16\n±0.04\n***\n\n\nRoot projected area (cm²)\n60.71\n±10.34\n40.06\n±5.18\n***\n46.63\n±8.91\n***\n19.74\n±3.16\n***\n\n\nArea of the root convex hull (cm²)\n205.35\n±34.8\n165.29\n±26.16\n***\n205.41\n±37.81\nns\n125.86\n±30.34\n***\n\n\nRoot length (cm)\n1.3e+03\n±240.9\n877.14\n±121\n***\n976.87\n±175.47\n***\n452.54\n±69.73\n***\n\n\nRoot surface area (cm²)\n203.03\n±35.47\n129.83\n±16.96\n***\n154.48\n±30.74\n***\n63.07\n±10.18\n***\n\n\nRoot volume (cm³)\n960.87\n±217.1\n543.56\n±93.07\n***\n713.61\n±198.43\n***\n243.63\n±50.19\n***\n\n\nRoot Width (cm)\n23.9\n±3.12\n22.42\n±2.64\n*\n23.6\n±3.51\nns\n17.14\n±4.06\n***\n\n\nVariable related to water flows\n\n\ngₛ (mol H₂O.m⁻².s⁻¹)\n0.1\n±0.1\n-0.01\n±0.03\n*\n0.11\n±0.1\nns\n0.00\n±0.02\n*\n\n\nETtot (mL)\n1.6e+03\n±213.91\n443.00\n±50.34\n***\n1.8e+03\n±161.39\n***\n501.00\n±42.67\n***\n\n\nψleaf (MPa)\n-0.09\n±0.12\n-0.73\n±0.65\nns\n-0.09\n±0.04\nns\n-2.12\n±0.39\n***\n\n\nsRWU (gH2O[gBMroot.day⁻¹]⁻¹)\n0.74\n±0.14\n0.35\n±0.03\n***\n1.03\n±0.16\n***\n0.66\n±0.11\nns\n\n\nTR (mmol H₂O.m⁻².s⁻¹)\n3.51\n±0.44\n1.00\n±0.38\n***\n4.31\n±0.61\n***\n1.17\n±0.53\n***\n\n\nWUE (g.gH₂O⁻¹)\n0.74\n±0.1\n1.03\n±0.1\n***\n0.57\n±0.06\n***\n0.47\n±0.13\n***\n\n\nOther variable\n\n\nSLA (m²/kg)\n33.58\n±2.62\n30.59\n±2.27\n**\n30.39\n±3.18\n**\n22.84\n±2.74\n***\n\n\nLeaf temperature (°C)\n31.85\n±0.57\n33.14\n±0.21\n***\n35.48\n±0.8\n***\n37.26\n±0.5\n***\n\n\n\nFor each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\n\n\n\n\n\n\n\n\nCode\n##########  table Wendy ###########\ngt_wen_resum&lt;-analyzePlantData(A = \"Wen_WW_OT\",B=\"Wen_WS_OT\",v_var = v_var) %&gt;% \n  dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value)) %&gt;% \n  \n  #compilationwith other condition\n  inner_join(analyzePlantData(A = \"Wen_WW_OT\",B=\"Wen_WW_HS\",v_var = v_var) %&gt;% \n  dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value,Wen_WW_OT_mean,Wen_WW_OT_sd)),\n  by=\"variable\") %&gt;% \n  \n  inner_join(analyzePlantData(A = \"Wen_WW_OT\",B=\"Wen_WS_HS\",v_var = v_var) %&gt;% \n  dplyr::select(-c(estimate,statistic,parameter,conf.low, conf.high, method, alternative,p.value,Wen_WW_OT_mean,Wen_WW_OT_sd)),\n  by=\"variable\") %&gt;% \n  \n  dplyr::mutate(type_variable = case_when(\n    variable %in% v_related_to_carbon_flow ~ \"Variable related to carbon flows\",\n    variable %in% v_related_to_water_flow ~ \"Variable related to water flows\",\n    variable %in% v_related_to_RSA ~ \"Variable related to RSA\",\n    TRUE ~ \"Other variable\" \n  )) %&gt;% \n  tibble() %&gt;% \n  \n   dplyr::mutate(type_variable = factor(type_variable)) %&gt;% # Assurez-vous que type_variable est un facteur\n  arrange(variable) %&gt;% \n  arrange(type_variable == \"Other variable\", type_variable) %&gt;% \n  \n  dplyr::mutate(across(where(is.numeric), ~format_conditionnel(.x))) %&gt;% \n  dplyr::mutate(across(contains(\"sd\"), ~paste0(\"±\", .)))\n  \n  list_dataframes[[\"Wendy\"]] &lt;- gt_wen_resum \n  \n  gt_wen_resum=gt_wen_resum %&gt;% \n  gt(groupname_col = \"type_variable\") %&gt;% \n  tab_options(\n    row.striping.include_table_body = TRUE\n  ) %&gt;%\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_column_labels(columns = TRUE)\n  ) %&gt;%\n  tab_style(\n    style =list(\n      cell_text(style  = \"italic\")),\n    locations = cells_group(groups = TRUE)\n  ) %&gt;% \n  tab_style(\n    style = cell_text(weight = \"bold\", align=\"center\"),\n    locations = cells_body(\n      columns = c(contains(\"_mean\"))\n    )\n  ) %&gt;% \n  cols_label(\n    variable = \"Variable\",\n    Wen_WW_OT_mean = \"Wen_WW_OT\",\n    Wen_WW_OT_sd = \"\",\n    \n    Wen_WS_OT_mean = \"Wen_WS_OT\",\n    Wen_WW_HS_mean = \"Wen_WW_HS\",\n    Wen_WS_HS_mean = \"Wen_WS_HS\",\n    \n    Wen_WS_OT_sd = \"\",\n    Wen_WW_HS_sd = \"\",\n    Wen_WS_HS_sd = \"\",\n    \n    Wen_WS_OT_Significance = \"\",\n    Wen_WW_HS_Significance = \"\",\n    Wen_WS_HS_Significance = \"\"\n    ) %&gt;% \n    tab_header(\n    title = md(paste0(\"Summary of physiological and structural variables for Wendy\"))#,\n    #subtitle = \"Yearly measurements of Bill depth, Bill length, Body Mass and Flipper Length in each island \"\n  ) %&gt;% \n  tab_footnote(\n    footnote = \"For each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\"\n                 ) %&gt;% \n   text_case_match(\n    \"An\" ~  \"An (\\U00B5mol CO\\U2082.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"DW_leaf\" ~ \"Leaf dry weight (g)\",\n    \"DW_stem\" ~ \"Stem dry weight (g)\",\n    \"DW_root\" ~ \"Root dry weight (g)\",\n    \"leaf_Area\" ~ \"Leaf area (cm²)\",\n    \"RUE\" ~ \"RUE (g.cm\\U207B\\U00B2)\",\n    \"Tot_DW\" ~ \"Total dry weiht (g)\",\n    \"BC2_mean_1\"~\"Mean Length root of order 1 (cm)\",\n    \"BC2_mean_2\"~\"Mean Length root of order 2 (cm)\",\n    \n    \"BC2_sum_1\"~\"Sum Length root of order 1 (cm)\",\n    \"BC2_sum_2\"~\"Sum Length root of order 2 (cm)\",\n    \n    \"density\"~\"Density\", \n    \"root_LR1\"~\"LR1\",\n    \"root_LR3\"~\"LR3\",\n    \"root_Area\"~\"Root projected area (cm²)\", \n    \"root_Surface\"~\"Root surface area (cm²)\", \n    \"root_Volume\"~\"Root Volume (cm\\u00B3)\",\n    \"root_ConvexHull\"~\"Area of the root convex hull (cm²)\",\n    \"root_Length\"~\"Root length (cm)\",\n    \"root_LR2\"~\"LR2\",\n    \"root_LR_tot\"~\"LR Total\",\n    \"root_Width\"~\"Root Width (cm)\",\n    \"Cond\"~\"g\\U209B (mol H\\U2082O.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"ETtot\"~\"ETtot (mL)\",\n    \"LWP\"~\"\\u03C8&lt;sub&gt;leaf&lt;/sub&gt; (MPa)\",\n    \"sRWU\"~ \"sRWU (gH&lt;sub&gt;2&lt;/sub&gt;O[gBM&lt;sub&gt;root&lt;/sub&gt;.day\\U207B\\U00B9]\\U207B\\U00B9)\",\n    \"TR\"~\"TR (mmol H\\U2082O.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"WUE\"~\"WUE (g.gH\\U2082O\\U207B\\U00B9)\",\n    \"Tleaf\"~\"Leaf temperature (°C)\", \n    \"SLA\"~\"SLA (m²/kg)\",\n    \"S.R\"~\"Shoot / Root ratio\"\n  )\ngt_wen_resum\n\n\n\n\n\n\n\n\nSummary of physiological and structural variables for Wendy\n\n\nVariable\nWen_WW_OT\n\nWen_WS_OT\n\n\nWen_WW_HS\n\n\nWen_WS_HS\n\n\n\n\n\n\nVariable related to carbon flows\n\n\nAn (µmol CO₂.m⁻².s⁻¹)\n7.39\n±1.19\n4.48\n±2.06\n**\n9.15\n±2.09\nns\n-1.40\n±0.77\n***\n\n\nLeaf area (cm²)\n218.34\n±54.09\n75.06\n±11.35\n***\n188.08\n±49.04\nns\n42.83\n±8.12\n***\n\n\nVariable related to RSA\n\n\nMean Length root of order 1 (cm)\n2.74\n±0.32\n2.46\n±0.48\nns\n3.53\n±0.32\n***\n2.19\n±0.42\n**\n\n\nSum Length root of order 1 (cm)\n520.53\n±96.37\n536.45\n±147.53\nns\n603.64\n±59.76\n*\n386.77\n±81.04\n**\n\n\nSum Length root of order 2 (cm)\n557.6\n±114.83\n269.80\n±81.88\n***\n288.5\n±84.3\n***\n30.09\n±27.21\n***\n\n\nDensity\n0.28\n±0.04\n0.26\n±0.05\nns\n0.25\n±0.05\n*\n0.18\n±0.03\n***\n\n\nRoot projected area (cm²)\n58.02\n±9.39\n40.65\n±7\n***\n51.33\n±8.42\n**\n21.62\n±4.25\n***\n\n\nArea of the root convex hull (cm²)\n210.79\n±29.39\n157.09\n±30.48\n***\n209.04\n±23.5\nns\n122.52\n±24.54\n***\n\n\nRoot length (cm)\n1.3e+03\n±210.77\n911.48\n±139.09\n***\n1.2e+03\n±164.53\n**\n506.79\n±81.04\n***\n\n\nRoot surface area (cm²)\n193.74\n±31.62\n131.81\n±22.98\n***\n169.75\n±29.4\n**\n69.08\n±13.69\n***\n\n\nRoot Volume (cm³)\n839.44\n±171.44\n548.83\n±123.94\n***\n731.41\n±172.9\n*\n265.18\n±69.83\n***\n\n\nRoot Width (cm)\n25.24\n±2.22\n20.41\n±3.85\n***\n23.81\n±2.22\n*\n15.51\n±3.14\n***\n\n\nVariable related to water flows\n\n\ngₛ (mol H₂O.m⁻².s⁻¹)\n0.06\n±0.07\n-0.01\n±0.03\n*\n0.11\n±0.08\nns\n0.02\n±4.8e-03\nns\n\n\nETtot (mL)\n1.6e+03\n±138.26\n436.71\n±60.24\n***\n1.9e+03\n±205.04\n***\n473.86\n±74.01\n***\n\n\nψleaf (MPa)\n-0.07\n±0.14\n-0.76\n±0.44\n*\n-0.12\n±0.15\nns\n-1.02\n±0.58\n**\n\n\nsRWU (gH2O[gBMroot.day⁻¹]⁻¹)\n0.77\n±0.21\n0.32\n±0.06\n***\n0.98\n±0.24\n*\n0.54\n±0.09\n**\n\n\nTR (mmol H₂O.m⁻².s⁻¹)\n3.03\n±0.67\n0.86\n±0.23\n***\n4.12\n±0.95\n**\n1.06\n±0.25\n***\n\n\nWUE (g.gH₂O⁻¹)\n0.77\n±0.18\n1.18\n±0.23\n***\n0.65\n±0.14\nns\n0.67\n±0.14\nns\n\n\nOther variable\n\n\nSLA (m²/kg)\n33.82\n±3.05\n31.54\n±1.18\n*\n29.31\n±3.16\n***\n24.07\n±2.54\n***\n\n\nLeaf temperature (°C)\n32.63\n±0.59\n33.19\n±0.29\nns\n35.27\n±0.54\n***\n37.11\n±0.82\n***\n\n\n\nFor each trait, values are means ± SD. Asterisks means that the values are considered as significantly different from the values of the control condition (Welch Two Sample t-test). The stars indicate the level of statistical significance of the results as follows: *** p &lt; 0.001, ** p &lt; 0.01, * p &lt; 0.05, ns not significant.\n\n\n\n\n\n\n\n\nCode\n#export \ngtsave(gt_sto_resum, here::here(\"report/multi_omics/table/gt_sto_resum_article.html\"))\ngtsave(gt_wen_resum, here::here(\"report/multi_omics/table/gt_wen_resum_article.html\"))\n\n# excel\n#write_xlsx(list_dataframes, here::here(paste0(\"report/multi_omics/table/gt_resum_physio.xlsx\")))",
    "crumbs": [
      "**📊 Multi-Omics Integration**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Root architecture - Ionomics - Biomass - Water - Licor</span>"
    ]
  },
  {
    "objectID": "report/multi_omics/A1_physio_iono_RA.html#contribution-of-each-factor-for-eatch-variable",
    "href": "report/multi_omics/A1_physio_iono_RA.html#contribution-of-each-factor-for-eatch-variable",
    "title": "13  Root architecture - Ionomics - Biomass - Water - Licor",
    "section": "13.4 Contribution of each factor for eatch variable",
    "text": "13.4 Contribution of each factor for eatch variable\n\n\nCode\nv_related_to_carbon_flow &lt;- c(\"DW_leaf\", \"DW_stem\", \"DW_root\",\"An\", \"RUE\",\"Tot_DW\",\"leaf_Area\") \n\nv_related_to_water_flow &lt;- c(\"ETtot\",\"LWP\",\"TR\",\"sRWU\",\"WUE\",\"Cond\") \n\nv_related_to_RSA &lt;- c(\"root_Area\", \"root_Surface\",\"root_Volume\", \"root_Length\",\"root_ConvexHull\", \"root_Width\",\"density\",\"root_LR1\",\"root_LR2\",\"root_LR_tot\",\"BC2_mean_1\",\"BC2_mean_2\",\"BC2_sum_1\",\"BC2_sum_2\") \n\nv_var&lt;-c(v_related_to_carbon_flow, v_related_to_water_flow,v_related_to_RSA, \"SLA\", \"Tleaf\",\"S.R\")\n\ndf_all=read.csv(file = here::here(\"data/multi_omics/output/df_all_information_plant_num_day19.csv\")) %&gt;% \n  tibble() %&gt;%\n    select(plant_num, condition,genotype,water_condition,heat_condition, all_of(v_var)) %&gt;% \n  pivot_longer(cols = v_var, names_to = \"variable\", values_to = \"value\")\n  \ncompile_result=as.data.frame(matrix(data=NA,nrow = 0, ncol = 8))\nfor (i in 1:length(levels(as.factor(df_all$variable)))){\n  variable_l_i=as.character(levels(as.factor(df_all$variable))[i])\n  cat( \"Variable:\" ,variable_l_i, \"\\n\")\n  \n  df_x= df_all  %&gt;% \n    filter(variable==variable_l_i) %&gt;% \n    drop_na(value)\n  \n  formula_string &lt;- as.formula(paste(\"value\", \"~\", paste(\"genotype\",\"*\",\"water_condition\",\"*\",\"heat_condition\", sep = \"\")))\n  \n  # Effectuer l'ANOVA à l'aide de la fonction aov\n  result_variable &lt;- aov(data = df_x, formula = formula_string)\n  anova_result=summary(result_variable)[[1]] %&gt;% mutate(R2 = `Sum Sq` / sum(`Sum Sq`))\n  \n  row_name&lt;-rownames(anova_result)\n  row_name &lt;- gsub(\"genotype\",\"Genotype\",row_name)\n  row_name &lt;- gsub(\"water_condition\",\"Water\",row_name)\n  row_name &lt;- gsub(\"heat_condition\",\"Heat\",row_name)\n  rownames(anova_result)&lt;-row_name\n  anova_result$variable=as.character(df_x$variable)[1]\n  compile_result=rbind(compile_result,anova_result)\n\n}\n\ncompile_result&lt;-compile_result %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column(\"contribution_variable\") %&gt;% \n  mutate(Significance = case_when(\n    `Pr(&gt;F)` &lt;= 0.001 ~ '***',\n    `Pr(&gt;F)` &lt; 0.01  ~ '**',\n    `Pr(&gt;F)` &lt; 0.05  ~ '*',\n    `Pr(&gt;F)` &lt; 0.1   ~ '.',\n    TRUE            ~ ' '\n  ))\n\ncompile_result_modif=compile_result%&gt;% \n  filter(str_detect(contribution_variable, \"Total\", negate = TRUE)) %&gt;% \n  filter(str_detect(contribution_variable, \"Residual\", negate = TRUE)) %&gt;% \n  mutate(contribution_variable = str_replace_all(contribution_variable, \" \", \"\")) %&gt;% \n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"\\\\$\", \"\"))%&gt;%\n  mutate_at(vars(contribution_variable), ~str_replace_all(., \"[0-9]\", \"\")) %&gt;% \n  mutate(contribution_variable = as.character(contribution_variable)) %&gt;% \n  mutate(fontcolor = ifelse(contribution_variable %in% c(\"Water\", \"Genotype:Water:Heat\"), \"#ffffff\", \"#000000\")) %&gt;% \n  mutate(contribution_variable=fct_relevel(contribution_variable,c(\"Genotype\",\"Water\",\"Heat\", \"Genotype:Water\",\"Genotype:Heat\",\"Water:Heat\",\"Genotype:Water:Heat\"))) %&gt;% \n  mutate(text_output=paste0(round(R2*100,0), \"% \", Significance)) %&gt;% \n   mutate(variable=case_match(variable,\n    \"An\" ~  \"An (\\U00B5mol CO\\U2082.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"DW_leaf\" ~ \"Leaf dry weight (g)\",\n    \"DW_stem\" ~ \"Stem dry weight (g)\",\n    \"DW_root\" ~ \"Root dry weight (g)\",\n    \"leaf_Area\" ~ \"Leaf area (cm²)\",\n    \"RUE\" ~ \"RUE (g.cm\\U207B\\U00B2)\",\n    \"Tot_DW\" ~ \"Total dry weiht (g)\",\n     \"BC2_mean_1\"~\"Mean Length root of order 1 (cm)\",\n    \"BC2_mean_2\"~\"Mean Length root of order 2 (cm)\",\n    \"BC2_sum_1\"~\"Sum Length root of order 1 (cm)\",\n    \"BC2_sum_2\"~\"Sum Length root of order 2 (cm)\",\n    \"density\"~\"Density\", \n    \"root_LR1\"~\"Lateral root 1\",\n    \"root_LR3\"~\"Lateral root 3\",\n    \"root_Surface\"~\"Root surface area (cm²)\", \n    \"root_Volume\"~\"Root volume (cm\\u00B3)\",\n    \"root_Area\"~\"Root projected area (cm²)\", \n    \"root_ConvexHull\"~\"Area of the root convex hull (cm²)\",\n    \"root_Length\"~\"Root length (cm)\",\n    \"root_LR2\"~\"Lateral root 2\",\n    \"root_LR_tot\"~\"Lateral Root Total\",\n    \"root_Width\"~\"Root Width (cm)\",\n    \"Cond\"~\"g\\U209B (mol H\\U2082O.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"ETtot\"~\"ETtot (mL)\",\n    \"LWP\"~\"\\u03C8leaf (MPa)\",\n    \"sRWU\"~ \"sRWU (gH\\U2082O[gBMroot.day\\U207B\\U00B9]\\U207B\\U00B9)\",\n    \"TR\" ~ \"TR (mmol H\\U2082O.m\\U207B\\U00B2.s\\U207B\\U00B9)\",\n    \"WUE\"~\"WUE (g.gH\\U2082O\\U207B\\U00B9)\",\n    \"Tleaf\"~\"Leaf temperature (°C)\",\n    \"SLA\"~\"SLA (m²/kg)\",\n    \"S.R\"~\"Shoot / Root ratio\"\n  )\n) %&gt;% dplyr::group_by(variable) %&gt;% \n  dplyr::mutate(Sum=sum(R2)) %&gt;% \n  ungroup()\n  \n\nplot_contrib&lt;-ggplot(compile_result_modif, aes(x = reorder(variable,Sum), y = R2, fill = contribution_variable)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = ifelse(R2 &gt; 0.03, text_output, \"\")), color = compile_result_modif$fontcolor, position = position_stack(vjust = 0.5), size = 2.5)+\n  scale_fill_manual(values = c(\"#ffd166\", #geno\n                               \"#118ab2\", #water\n                               \"#ef476f\",#heat\n                               \"#06d6a0\", #watergeno\n                               \"#f78c6b\", #genoheat\n                               \"#FFB6C1\", # waterheat\n                               \"#333333\"),\n                    name = \"title of legend (contribution\") +#all\n  scale_y_continuous(labels = scales::percent_format())+\n  scale_color_identity()+\n  labs(x = \"Variable\",\n       y = \"The relative contribution for the different variables (%)\",\n       ) +\n  theme_minimal()+\n  theme(panel.grid = element_blank(),\n        legend.title = element_blank(), #for delete title\n        axis.text.x = element_text(angle = 0,hjust = 1, vjust = 1)\n        #axis.title.y = element_blank()\n  )+\n  coord_flip(); plot_contrib\n\nggsave(here::here(\"report/multi_omics/plot/contribution_physio_network.svg\"),plot_contrib, height = 6,width = 12)\n\n\n ## Calcul of all comparisons with MlM\n\n\nCode\ncalculate_critical_value &lt;- function(p_value) {\n  # Calculate the corresponding cumulative probability for a two-way p-value\n  prob_cumulative &lt;- 1 - p_value / 2\n  \n  # Find the corresponding z-value in the standard normal distribution\n  critical_value &lt;- qnorm(prob_cumulative)\n  \n  return(critical_value)\n}\n\n\n\n\nCode\n#vec_variable=colnames(df_iono[8:length(df_iono)]) #data frame plant_num only\nvec_variable=colnames(df_compile[8:length(df_compile)])\ncomb_vec &lt;- combn(vec_variable, 2, simplify = F)\ncomb_vec_df &lt;- do.call(rbind, comb_vec) %&gt;% as.data.frame()\n\nnb_cores &lt;- detectCores()\nregisterDoParallel(cores = nb_cores-1)\ndf_result &lt;- foreach(i = 1:length(comb_vec_df$V1), .combine = rbind) %dopar% {\n  library(dplyr)\n  library(tidyr)\n  library(lme4)\n  library(AICcmodavg)\n  library(patchwork)\n  library(performance)\n  library(MuMIn)\n  \n  V1_x &lt;- comb_vec_df[i, 1]\n  V2_x &lt;- comb_vec_df[i, 2]\n  \n  df_compile_select &lt;- df_compile %&gt;% drop_na(V1_x, V2_x) %&gt;% as.data.frame()\n  \n  df_compile_select[,V1_x]&lt;-(df_compile_select[,V1_x]-mean(df_compile_select[,V1_x]))/sd(df_compile_select[,V1_x])\n  df_compile_select[,V2_x]&lt;-(df_compile_select[,V2_x]-mean(df_compile_select[,V2_x]))/sd(df_compile_select[,V2_x])\n  \n  m1 &lt;- lmer(formula(paste(V1_x, '~', V2_x ,\" + (1|genotype) + (1|water_condition) + (1|heat_condition)\")), data = df_compile_select, REML=T)\n  \n  AICc_val &lt;- AICc(m1)\n  \n  df_coeff &lt;- lmerTest:::get_coefmat(m1) |&gt; as.data.frame()\n  intercept &lt;- df_coeff[1,1]\n  slope &lt;- df_coeff[2,1]\n  pval &lt;- df_coeff[2,5]\n  \n  result &lt;- summary(m1)\n  residuals &lt;- result$coefficients[4]\n  \n  CI_sup05 &lt;- slope + residuals * calculate_critical_value(0.05)\n  CI_inf05 &lt;- slope - residuals * calculate_critical_value(0.05)\n  \n  CI_sup01 &lt;- slope + residuals * calculate_critical_value(0.01)\n  CI_inf01 &lt;- slope - residuals * calculate_critical_value(0.01)\n  \n  CI_sup001 &lt;- slope + residuals * calculate_critical_value(0.001)\n  CI_inf001 &lt;- slope - residuals * calculate_critical_value(0.001)\n  \n  r2 &lt;- r.squaredGLMM(m1)\n  r2m &lt;- r2[1]\n  r2c &lt;- r2[2]\n  \n  cat(i, \"_\", V1_x, \"_\", V2_x, \"\\n\")\n  \n  return(data.frame(V1 = V1_x, V2 = V2_x, \n                    AICc = AICc_val,\n                    intercept = intercept, \n                    slope = slope,\n                    pval = pval, \n                    residuals = residuals, \n                    CI_sup05 = CI_sup05,\n                    CI_inf05 = CI_inf05,\n                    CI_sup01 = CI_sup01,\n                    CI_inf01 = CI_inf01,\n                    CI_sup001 = CI_sup001,\n                    CI_inf001 = CI_inf001,\n                    r2m = r2m, \n                    r2c = r2c) %&gt;% \n  mutate(between_IC05 = ifelse(CI_sup05 &gt; CI_inf05, \n                                 ifelse(0 &gt;= CI_inf05 & 0 &lt;= CI_sup05, \"yes\", \"no\"), \n                                 \"no\")) %&gt;% \n  mutate(between_IC01 = ifelse(CI_sup01 &gt; CI_inf01, \n                                 ifelse(0 &gt;= CI_inf01 & 0 &lt;= CI_sup01, \"yes\", \"no\"), \n                                 \"no\")) %&gt;% \n  mutate(between_IC001 = ifelse(CI_sup001 &gt; CI_inf001, \n                                 ifelse(0 &gt;= CI_inf001 & 0 &lt;= CI_sup001, \"yes\", \"no\"), \n                                 \"no\"))\n  )\n}\nstopImplicitCluster()\nsave(df_result,file = here::here(\"data/multi_omics/output/A/tmp1.RData\"))",
    "crumbs": [
      "**📊 Multi-Omics Integration**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Root architecture - Ionomics - Biomass - Water - Licor</span>"
    ]
  },
  {
    "objectID": "report/multi_omics/A1_physio_iono_RA.html#selection-based-on-pvalue-and-r²",
    "href": "report/multi_omics/A1_physio_iono_RA.html#selection-based-on-pvalue-and-r²",
    "title": "13  Root architecture - Ionomics - Biomass - Water - Licor",
    "section": "13.5 Selection based on pvalue and R²",
    "text": "13.5 Selection based on pvalue and R²\nR2m (Marginal R²): This represents the variance explained by the fixed effects in your model. It is similar in interpretation to the R² value in traditional linear regression models. R2c (Conditional R²): This represents the variance explained by both the fixed and random effects in your model. It considers both fixed and random effects, providing a more comprehensive measure of goodness-of-fit for mixed-effects models. Both Rm2 and R2c can be useful in understanding the proportion of variance explained by the predictors in your model. Depending on your research question and the nature of your data, one or both of these metrics may be relevant for evaluating model fit.\n\n\nCode\nload(file = here::here(\"data/multi_omics/output/A/tmp1.RData\"))\npalette_colors &lt;- c(\"#4E76BC\", \"grey\", \"#C92C39\")\n\n# select interesting association and make vulcanoplot\ndf_result_select=df_result %&gt;% \n  mutate(select=ifelse(AICc&lt;100 &\n    pval&lt;0.001 & abs(slope)&gt;0.5 & (r2m&gt;0.50 |r2c &gt; 0.85\n                                   ) & between_IC001==\"no\" , \"yes\", \"no\")) %&gt;% \n  \n  #mutate(select=ifelse(pval&lt;0.00001 & between_IC01==\"no\" , \"yes\", \"no\")) %&gt;% \n  #mutate(select=ifelse(between_IC001==\"no\" , \"yes\", \"no\")) %&gt;% \n  \n  \n  #mutate(select=ifelse(r2m &gt; 0.5,\"yes\",select)) %&gt;% \n  #mutate(select=ifelse(r2c &gt; 0.5,\"yes\",select)) %&gt;% \n  dplyr::group_by(V2) %&gt;% \n  arrange(desc(select),desc(-log10(pval))) %&gt;% \n  as.data.frame() %&gt;% \n  dplyr::mutate(Line_Number = dplyr::row_number()) %&gt;% \n  mutate(name_var=ifelse(Line_Number&lt;=20,paste0(V1,\"/\",V2),NA)) %&gt;% \n  mutate(name_var = ifelse(str_detect(name_var, \"concentration\"), str_replace(name_var, \"concentration\", \"conc\"), name_var)) %&gt;% \n  # mutate(name_var = ifelse(str_detect(name_var, \"leaf\"), str_replace(name_var, \"leaf\", \"L\"), name_var)) %&gt;% \n  # mutate(name_var = ifelse(str_detect(name_var, \"stem\"), str_replace(name_var, \"stem\", \"S\"), name_var)) %&gt;% \n  # mutate(name_var = ifelse(str_detect(name_var, \"root\"), str_replace(name_var, \"root\", \"R\"), name_var)) %&gt;% \n  mutate(name_var = gsub(\"[0-9]\", \"\", name_var)) %&gt;% \n  mutate(slope_modif=ifelse(select==\"yes\",slope,0))\n  \npx&lt;-df_result_select %&gt;%\nggplot(aes(x = -log10(pval), y = r2m,color=slope_modif)) +\n  #geom_point(color = ifelse(-log10(df_result$pval) &gt; 1.3 & df_result$r2m &gt; 0.5, \"red\", \"black\"), size = 1.5) + # Points rouges pour les valeurs significatives\n  geom_point(aes(size=-log10(pval) ) ,alpha=0.8)+ # Points rouges pour les valeurs significatives\n  geom_hline(yintercept = 0.5, linetype = \"dashed\", color = \"blue\") + # Ligne pour marquer un seuil de R2\n  geom_vline(xintercept = -log10(0.05), linetype = \"dashed\", color = \"blue\") + # Ligne pour marquer un seuil de p-valeur\n  labs(x = \"-log10(p-value)\", y = \"R² (r2m)\", title = \"Volcano Plot\") +\n  theme_minimal()+\n  geom_text_repel(data = df_result_select, aes(label = name_var),box.padding = unit(0.2, \"lines\"),\n    point.padding = unit(0.6, \"lines\"),size=3)+\n  #scale_color_stepsn(colors=c('#b2182b','#ef8a62','#fddbc7','#f7f7f7','#d1e5f0','#67a9cf','#2166ac'),n.breaks=10)\n  #scale_color_distiller(palette = 'RdBu',direction =-1)\n  #scale_color_distiller(palette = \"Spectral\")\n   scale_color_gradient2(low = palette_colors[1], mid = palette_colors[2], high = palette_colors[3],\n                        midpoint = 0, limits = c(-1.4, 1.4), guide = \"legend\",\n                        name = \"Correlation\",\n                        breaks = c(1, 0, -1),\n                        labels = c(\"Positive\", \"Neutral\", \"Negative\"))+\n  labs(title=paste0(\"Filtered correlation: \",length(df_result_select %&gt;% filter(select==\"yes\") %&gt;% pull(select))),\n       subtitle = paste0(\"Positive: \",length(df_result_select %&gt;% filter(select==\"yes\") %&gt;% filter(slope&gt;0) %&gt;% pull(select)),\"\\n\",\n                  \"Negative: \",length(df_result_select %&gt;% filter(select==\"yes\") %&gt;% filter(slope&lt;0) %&gt;% pull(select)))\n       )\npx\nwrite.csv(x = df_result_select,here::here(\"data/multi_omics/output/df_result_select.csv\"))\n\n#ggsave(here::here(\"report/multi_omics/plot/MLM_physio_iono.svg\"), px, height = 18,width = 10)\nggsave(here::here(\"report/multi_omics/plot/iono_ra_physio/MLM_all_50.svg\"), px, height = 14,width = 10)\nsave(df_result_select,file = here::here(\"data/multi_omics/output/A/tmp2.RData\"))\n\n\n\n\n\nCode\nload(file = here::here(\"data/multi_omics/output/A/tmp2.RData\"))\n\n\nOut of the 9316 possible combinations, only 2.48% were used to create the graph, representing 231 combinations. In total there were 177 variables representing node in this graph",
    "crumbs": [
      "**📊 Multi-Omics Integration**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Root architecture - Ionomics - Biomass - Water - Licor</span>"
    ]
  },
  {
    "objectID": "report/multi_omics/A1_physio_iono_RA.html#network-plot-with-igraph",
    "href": "report/multi_omics/A1_physio_iono_RA.html#network-plot-with-igraph",
    "title": "13  Root architecture - Ionomics - Biomass - Water - Licor",
    "section": "13.6 Network plot with Igraph",
    "text": "13.6 Network plot with Igraph\n\n\nCode\nload(file = here::here(\"data/multi_omics/output/A/tmp2.RData\"))\n# filter the data previously generate\n\nwords_to_remove &lt;- c(\"sEUpE\", \"DW\",\"Ba\",\"As\",\"Cd\",\"Ti\",\"Be\",\"Fe\",\"V\",\"Cr\",\"Tl\")\nwords_to_remove &lt;- c(\"sEUpE\")\nwords_to_remove &lt;- c(\"sEUpE_C\")\nwords_to_remove &lt;- c(\"sEUpE_U\")\n\ndf_select=df_result_select %&gt;% \n  filter(select==\"yes\") %&gt;% \n  filter(between_IC01==\"no\") %&gt;% \n  filter(!str_detect(V1, paste(words_to_remove, collapse = \"|\"))) %&gt;% \n  filter(!str_detect(V2, paste(words_to_remove, collapse = \"|\")))\n\n#hist(df_select$slope_modif)\n# creation of the node \n\nnodes&lt;-data.frame(variable = unique(c(df_select$V1,df_select$V2))) %&gt;% \n  mutate(id = paste0(\"s\", 1:length(unique(c(df_select$V1,df_select$V2))))) %&gt;% \n  relocate(id, .before=variable) %&gt;%\n  #mutate(variable_type = sample(1:3, nrow(.), replace = TRUE)) %&gt;%  #generate for aleatoire color\n  mutate(organe= case_when(\n    grepl(\"leaf\", variable) ~ \"leaf\",\n    grepl(\"stem\", variable) ~ \"stem\",\n    grepl(\"root\", variable) ~ \"root\",\n    grepl(\"sEUpE\", variable) ~ \"sEUpE\",\n    grepl(\"TR\", variable) ~ \"leaf\",\n    TRUE ~ \"autre\"\n  )) %&gt;% mutate(organe_num= case_when(\n    grepl(\"leaf\", variable) ~ 1,\n    grepl(\"stem\", variable) ~ 2,\n    grepl(\"root\", variable) ~ 3,\n    grepl(\"sEUpE\", variable) ~ 5,\n    grepl(\"TR\", variable) ~ 1,\n    TRUE ~ 4\n  )) %&gt;% mutate(variable_type= case_when(\n    grepl(\"concentration\", variable) ~ 1,\n    grepl(\"LWP\", variable) ~ 2,\n    grepl(\"WUE\", variable) ~ 2,\n    grepl(\"sRWU\", variable) ~ 2,\n    grepl(\"SLA\", variable) ~ 2,\n    grepl(\"S.R\", variable) ~ 2,\n    grepl(\"TR\", variable) ~ 2,\n    grepl(\"ETtot\", variable) ~ 2,\n    grepl(\"DW\", variable) ~ 2,\n    grepl(\"Cond\", variable) ~ 2,\n    grepl(\"An\", variable) ~ 2,\n    grepl(\"Height\", variable) ~ 2,\n    grepl(\"leaf_Area\", variable) ~ 2,\n    grepl(\"sEUpE\", variable) ~ 4,\n    TRUE ~ 3\n  )) %&gt;%  \n  mutate(variable_cleaned = ifelse(variable_type==1,gsub(\"[0-9_]\", \"\", variable),variable)) %&gt;%\n  mutate(variable_cleaned = ifelse(variable_type==4,gsub(\"[0-9_]\", \"\", variable_cleaned),variable_cleaned)) %&gt;%\n  mutate(variable_cleaned = gsub(\"[_]\",\"\",variable_cleaned)) %&gt;%\n  mutate(variable_cleaned = gsub(\"(stem|leaf|root|concentration|sEUpE)\", \"\", variable_cleaned)) %&gt;% \n  mutate(nb_char = nchar(variable_cleaned)) %&gt;% \n  mutate(variable_cleaned  = gsub(\"LWP\", \"\\u03C8\", variable_cleaned))\n\n# links\nlinks&lt;-df_select %&gt;% \n  dplyr::select(V1,V2,slope_modif) %&gt;% \n  inner_join(nodes %&gt;% dplyr::rename(V1=variable) %&gt;% dplyr::rename(X1=id),.,by=\"V1\") %&gt;% \n  inner_join(nodes %&gt;% dplyr::rename(V2=variable) %&gt;% dplyr::rename(X2=id),.,by=\"V2\") %&gt;% \n  relocate(X1, .before=X2) %&gt;% \n  relocate(V1, .before=V2) \n\n# Converting the data to an igraph object:\nnet &lt;- graph.data.frame(links, nodes, directed=T) \n\nsave(nodes, links, net,file = here::here(\"data/multi_omics/output/A/tmp3.RData\"))\n\n# Generate colors base on trend type:\ncolrs2 &lt;- c(\"#68a500\", \"#b8af83\", \"#ce7f50\",\"black\",\"#345995\")\nV(net)$color &lt;- colrs2[V(net)$organe_num]\n\n# Compute node degree (#links) and use it to set node size:\ndeg &lt;- degree(net, mode=\"all\")\n# if(fc_or_pval==\"pval\"){\n#   V(net)$size &lt;- V(net)$log10_pval_test_t*6 #ixi modifie la taille des points\n# }else if(fc_or_pval==\"fc\"){\n#   V(net)$size &lt;- V(net)$abslog2fc*10 #ixi modifie la taille des points\n#   }\n\nmyrhombus &lt;- function(coords, v = NULL, params) {\n  vertex.color &lt;- params(\"vertex\", \"color\")\n  if (length(vertex.color) != 1 && !is.null(v)) {\n    vertex.color &lt;- vertex.color[v]\n  }\n  vertex.size &lt;- 1/200 * params(\"vertex\", \"size\")\n  if (length(vertex.size) != 1 && !is.null(v)) {\n    vertex.size &lt;- vertex.size[v]\n  }\n\n  symbols(x = coords[, 1], y = coords[, 2], bg = vertex.color,\n          stars = cbind(1.2*vertex.size, vertex.size, 1.2*vertex.size, vertex.size),\n          add = TRUE, inches = FALSE)\n}\n# clips as a circle\nadd_shape(\"rhombus\", clip = shapes(\"circle\")$clip,\n          plot = myrhombus)\n\n## Function for plotting an elliptical node\nmyellipse &lt;- function(coords, v=NULL, params) {\n  vertex.color &lt;- params(\"vertex\", \"color\")\n  if (length(vertex.color) != 1 && !is.null(v)) {\n    vertex.color &lt;- vertex.color[v]\n  }\n  vertex.size &lt;- 1/30 * params(\"vertex\", \"size\")\n  if (length(vertex.size) != 1 && !is.null(v)) {\n    vertex.size &lt;- vertex.size[v]\n  }\n\n  draw.ellipse(x=coords[,1], y=coords[,2],\n    a = vertex.size, b=0.032, col=vertex.color)\n}\n\n## Register the shape with igraph\nadd_shape(\"ellipse\", clip=shapes(\"circle\")$clip,\n                 plot=myellipse)\n\nV(net)$shape&lt;-ifelse(V(net)$variable_type==2,\"rectangle\",ifelse(V(net)$variable_type==3,\"ellipse\",ifelse(V(net)$variable_type==4,\"rhombus\",\"circle\")))\nV(net)$size=6.5+deg*0.7 #avant 10\nV(net)$size=ifelse(V(net)$shape==\"rectangle\",V(net)$nb_char*1.8+4,ifelse(V(net)$shape==\"ellipse\",ifelse(V(net)$nb_char&gt;4,2+V(net)$nb_char*0.16,V(net)$nb_char*0.4),7))\nV(net)$size2=5\n# The labels are currently node IDs.\n# Setting them to NA will render no labels:\ncolrs1 &lt;- c(\"black\", \"white\", \"black\",\"white\")\nV(net)$label.color &lt;-colrs1[ifelse(V(net)$organe==\"autre\",2,V(net)$variable_type)] #color of the label\nV(net)$label.dist &lt;-0#.7 #distance from the center of the vertex\nV(net)$label.family=\"sans\" #type de police\nV(net)$label.font=V(net)$variable_type # 2 for bolt 1 is plaint texte 3 for italic\n#V(net)$label &lt;- NA\n\n# Set edge width based on weight:\n#E(net)$width &lt;- -log10(1-abs(E(net)$slope_modif))*1.5# avt /6\nE(net)$width &lt;- (abs(E(net)$slope_modif))*2# avt /6\n\n#change arrow size and edge color:\nE(net)$arrow.size &lt;- .2\nE(net)$edge.color &lt;- \"gray80\"\n\n# Let's color the edges of the graph based on their source node color.\n# We'll get the starting node for each edge with \"get.edges\"\nedge.start &lt;- get.edges(net, 1:ecount(net))[,1]\nedge.col &lt;- V(net)$color[edge.start]\n\nvec_color=ifelse(E(net)$slope_modif&gt;0,\"red\",\"blue\")\nedge.col &lt;-vec_color #mettre red if is upper green if is lower 0\n\nl=layout_in_circle\nl=layout_with_kk # Kamada Kawai #Like Fruchterman Reingold, it attempts to minimize the energy in a spring system.\nl=layout_on_grid\nl=layout_with_fr #Fruchterman-Reingold\n\n# export\nsvg(width=10, height=10,filename = here::here(\"report/multi_omics/plot/iono_ra_physio/network_all.svg\"))\nset.seed(1)\nplot(net, layout=l, \n       edge.lty= 1,\n       edge.arrow.size=0,\n       vertex.label=V(net)$variable_cleaned,\n       vertex.label.cex = 0.8,\n       edge.color=edge.col,\n       edge.curved=.15)\ntitle(main = \"Network plot based on MLM results show correlation between variables\")\nmtext(paste0(\"Positive correlation: \",length(df_select %&gt;% filter(slope_modif&gt;0) %&gt;% pull(slope_modif))),\n      side = 1, line = 2, cex = 0.8,col = \"red\")\nmtext(paste0(\"Negative correlation: \",length(df_select %&gt;% filter(slope_modif&lt;0) %&gt;% pull(slope_modif))),\n      side = 1, line = 1, cex = 0.8,col = \"blue\")\n\ndev.off()\n\n## Degree Distribution Histogram\n\ndf_deg=tibble(nodes=names(deg),deg=as.vector(deg)) %&gt;%\n  full_join(nodes %&gt;% as.data.frame() %&gt;% dplyr::rename(nodes=id),.,by=\"nodes\") %&gt;%\n  arrange(desc(deg)) %&gt;% \n  mutate(variable_cleaned = ifelse(variable_type==1|variable_type==4,gsub(\"[0-9_]\", \"\", variable),variable)) %&gt;%\n  mutate(variable_cleaned = gsub(\"[_]\",\"\",variable_cleaned)) %&gt;%\n  mutate(variable_cleaned = gsub(\"(concentration)\", \"\", variable_cleaned)) %&gt;% \n    mutate(variable_cleaned = gsub(\"(stem)\", \"\", variable_cleaned)) %&gt;% \n  mutate(variable_cleaned = gsub(\"(root)\", \" \", variable_cleaned)) %&gt;% \n  mutate(variable_cleaned = gsub(\"(leaf)\", \"  \", variable_cleaned)) %&gt;% \n  mutate(organe=factor(organe, levels = c(\"leaf\", \"stem\", \"root\",\"autre\", \"sEUpE\"))) %&gt;% \n  mutate(variable_cleaned = gsub(\"sEUpE\", \"sEUE \", variable_cleaned))\n  #mutate(variable_cleaned = gsub(\"(stem|leaf|root|concentration)\", \"\", variable_cleaned))\n\npx=df_deg %&gt;% \n  filter(deg &gt; 3) %&gt;% \n  ggplot(aes(x = deg, y = reorder(variable_cleaned, -deg), fill = organe, label = deg)) +\n  geom_col(position = 'dodge') +  \n  geom_text(hjust = -0.4) +\n  scale_fill_manual(values = colrs2, breaks = c(\"leaf\",\"stem\",\"root\", \"autre\", \"sEUpE\")) +\n  #scale_x_continuous(limits = c(0, 15),breaks = seq(0, 15, by = 1))+\n  theme_minimal() +\n  theme(axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid = element_blank(),\n        legend.position = \"none\")+\n  labs(x=\"Degree\", fill=\"Organe\")\n\nggsave(here::here(\"report/multi_omics/plot/iono_ra_physio/degree_all.svg\"), px, height = 8.5,width = 6)\n\n\n\n\n\n without efficiency\n\n\nshow the different cluster of the graph\n\n\nCode\n#help in this site https://christophergandrud.github.io/networkD3/\nload(file = here::here(\"data/multi_omics/output/A/tmp3.RData\"))\n\nnet &lt;- graph.data.frame(links %&gt;% mutate(X1=V1) %&gt;% mutate(X2=V2), nodes %&gt;% mutate(id=variable), directed=T) #convert seed and note to be redable\n# deg.dist &lt;- degree_distribution(net, cumulative=T, mode=\"all\")\n# plot( x=0:max(degree(net)), y=1-deg.dist, pch=19, cex=1.2, col=\"orange\", \n#       xlab=\"Degree\", ylab=\"Cumulative Frequency\")\n\n# Use igraph to make the graph and find membership\nwc2 &lt;-cluster_walktrap(net)\n# members &lt;- membership(wc)\nmembers2 &lt;- membership(wc2)\n\n# Convert to object suitable for networkD3\nkarate_d3 &lt;- igraph_to_networkD3(net, group = members2)\n\n# Create force directed network plot\nforceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes, \n             Source = 'source', Target = 'target', \n             NodeID = 'name', Group = 'group',opacity = 0.85,\n             fontSize = 15,fontFamily = \"arial\",charge = -18,zoom = T,legend = F)\n\n\n\n\n\n\n\n\nCode\n# connect with who ? \ndf_select %&gt;% filter(V1==\"ETtot\"|V2==\"ETtot\")",
    "crumbs": [
      "**📊 Multi-Omics Integration**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Root architecture - Ionomics - Biomass - Water - Licor</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Jeudy, Christian, Marielle Adrian, Christophe Baussard, Céline Bernard,\nEric Bernaud, Virginie Bourion, Hughes Busset, et al. 2016.\n“RhizoTubes as a New Tool for High Throughput Imaging of Plant\nRoot Development and Architecture: Test, Comparison with Pot Grown\nPlants and Validation.” Plant Methods, 4.993, 12 (1):\n31. https://doi.org/10.1186/s13007-016-0131-9.\n\n\nMaslard, Corentin, Mustapha Arkoun, Fanny Leroy, Sylvie Girodet,\nChristophe Salon, and Marion Prudent. 2024. “Decoding the Double\nStress Puzzle: Investigating Nutrient Uptake Efficiency and Root\nArchitecture in Soybean Under Heat- and Water- Stresses.” https://www.authorea.com/users/825555/articles/1221188-decoding-the-double-stress-puzzle-investigating-nutrient-uptake-efficiency-and-root-architecture-in-soybean-under-heat-and-water-stresses?commit=68ef1407778b8ab959855979d12292f4733eb306.\n\n\nMaslard, Corentin, Mustapha Arkoun, Christophe Salon, and Marion\nPrudent. 2021a. “Root Architecture Characterization in Relation to\nBiomass Allocation and Biological Nitrogen Fixation in a Collection of\nEuropean Soybean Genotypes.” OCL 28: 48. https://doi.org/10.1051/ocl/2021033.\n\n\n———. 2021b. “Root Architecture Characterization in Relation to\nBiomass Allocation and Biological Nitrogen Fixation in a Collection of\nEuropean Soybean Genotypes.” OCL 28: 48. https://doi.org/10.1051/ocl/2021033.\n\n\nVoisin, A. S., Salon, Christophe, Jeudy, Christian, and F. R.\nWarembourg. 2003. “Symbiotic N2 Fixation Activity in Relation to c\nEconomy of Pisum Sativum l. As a Function of Plant Phenology.”\nJournal of Experimental Botany 54 (393): 2733–44. https://doi.org/10.1093/jxb/erg290.",
    "crumbs": [
      "References"
    ]
  }
]